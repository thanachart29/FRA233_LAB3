
Control_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005224  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080053c0  080053c0  000153c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005468  08005468  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005470  08005470  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005474  08005474  00015474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000078  080054ec  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  080054ec  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd4e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ab  00000000  00000000  0002ddf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ea2  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc0c  00000000  00000000  00046d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7cf  00000000  00000000  00053936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  000e1158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053a4 	.word	0x080053a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080053a4 	.word	0x080053a4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96e 	b.w	8000e44 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468c      	mov	ip, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 8083 	bne.w	8000c96 <__udivmoddi4+0x116>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d947      	bls.n	8000c26 <__udivmoddi4+0xa6>
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b142      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	f1c2 0020 	rsb	r0, r2, #32
 8000ba0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4097      	lsls	r7, r2
 8000ba8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bac:	4094      	lsls	r4, r2
 8000bae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb2:	0c23      	lsrs	r3, r4, #16
 8000bb4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb8:	fa1f fe87 	uxth.w	lr, r7
 8000bbc:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x60>
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 8119 	bcs.w	8000e08 <__udivmoddi4+0x288>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 8116 	bls.w	8000e08 <__udivmoddi4+0x288>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	443b      	add	r3, r7
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x8c>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	f080 8105 	bcs.w	8000e0c <__udivmoddi4+0x28c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f240 8102 	bls.w	8000e0c <__udivmoddi4+0x28c>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	443c      	add	r4, r7
 8000c0c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c10:	eba4 040e 	sub.w	r4, r4, lr
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa0>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	b902      	cbnz	r2, 8000c2a <__udivmoddi4+0xaa>
 8000c28:	deff      	udf	#255	; 0xff
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d150      	bne.n	8000cd4 <__udivmoddi4+0x154>
 8000c32:	1bcb      	subs	r3, r1, r7
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	fa1f f887 	uxth.w	r8, r7
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c42:	0c21      	lsrs	r1, r4, #16
 8000c44:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0xe4>
 8000c54:	1879      	adds	r1, r7, r1
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0xe2>
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	f200 80e9 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1ac9      	subs	r1, r1, r3
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c70:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x10c>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x10a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80d9 	bhi.w	8000e3c <__udivmoddi4+0x2bc>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e7bf      	b.n	8000c16 <__udivmoddi4+0x96>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0x12e>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <__udivmoddi4+0x282>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x1cc>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0x140>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80b8 	bhi.w	8000e30 <__udivmoddi4+0x2b0>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	468c      	mov	ip, r1
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0a8      	beq.n	8000c20 <__udivmoddi4+0xa0>
 8000cce:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f603 	lsr.w	r6, r0, r3
 8000cdc:	4097      	lsls	r7, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce6:	40d9      	lsrs	r1, r3
 8000ce8:	4330      	orrs	r0, r6
 8000cea:	0c03      	lsrs	r3, r0, #16
 8000cec:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f108 	mul.w	r1, r6, r8
 8000d00:	4299      	cmp	r1, r3
 8000d02:	fa04 f402 	lsl.w	r4, r4, r2
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x19c>
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d0e:	f080 808d 	bcs.w	8000e2c <__udivmoddi4+0x2ac>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 808a 	bls.w	8000e2c <__udivmoddi4+0x2ac>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	443b      	add	r3, r7
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b281      	uxth	r1, r0
 8000d20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb00 f308 	mul.w	r3, r0, r8
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x1c4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d3a:	d273      	bcs.n	8000e24 <__udivmoddi4+0x2a4>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d971      	bls.n	8000e24 <__udivmoddi4+0x2a4>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4439      	add	r1, r7
 8000d44:	1acb      	subs	r3, r1, r3
 8000d46:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d4a:	e778      	b.n	8000c3e <__udivmoddi4+0xbe>
 8000d4c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d50:	fa03 f406 	lsl.w	r4, r3, r6
 8000d54:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d58:	431c      	orrs	r4, r3
 8000d5a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d66:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	0c3b      	lsrs	r3, r7, #16
 8000d6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d72:	fa1f f884 	uxth.w	r8, r4
 8000d76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d7e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d82:	458a      	cmp	sl, r1
 8000d84:	fa02 f206 	lsl.w	r2, r2, r6
 8000d88:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x220>
 8000d8e:	1861      	adds	r1, r4, r1
 8000d90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d94:	d248      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000d96:	458a      	cmp	sl, r1
 8000d98:	d946      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000d9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9e:	4421      	add	r1, r4
 8000da0:	eba1 010a 	sub.w	r1, r1, sl
 8000da4:	b2bf      	uxth	r7, r7
 8000da6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000daa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000db2:	fb00 f808 	mul.w	r8, r0, r8
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x24a>
 8000dba:	19e7      	adds	r7, r4, r7
 8000dbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc0:	d22e      	bcs.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d92c      	bls.n	8000e20 <__udivmoddi4+0x2a0>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4427      	add	r7, r4
 8000dca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dce:	eba7 0708 	sub.w	r7, r7, r8
 8000dd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd6:	454f      	cmp	r7, r9
 8000dd8:	46c6      	mov	lr, r8
 8000dda:	4649      	mov	r1, r9
 8000ddc:	d31a      	bcc.n	8000e14 <__udivmoddi4+0x294>
 8000dde:	d017      	beq.n	8000e10 <__udivmoddi4+0x290>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x27a>
 8000de2:	ebb3 020e 	subs.w	r2, r3, lr
 8000de6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dea:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dee:	40f2      	lsrs	r2, r6
 8000df0:	ea4c 0202 	orr.w	r2, ip, r2
 8000df4:	40f7      	lsrs	r7, r6
 8000df6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e70b      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0x60>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6fd      	b.n	8000c0c <__udivmoddi4+0x8c>
 8000e10:	4543      	cmp	r3, r8
 8000e12:	d2e5      	bcs.n	8000de0 <__udivmoddi4+0x260>
 8000e14:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e18:	eb69 0104 	sbc.w	r1, r9, r4
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7df      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e7d2      	b.n	8000dca <__udivmoddi4+0x24a>
 8000e24:	4660      	mov	r0, ip
 8000e26:	e78d      	b.n	8000d44 <__udivmoddi4+0x1c4>
 8000e28:	4681      	mov	r9, r0
 8000e2a:	e7b9      	b.n	8000da0 <__udivmoddi4+0x220>
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	e775      	b.n	8000d1c <__udivmoddi4+0x19c>
 8000e30:	4630      	mov	r0, r6
 8000e32:	e74a      	b.n	8000cca <__udivmoddi4+0x14a>
 8000e34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e38:	4439      	add	r1, r7
 8000e3a:	e713      	b.n	8000c64 <__udivmoddi4+0xe4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	443c      	add	r4, r7
 8000e40:	e724      	b.n	8000c8c <__udivmoddi4+0x10c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <Create_Matrix>:
}Matrix;

Matrix A, C, R, Q, x_k0, x_k1, z_k, xp_k, pp_k, p_k0, p_k1, A_T, C_T, y_k, s_k, s_k_inv, K, I, test;

Matrix Create_Matrix(int rows, int cols, double b[9])
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09e      	sub	sp, #120	; 0x78
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
	Matrix a;
	a.rows = rows;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	65bb      	str	r3, [r7, #88]	; 0x58
	a.cols = cols;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 0; i < 3; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	677b      	str	r3, [r7, #116]	; 0x74
 8000e62:	e01d      	b.n	8000ea0 <Create_Matrix+0x58>
	{
		for (int j = 0; j < 3; j++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	673b      	str	r3, [r7, #112]	; 0x70
 8000e68:	e014      	b.n	8000e94 <Create_Matrix+0x4c>
		{
			a.data[i][j] = 0;
 8000e6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e74:	4413      	add	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f1a3 0168 	sub.w	r1, r3, #104	; 0x68
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 8000e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e90:	3301      	adds	r3, #1
 8000e92:	673b      	str	r3, [r7, #112]	; 0x70
 8000e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	dde7      	ble.n	8000e6a <Create_Matrix+0x22>
	for (int i = 0; i < 3; i++)
 8000e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	677b      	str	r3, [r7, #116]	; 0x74
 8000ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	ddde      	ble.n	8000e64 <Create_Matrix+0x1c>
		}
	}

	int n = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; i < rows; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8000eae:	e034      	b.n	8000f1a <Create_Matrix+0xd2>
	{
		for (int j = 0; j < cols; j++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	667b      	str	r3, [r7, #100]	; 0x64
 8000eb4:	e02a      	b.n	8000f0c <Create_Matrix+0xc4>
		{
			a.data[i][j] = 0;
 8000eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000ec8:	4413      	add	r3, r2
 8000eca:	f1a3 0168 	sub.w	r1, r3, #104	; 0x68
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	e9c1 2300 	strd	r2, r3, [r1]
			a.data[i][j] = b[n];
 8000eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ef0:	4413      	add	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b68      	subs	r3, #104	; 0x68
 8000efc:	e9c3 0100 	strd	r0, r1, [r3]
			n++;
 8000f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f02:	3301      	adds	r3, #1
 8000f04:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (int j = 0; j < cols; j++)
 8000f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f08:	3301      	adds	r3, #1
 8000f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8000f0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbd0      	blt.n	8000eb6 <Create_Matrix+0x6e>
	for (int i = 0; i < rows; i++)
 8000f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f16:	3301      	adds	r3, #1
 8000f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbc6      	blt.n	8000eb0 <Create_Matrix+0x68>
		}
	}
	return a;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	2250      	movs	r2, #80	; 0x50
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f003 fa6f 	bl	8004410 <memcpy>
}
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	3778      	adds	r7, #120	; 0x78
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <Multiply>:

Matrix Multiply(Matrix a, Matrix b)
{
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000f48:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 8000f4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000f50:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = b.cols;
 8000f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f56:	657b      	str	r3, [r7, #84]	; 0x54
	for (int i = 0; i < 3; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f5c:	e01d      	b.n	8000f9a <Multiply+0x60>
	{
		for (int j = 0; j < 3; j++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f62:	e014      	b.n	8000f8e <Multiply+0x54>
		{
			c.data[i][j] = 0;
 8000f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000f76:	4413      	add	r3, r2
 8000f78:	f1a3 0168 	sub.w	r1, r3, #104	; 0x68
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 8000f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	dde7      	ble.n	8000f64 <Multiply+0x2a>
	for (int i = 0; i < 3; i++)
 8000f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f96:	3301      	adds	r3, #1
 8000f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	ddde      	ble.n	8000f5e <Multiply+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8000fa4:	e057      	b.n	8001056 <Multiply+0x11c>
	{
		for (int j = 0; j < b.cols; j++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8000faa:	e04c      	b.n	8001046 <Multiply+0x10c>
		{
			for (int k = 0; k < b.rows; k++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fb0:	e041      	b.n	8001036 <Multiply+0xfc>
			{
				c.data[i][j] += a.data[i][k] * b.data[k][j];
 8000fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3b68      	subs	r3, #104	; 0x68
 8000fc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000fde:	4413      	add	r3, r2
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3350      	adds	r3, #80	; 0x50
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff faa7 	bl	8000550 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff f8eb 	bl	80001e4 <__adddf3>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001028:	4413      	add	r3, r2
 800102a:	3b68      	subs	r3, #104	; 0x68
 800102c:	e9c3 0100 	strd	r0, r1, [r3]
			for (int k = 0; k < b.rows; k++)
 8001030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001032:	3301      	adds	r3, #1
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001036:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800103a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800103c:	429a      	cmp	r2, r3
 800103e:	dbb8      	blt.n	8000fb2 <Multiply+0x78>
		for (int j = 0; j < b.cols; j++)
 8001040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001042:	3301      	adds	r3, #1
 8001044:	663b      	str	r3, [r7, #96]	; 0x60
 8001046:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800104a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800104c:	429a      	cmp	r2, r3
 800104e:	dbad      	blt.n	8000fac <Multiply+0x72>
	for (int i = 0; i < a.rows; i++)
 8001050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001052:	3301      	adds	r3, #1
 8001054:	667b      	str	r3, [r7, #100]	; 0x64
 8001056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800105a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800105c:	429a      	cmp	r2, r3
 800105e:	dba2      	blt.n	8000fa6 <Multiply+0x6c>
			}
		}
	}
	return c;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2250      	movs	r2, #80	; 0x50
 800106a:	4619      	mov	r1, r3
 800106c:	f003 f9d0 	bl	8004410 <memcpy>

}
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	3770      	adds	r7, #112	; 0x70
 8001074:	46bd      	mov	sp, r7
 8001076:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800107a:	b002      	add	sp, #8
 800107c:	4770      	bx	lr

0800107e <Sum>:

Matrix Sum(Matrix a, Matrix b)
{
 800107e:	b082      	sub	sp, #8
 8001080:	b580      	push	{r7, lr}
 8001082:	b09a      	sub	sp, #104	; 0x68
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800108c:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001094:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = b.cols;
 8001096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800109a:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	667b      	str	r3, [r7, #100]	; 0x64
 80010a0:	e01d      	b.n	80010de <Sum+0x60>
	{
		for (int j = 0; j < 3; j++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
 80010a6:	e014      	b.n	80010d2 <Sum+0x54>
		{
			c.data[i][j] = 0;
 80010a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80010ba:	4413      	add	r3, r2
 80010bc:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80010cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ce:	3301      	adds	r3, #1
 80010d0:	663b      	str	r3, [r7, #96]	; 0x60
 80010d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	dde7      	ble.n	80010a8 <Sum+0x2a>
	for (int i = 0; i < 3; i++)
 80010d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010da:	3301      	adds	r3, #1
 80010dc:	667b      	str	r3, [r7, #100]	; 0x64
 80010de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	ddde      	ble.n	80010a2 <Sum+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010e8:	e039      	b.n	800115e <Sum+0xe0>
	{
		for (int j = 0; j < a.cols; j++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ee:	e02e      	b.n	800114e <Sum+0xd0>
		{
			c.data[i][j] = a.data[i][j] + b.data[i][j];
 80010f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001102:	4413      	add	r3, r2
 8001104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800111a:	4413      	add	r3, r2
 800111c:	3350      	adds	r3, #80	; 0x50
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f85f 	bl	80001e4 <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001140:	4413      	add	r3, r2
 8001142:	3b60      	subs	r3, #96	; 0x60
 8001144:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 8001148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800114a:	3301      	adds	r3, #1
 800114c:	65bb      	str	r3, [r7, #88]	; 0x58
 800114e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001154:	429a      	cmp	r2, r3
 8001156:	dbcb      	blt.n	80010f0 <Sum+0x72>
	for (int i = 0; i < a.rows; i++)
 8001158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800115a:	3301      	adds	r3, #1
 800115c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800115e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001164:	429a      	cmp	r2, r3
 8001166:	dbc0      	blt.n	80010ea <Sum+0x6c>
		}
	}

	return c;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	2250      	movs	r2, #80	; 0x50
 8001172:	4619      	mov	r1, r3
 8001174:	f003 f94c 	bl	8004410 <memcpy>
}
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	3768      	adds	r7, #104	; 0x68
 800117c:	46bd      	mov	sp, r7
 800117e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001182:	b002      	add	sp, #8
 8001184:	4770      	bx	lr

08001186 <Minus>:

Matrix Minus(Matrix a, Matrix b)
{
 8001186:	b082      	sub	sp, #8
 8001188:	b580      	push	{r7, lr}
 800118a:	b09a      	sub	sp, #104	; 0x68
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001194:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 8001198:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800119c:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = b.cols;
 800119e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011a2:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	667b      	str	r3, [r7, #100]	; 0x64
 80011a8:	e01d      	b.n	80011e6 <Minus+0x60>
	{
		for (int j = 0; j < 3; j++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	663b      	str	r3, [r7, #96]	; 0x60
 80011ae:	e014      	b.n	80011da <Minus+0x54>
		{
			c.data[i][j] = 0;
 80011b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80011c2:	4413      	add	r3, r2
 80011c4:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80011d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d6:	3301      	adds	r3, #1
 80011d8:	663b      	str	r3, [r7, #96]	; 0x60
 80011da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011dc:	2b02      	cmp	r3, #2
 80011de:	dde7      	ble.n	80011b0 <Minus+0x2a>
	for (int i = 0; i < 3; i++)
 80011e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e2:	3301      	adds	r3, #1
 80011e4:	667b      	str	r3, [r7, #100]	; 0x64
 80011e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	ddde      	ble.n	80011aa <Minus+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011f0:	e039      	b.n	8001266 <Minus+0xe0>
	{
		for (int j = 0; j < a.cols; j++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80011f6:	e02e      	b.n	8001256 <Minus+0xd0>
		{
			c.data[i][j] = a.data[i][j] - b.data[i][j];
 80011f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800120a:	4413      	add	r3, r2
 800120c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001222:	4413      	add	r3, r2
 8001224:	3350      	adds	r3, #80	; 0x50
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7fe ffd9 	bl	80001e0 <__aeabi_dsub>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001248:	4413      	add	r3, r2
 800124a:	3b60      	subs	r3, #96	; 0x60
 800124c:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 8001250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001252:	3301      	adds	r3, #1
 8001254:	65bb      	str	r3, [r7, #88]	; 0x58
 8001256:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800125a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800125c:	429a      	cmp	r2, r3
 800125e:	dbcb      	blt.n	80011f8 <Minus+0x72>
	for (int i = 0; i < a.rows; i++)
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001262:	3301      	adds	r3, #1
 8001264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800126a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800126c:	429a      	cmp	r2, r3
 800126e:	dbc0      	blt.n	80011f2 <Minus+0x6c>
		}
	}

	return c;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2250      	movs	r2, #80	; 0x50
 800127a:	4619      	mov	r1, r3
 800127c:	f003 f8c8 	bl	8004410 <memcpy>
}
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	3768      	adds	r7, #104	; 0x68
 8001284:	46bd      	mov	sp, r7
 8001286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800128a:	b002      	add	sp, #8
 800128c:	4770      	bx	lr

0800128e <Transpose>:

Matrix Transpose(Matrix a)
{
 800128e:	b082      	sub	sp, #8
 8001290:	b580      	push	{r7, lr}
 8001292:	b09a      	sub	sp, #104	; 0x68
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800129c:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 80012a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012a4:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = a.cols;
 80012a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012aa:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	667b      	str	r3, [r7, #100]	; 0x64
 80012b0:	e01d      	b.n	80012ee <Transpose+0x60>
	{
		for (int j = 0; j < 3; j++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	663b      	str	r3, [r7, #96]	; 0x60
 80012b6:	e014      	b.n	80012e2 <Transpose+0x54>
		{
			c.data[i][j] = 0;
 80012b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80012ca:	4413      	add	r3, r2
 80012cc:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80012dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012de:	3301      	adds	r3, #1
 80012e0:	663b      	str	r3, [r7, #96]	; 0x60
 80012e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	dde7      	ble.n	80012b8 <Transpose+0x2a>
	for (int i = 0; i < 3; i++)
 80012e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ea:	3301      	adds	r3, #1
 80012ec:	667b      	str	r3, [r7, #100]	; 0x64
 80012ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	ddde      	ble.n	80012b2 <Transpose+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012f8:	e026      	b.n	8001348 <Transpose+0xba>
	{
		for (int j = 0; j < a.cols; j++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80012fe:	e01b      	b.n	8001338 <Transpose+0xaa>
		{
			c.data[i][j] = a.data[j][i];
 8001300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001312:	4413      	add	r3, r2
 8001314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800132a:	4413      	add	r3, r2
 800132c:	3b60      	subs	r3, #96	; 0x60
 800132e:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 8001332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001334:	3301      	adds	r3, #1
 8001336:	65bb      	str	r3, [r7, #88]	; 0x58
 8001338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800133c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800133e:	429a      	cmp	r2, r3
 8001340:	dbde      	blt.n	8001300 <Transpose+0x72>
	for (int i = 0; i < a.rows; i++)
 8001342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001344:	3301      	adds	r3, #1
 8001346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800134c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800134e:	429a      	cmp	r2, r3
 8001350:	dbd3      	blt.n	80012fa <Transpose+0x6c>
		}
	}
	return c;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2250      	movs	r2, #80	; 0x50
 800135c:	4619      	mov	r1, r3
 800135e:	f003 f857 	bl	8004410 <memcpy>
}
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	3768      	adds	r7, #104	; 0x68
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800136c:	b002      	add	sp, #8
 800136e:	4770      	bx	lr

08001370 <Inverse>:

Matrix Inverse(Matrix a)
{
 8001370:	b082      	sub	sp, #8
 8001372:	b580      	push	{r7, lr}
 8001374:	b09a      	sub	sp, #104	; 0x68
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800137e:	e881 000c 	stmia.w	r1, {r2, r3}
	//this function is for only 1x1 matrix
	Matrix c;
	c.rows = a.rows;
 8001382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001386:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = a.cols;
 8001388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800138c:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	667b      	str	r3, [r7, #100]	; 0x64
 8001392:	e01d      	b.n	80013d0 <Inverse+0x60>
	{
		for (int j = 0; j < 3; j++)
 8001394:	2300      	movs	r3, #0
 8001396:	663b      	str	r3, [r7, #96]	; 0x60
 8001398:	e014      	b.n	80013c4 <Inverse+0x54>
		{
			c.data[i][j] = 0;
 800139a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80013ac:	4413      	add	r3, r2
 80013ae:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80013be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013c0:	3301      	adds	r3, #1
 80013c2:	663b      	str	r3, [r7, #96]	; 0x60
 80013c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	dde7      	ble.n	800139a <Inverse+0x2a>
	for (int i = 0; i < 3; i++)
 80013ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013cc:	3301      	adds	r3, #1
 80013ce:	667b      	str	r3, [r7, #100]	; 0x64
 80013d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	ddde      	ble.n	8001394 <Inverse+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013da:	e02f      	b.n	800143c <Inverse+0xcc>
	{
		for (int j = 0; j < a.cols; j++)
 80013dc:	2300      	movs	r3, #0
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
 80013e0:	e024      	b.n	800142c <Inverse+0xbc>
		{
			c.data[i][j] = 1/(a.data[i][j]);
 80013e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f04f 0000 	mov.w	r0, #0
 80013fe:	4919      	ldr	r1, [pc, #100]	; (8001464 <Inverse+0xf4>)
 8001400:	f7ff f9d0 	bl	80007a4 <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800141e:	4413      	add	r3, r2
 8001420:	3b60      	subs	r3, #96	; 0x60
 8001422:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 8001426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001428:	3301      	adds	r3, #1
 800142a:	65bb      	str	r3, [r7, #88]	; 0x58
 800142c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001432:	429a      	cmp	r2, r3
 8001434:	dbd5      	blt.n	80013e2 <Inverse+0x72>
	for (int i = 0; i < a.rows; i++)
 8001436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001438:	3301      	adds	r3, #1
 800143a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800143c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001440:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001442:	429a      	cmp	r2, r3
 8001444:	dbca      	blt.n	80013dc <Inverse+0x6c>
		}
	}
	return c;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2250      	movs	r2, #80	; 0x50
 8001450:	4619      	mov	r1, r3
 8001452:	f002 ffdd 	bl	8004410 <memcpy>
}
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	3768      	adds	r7, #104	; 0x68
 800145a:	46bd      	mov	sp, r7
 800145c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001460:	b002      	add	sp, #8
 8001462:	4770      	bx	lr
 8001464:	3ff00000 	.word	0x3ff00000

08001468 <Store>:

Matrix Store(Matrix a)
{
 8001468:	b082      	sub	sp, #8
 800146a:	b580      	push	{r7, lr}
 800146c:	b09a      	sub	sp, #104	; 0x68
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001476:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 800147a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800147e:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = a.cols;
 8001480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001484:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 8001486:	2300      	movs	r3, #0
 8001488:	667b      	str	r3, [r7, #100]	; 0x64
 800148a:	e01d      	b.n	80014c8 <Store+0x60>
	{
		for (int j = 0; j < 3; j++)
 800148c:	2300      	movs	r3, #0
 800148e:	663b      	str	r3, [r7, #96]	; 0x60
 8001490:	e014      	b.n	80014bc <Store+0x54>
		{
			c.data[i][j] = 0;
 8001492:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80014a4:	4413      	add	r3, r2
 80014a6:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80014b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b8:	3301      	adds	r3, #1
 80014ba:	663b      	str	r3, [r7, #96]	; 0x60
 80014bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014be:	2b02      	cmp	r3, #2
 80014c0:	dde7      	ble.n	8001492 <Store+0x2a>
	for (int i = 0; i < 3; i++)
 80014c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c4:	3301      	adds	r3, #1
 80014c6:	667b      	str	r3, [r7, #100]	; 0x64
 80014c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	ddde      	ble.n	800148c <Store+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014d2:	e026      	b.n	8001522 <Store+0xba>
	{
		for (int j = 0; j < a.cols; j++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80014d8:	e01b      	b.n	8001512 <Store+0xaa>
		{
			c.data[i][j] = (a.data[i][j]);
 80014da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80014ec:	4413      	add	r3, r2
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001504:	4413      	add	r3, r2
 8001506:	3b60      	subs	r3, #96	; 0x60
 8001508:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 800150c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800150e:	3301      	adds	r3, #1
 8001510:	65bb      	str	r3, [r7, #88]	; 0x58
 8001512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001518:	429a      	cmp	r2, r3
 800151a:	dbde      	blt.n	80014da <Store+0x72>
	for (int i = 0; i < a.rows; i++)
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	3301      	adds	r3, #1
 8001520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001526:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001528:	429a      	cmp	r2, r3
 800152a:	dbd3      	blt.n	80014d4 <Store+0x6c>
		}
	}
	return c;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	2250      	movs	r2, #80	; 0x50
 8001536:	4619      	mov	r1, r3
 8001538:	f002 ff6a 	bl	8004410 <memcpy>
}
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	3768      	adds	r7, #104	; 0x68
 8001540:	46bd      	mov	sp, r7
 8001542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001546:	b002      	add	sp, #8
 8001548:	4770      	bx	lr
 800154a:	0000      	movs	r0, r0
 800154c:	0000      	movs	r0, r0
	...

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8001556:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 ffe4 	bl	8002524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 fa20 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 fb56 	bl	8001c10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001564:	f000 fb2a 	bl	8001bbc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001568:	f000 fada 	bl	8001b20 <MX_TIM4_Init>
  MX_TIM1_Init();
 800156c:	f000 fa80 	bl	8001a70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001570:	48c3      	ldr	r0, [pc, #780]	; (8001880 <main+0x330>)
 8001572:	f001 ffbd 	bl	80034f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001576:	213c      	movs	r1, #60	; 0x3c
 8001578:	48c2      	ldr	r0, [pc, #776]	; (8001884 <main+0x334>)
 800157a:	f002 f8c1 	bl	8003700 <HAL_TIM_Encoder_Start>
  double dt = 1/1000.0;
 800157e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001840 <main+0x2f0>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
  double mat_a[9] = { 1, dt, (0.5 * (pow(dt,2))), 0, 1, dt, 0, 0, 1 };
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4bbe      	ldr	r3, [pc, #760]	; (8001888 <main+0x338>)
 800158e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 8001592:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8001596:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 800159a:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8001848 <main+0x2f8>
 800159e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 80015a2:	f002 ff4b 	bl	800443c <pow>
 80015a6:	ec51 0b10 	vmov	r0, r1, d0
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4bb7      	ldr	r3, [pc, #732]	; (800188c <main+0x33c>)
 80015b0:	f7fe ffce 	bl	8000550 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4bae      	ldr	r3, [pc, #696]	; (8001888 <main+0x338>)
 80015ce:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
 80015d2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80015d6:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4ba4      	ldr	r3, [pc, #656]	; (8001888 <main+0x338>)
 80015f8:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  double mat_c[3] = { 1, 0, 0 };
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4ba1      	ldr	r3, [pc, #644]	; (8001888 <main+0x338>)
 8001602:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  double mat_r[1] = { 0.0033145 };
 800161e:	a38c      	add	r3, pc, #560	; (adr r3, 8001850 <main+0x300>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  double eye[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 8001628:	4a99      	ldr	r2, [pc, #612]	; (8001890 <main+0x340>)
 800162a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800162e:	4611      	mov	r1, r2
 8001630:	2248      	movs	r2, #72	; 0x48
 8001632:	4618      	mov	r0, r3
 8001634:	f002 feec 	bl	8004410 <memcpy>
  double zero[9] = { 0 };
 8001638:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800163c:	4618      	mov	r0, r3
 800163e:	2348      	movs	r3, #72	; 0x48
 8001640:	461a      	mov	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	f002 fef2 	bl	800442c <memset>
  double var_jerk = 6.5;
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b91      	ldr	r3, [pc, #580]	; (8001894 <main+0x344>)
 800164e:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
  double var_theta = (pow(((1 / 6.0) * pow(dt,3)), 2))*var_jerk;
 8001652:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8001858 <main+0x308>
 8001656:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800165a:	f002 feef 	bl	800443c <pow>
 800165e:	ec51 0b10 	vmov	r0, r1, d0
 8001662:	a37f      	add	r3, pc, #508	; (adr r3, 8001860 <main+0x310>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ff72 	bl	8000550 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	ec43 2b17 	vmov	d7, r2, r3
 8001674:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001848 <main+0x2f8>
 8001678:	eeb0 0a47 	vmov.f32	s0, s14
 800167c:	eef0 0a67 	vmov.f32	s1, s15
 8001680:	f002 fedc 	bl	800443c <pow>
 8001684:	ec53 2b10 	vmov	r2, r3, d0
 8001688:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800168c:	f7fe ff60 	bl	8000550 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
  double var_omega = (pow(((1 / 2.0) * pow(dt, 2)), 2)) * var_jerk;
 8001698:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8001848 <main+0x2f8>
 800169c:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 80016a0:	f002 fecc 	bl	800443c <pow>
 80016a4:	ec51 0b10 	vmov	r0, r1, d0
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b77      	ldr	r3, [pc, #476]	; (800188c <main+0x33c>)
 80016ae:	f7fe ff4f 	bl	8000550 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b17 	vmov	d7, r2, r3
 80016ba:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001848 <main+0x2f8>
 80016be:	eeb0 0a47 	vmov.f32	s0, s14
 80016c2:	eef0 0a67 	vmov.f32	s1, s15
 80016c6:	f002 feb9 	bl	800443c <pow>
 80016ca:	ec53 2b10 	vmov	r2, r3, d0
 80016ce:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80016d2:	f7fe ff3d 	bl	8000550 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
  double var_alpha = (pow(dt, 2)) * var_jerk;
 80016de:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8001848 <main+0x2f8>
 80016e2:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 80016e6:	f002 fea9 	bl	800443c <pow>
 80016ea:	ec53 2b10 	vmov	r2, r3, d0
 80016ee:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80016f2:	f7fe ff2d 	bl	8000550 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
  double var_theta_omega = ((1 / 12.0) * pow(dt, 5)) * var_jerk;
 80016fe:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8001868 <main+0x318>
 8001702:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001706:	f002 fe99 	bl	800443c <pow>
 800170a:	ec51 0b10 	vmov	r0, r1, d0
 800170e:	a358      	add	r3, pc, #352	; (adr r3, 8001870 <main+0x320>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff1c 	bl	8000550 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8001720:	f7fe ff16 	bl	8000550 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
  double var_theta_alpha = ((1 / 6.0) * pow(dt, 4)) * var_jerk;
 800172c:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001878 <main+0x328>
 8001730:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001734:	f002 fe82 	bl	800443c <pow>
 8001738:	ec51 0b10 	vmov	r0, r1, d0
 800173c:	a348      	add	r3, pc, #288	; (adr r3, 8001860 <main+0x310>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff05 	bl	8000550 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800174e:	f7fe feff 	bl	8000550 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
  double var_omega_alpha = ((1 / 2.0) * pow(dt, 3))* var_jerk;
 800175a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001858 <main+0x308>
 800175e:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001762:	f002 fe6b 	bl	800443c <pow>
 8001766:	ec51 0b10 	vmov	r0, r1, d0
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <main+0x33c>)
 8001770:	f7fe feee 	bl	8000550 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800177c:	f7fe fee8 	bl	8000550 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
  double mat_q[9] = {var_theta, var_theta_omega, var_theta_alpha, var_theta_omega, var_omega, var_omega_alpha, var_theta_alpha, var_omega_alpha, var_alpha };
 8001788:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800178c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8001790:	e9c1 2300 	strd	r2, r3, [r1]
 8001794:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001798:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800179c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80017a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017a4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80017a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80017ac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017b0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80017b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80017b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017bc:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 80017c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80017c4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017c8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80017cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80017d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017d4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80017d8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80017dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017e0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80017e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80017e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017ec:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80017f0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  A = Create_Matrix(3, 3, mat_a);
 80017f4:	4c28      	ldr	r4, [pc, #160]	; (8001898 <main+0x348>)
 80017f6:	4638      	mov	r0, r7
 80017f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80017fc:	2203      	movs	r2, #3
 80017fe:	2103      	movs	r1, #3
 8001800:	f7ff fb22 	bl	8000e48 <Create_Matrix>
 8001804:	463b      	mov	r3, r7
 8001806:	4620      	mov	r0, r4
 8001808:	4619      	mov	r1, r3
 800180a:	2350      	movs	r3, #80	; 0x50
 800180c:	461a      	mov	r2, r3
 800180e:	f002 fdff 	bl	8004410 <memcpy>
  A_T = Transpose(A);
 8001812:	4e22      	ldr	r6, [pc, #136]	; (800189c <main+0x34c>)
 8001814:	463d      	mov	r5, r7
 8001816:	4c20      	ldr	r4, [pc, #128]	; (8001898 <main+0x348>)
 8001818:	4668      	mov	r0, sp
 800181a:	f104 0308 	add.w	r3, r4, #8
 800181e:	2248      	movs	r2, #72	; 0x48
 8001820:	4619      	mov	r1, r3
 8001822:	f002 fdf5 	bl	8004410 <memcpy>
 8001826:	e894 000c 	ldmia.w	r4, {r2, r3}
 800182a:	4628      	mov	r0, r5
 800182c:	f7ff fd2f 	bl	800128e <Transpose>
 8001830:	463b      	mov	r3, r7
 8001832:	4630      	mov	r0, r6
 8001834:	4619      	mov	r1, r3
 8001836:	2350      	movs	r3, #80	; 0x50
 8001838:	461a      	mov	r2, r3
 800183a:	f002 fde9 	bl	8004410 <memcpy>
 800183e:	e02f      	b.n	80018a0 <main+0x350>
 8001840:	d2f1a9fc 	.word	0xd2f1a9fc
 8001844:	3f50624d 	.word	0x3f50624d
 8001848:	00000000 	.word	0x00000000
 800184c:	40000000 	.word	0x40000000
 8001850:	a3486f05 	.word	0xa3486f05
 8001854:	3f6b2702 	.word	0x3f6b2702
 8001858:	00000000 	.word	0x00000000
 800185c:	40080000 	.word	0x40080000
 8001860:	55555555 	.word	0x55555555
 8001864:	3fc55555 	.word	0x3fc55555
 8001868:	00000000 	.word	0x00000000
 800186c:	40140000 	.word	0x40140000
 8001870:	55555555 	.word	0x55555555
 8001874:	3fb55555 	.word	0x3fb55555
 8001878:	00000000 	.word	0x00000000
 800187c:	40100000 	.word	0x40100000
 8001880:	20000128 	.word	0x20000128
 8001884:	20000620 	.word	0x20000620
 8001888:	3ff00000 	.word	0x3ff00000
 800188c:	3fe00000 	.word	0x3fe00000
 8001890:	080053c0 	.word	0x080053c0
 8001894:	401a0000 	.word	0x401a0000
 8001898:	20000210 	.word	0x20000210
 800189c:	200004e0 	.word	0x200004e0
  C = Create_Matrix(1, 3, mat_c);
 80018a0:	4c38      	ldr	r4, [pc, #224]	; (8001984 <main+0x434>)
 80018a2:	4638      	mov	r0, r7
 80018a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018a8:	2203      	movs	r2, #3
 80018aa:	2101      	movs	r1, #1
 80018ac:	f7ff facc 	bl	8000e48 <Create_Matrix>
 80018b0:	463b      	mov	r3, r7
 80018b2:	4620      	mov	r0, r4
 80018b4:	4619      	mov	r1, r3
 80018b6:	2350      	movs	r3, #80	; 0x50
 80018b8:	461a      	mov	r2, r3
 80018ba:	f002 fda9 	bl	8004410 <memcpy>
  C_T = Transpose(C);
 80018be:	4e32      	ldr	r6, [pc, #200]	; (8001988 <main+0x438>)
 80018c0:	463d      	mov	r5, r7
 80018c2:	4c30      	ldr	r4, [pc, #192]	; (8001984 <main+0x434>)
 80018c4:	4668      	mov	r0, sp
 80018c6:	f104 0308 	add.w	r3, r4, #8
 80018ca:	2248      	movs	r2, #72	; 0x48
 80018cc:	4619      	mov	r1, r3
 80018ce:	f002 fd9f 	bl	8004410 <memcpy>
 80018d2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fcd9 	bl	800128e <Transpose>
 80018dc:	463b      	mov	r3, r7
 80018de:	4630      	mov	r0, r6
 80018e0:	4619      	mov	r1, r3
 80018e2:	2350      	movs	r3, #80	; 0x50
 80018e4:	461a      	mov	r2, r3
 80018e6:	f002 fd93 	bl	8004410 <memcpy>
  R = Create_Matrix(1, 1, mat_r);
 80018ea:	4c28      	ldr	r4, [pc, #160]	; (800198c <main+0x43c>)
 80018ec:	4638      	mov	r0, r7
 80018ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	f7ff faa7 	bl	8000e48 <Create_Matrix>
 80018fa:	463b      	mov	r3, r7
 80018fc:	4620      	mov	r0, r4
 80018fe:	4619      	mov	r1, r3
 8001900:	2350      	movs	r3, #80	; 0x50
 8001902:	461a      	mov	r2, r3
 8001904:	f002 fd84 	bl	8004410 <memcpy>
  Q = Create_Matrix(3, 3, mat_q);
 8001908:	4c21      	ldr	r4, [pc, #132]	; (8001990 <main+0x440>)
 800190a:	4638      	mov	r0, r7
 800190c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001910:	2203      	movs	r2, #3
 8001912:	2103      	movs	r1, #3
 8001914:	f7ff fa98 	bl	8000e48 <Create_Matrix>
 8001918:	463b      	mov	r3, r7
 800191a:	4620      	mov	r0, r4
 800191c:	4619      	mov	r1, r3
 800191e:	2350      	movs	r3, #80	; 0x50
 8001920:	461a      	mov	r2, r3
 8001922:	f002 fd75 	bl	8004410 <memcpy>
  I = Create_Matrix(3, 3, eye);
 8001926:	4c1b      	ldr	r4, [pc, #108]	; (8001994 <main+0x444>)
 8001928:	4638      	mov	r0, r7
 800192a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800192e:	2203      	movs	r2, #3
 8001930:	2103      	movs	r1, #3
 8001932:	f7ff fa89 	bl	8000e48 <Create_Matrix>
 8001936:	463b      	mov	r3, r7
 8001938:	4620      	mov	r0, r4
 800193a:	4619      	mov	r1, r3
 800193c:	2350      	movs	r3, #80	; 0x50
 800193e:	461a      	mov	r2, r3
 8001940:	f002 fd66 	bl	8004410 <memcpy>
  x_k1 = Create_Matrix(3, 1, zero);
 8001944:	4c14      	ldr	r4, [pc, #80]	; (8001998 <main+0x448>)
 8001946:	4638      	mov	r0, r7
 8001948:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800194c:	2201      	movs	r2, #1
 800194e:	2103      	movs	r1, #3
 8001950:	f7ff fa7a 	bl	8000e48 <Create_Matrix>
 8001954:	463b      	mov	r3, r7
 8001956:	4620      	mov	r0, r4
 8001958:	4619      	mov	r1, r3
 800195a:	2350      	movs	r3, #80	; 0x50
 800195c:	461a      	mov	r2, r3
 800195e:	f002 fd57 	bl	8004410 <memcpy>
  p_k1 = Create_Matrix(3, 3, zero);
 8001962:	4c0e      	ldr	r4, [pc, #56]	; (800199c <main+0x44c>)
 8001964:	4638      	mov	r0, r7
 8001966:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800196a:	2203      	movs	r2, #3
 800196c:	2103      	movs	r1, #3
 800196e:	f7ff fa6b 	bl	8000e48 <Create_Matrix>
 8001972:	463b      	mov	r3, r7
 8001974:	4620      	mov	r0, r4
 8001976:	4619      	mov	r1, r3
 8001978:	2350      	movs	r3, #80	; 0x50
 800197a:	461a      	mov	r2, r3
 800197c:	f002 fd48 	bl	8004410 <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001980:	e7fe      	b.n	8001980 <main+0x430>
 8001982:	bf00      	nop
 8001984:	20000490 	.word	0x20000490
 8001988:	200005d0 	.word	0x200005d0
 800198c:	200006b8 	.word	0x200006b8
 8001990:	20000300 	.word	0x20000300
 8001994:	20000708 	.word	0x20000708
 8001998:	20000440 	.word	0x20000440
 800199c:	200003a0 	.word	0x200003a0

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fd3c 	bl	800442c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <SystemClock_Config+0xc8>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <SystemClock_Config+0xc8>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <SystemClock_Config+0xc8>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <SystemClock_Config+0xcc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <SystemClock_Config+0xcc>)
 80019ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <SystemClock_Config+0xcc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a04:	2310      	movs	r3, #16
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a10:	2308      	movs	r3, #8
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a14:	2364      	movs	r3, #100	; 0x64
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 f89f 	bl	8002b68 <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a30:	f000 fc22 	bl	8002278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
 8001a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2103      	movs	r1, #3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fb01 	bl	8003058 <HAL_RCC_ClockConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a5c:	f000 fc0c 	bl	8002278 <Error_Handler>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3750      	adds	r7, #80	; 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000

08001a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2224      	movs	r2, #36	; 0x24
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fcd4 	bl	800442c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <MX_TIM1_Init+0xac>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64511;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001aa0:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001ae4:	f001 fd66 	bl	80035b4 <HAL_TIM_Encoder_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001aee:	f000 fbc3 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001b00:	f002 f9c4 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b0a:	f000 fbb5 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3730      	adds	r7, #48	; 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000620 	.word	0x20000620
 8001b1c:	40010000 	.word	0x40010000

08001b20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <MX_TIM4_Init+0x98>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b44:	2263      	movs	r2, #99	; 0x63
 8001b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b64:	f001 fc74 	bl	8003450 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 fb83 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b80:	f001 ff54 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001b8a:	f000 fb75 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b9c:	f002 f976 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001ba6:	f000 fb67 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000128 	.word	0x20000128
 8001bb8:	40000800 	.word	0x40000800

08001bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <MX_USART2_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f002 f9cc 	bl	8003f90 <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f000 fb3b 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000758 	.word	0x20000758
 8001c0c:	40004400 	.word	0x40004400

08001c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_GPIO_Init+0xd0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2120      	movs	r1, #32
 8001c9a:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <MX_GPIO_Init+0xd4>)
 8001c9c:	f000 ff4a 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_GPIO_Init+0xd8>)
 8001cb8:	f000 fdb8 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <MX_GPIO_Init+0xd4>)
 8001cd4:	f000 fdaa 	bl	800282c <HAL_GPIO_Init>

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	00000000 	.word	0x00000000

08001cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
 8001cf6:	af26      	add	r7, sp, #152	; 0x98
 8001cf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cfc:	6018      	str	r0, [r3, #0]
	if (htim == &htim4)
 8001cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4ad6      	ldr	r2, [pc, #856]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	f040 8296 	bne.w	8002238 <HAL_TIM_PeriodElapsedCallback+0x548>
	{
		RadRel = (TIM1->CNT/3072.0)*(2*M_PI);
 8001d0c:	4bd5      	ldr	r3, [pc, #852]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fba3 	bl	800045c <__aeabi_ui2d>
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4bd3      	ldr	r3, [pc, #844]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001d1c:	f7fe fd42 	bl	80007a4 <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	a3c9      	add	r3, pc, #804	; (adr r3, 8002050 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc0f 	bl	8000550 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	49cd      	ldr	r1, [pc, #820]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001d38:	e9c1 2300 	strd	r2, r3, [r1]
		Position[0] = RadRel;
 8001d3c:	4bcb      	ldr	r3, [pc, #812]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	49cb      	ldr	r1, [pc, #812]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001d44:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = (Position[0] - Position[1]) / 0.001;
 8001d48:	4bc9      	ldr	r3, [pc, #804]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4e:	4bc8      	ldr	r3, [pc, #800]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001d50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d54:	f7fe fa44 	bl	80001e0 <__aeabi_dsub>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	a3bd      	add	r3, pc, #756	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fd1d 	bl	80007a4 <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	49c1      	ldr	r1, [pc, #772]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d70:	e9c1 2300 	strd	r2, r3, [r1]
		ti = aa / 1000.0;
 8001d74:	4bc0      	ldr	r3, [pc, #768]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fb7f 	bl	800047c <__aeabi_i2d>
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4bbe      	ldr	r3, [pc, #760]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d84:	f7fe fd0e 	bl	80007a4 <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fe8e 	bl	8000ab0 <__aeabi_d2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4aba      	ldr	r2, [pc, #744]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001d98:	6013      	str	r3, [r2, #0]
		tk = ti;
 8001d9a:	4bb9      	ldr	r3, [pc, #740]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4ab9      	ldr	r2, [pc, #740]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001da0:	6013      	str	r3, [r2, #0]
		sensor[0] = RadRel;
 8001da2:	4bb2      	ldr	r3, [pc, #712]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	49b7      	ldr	r1, [pc, #732]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001daa:	e9c1 2300 	strd	r2, r3, [r1]
		z_k = Create_Matrix(1, 1, sensor);
 8001dae:	4cb7      	ldr	r4, [pc, #732]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001db0:	4638      	mov	r0, r7
 8001db2:	4bb5      	ldr	r3, [pc, #724]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	2101      	movs	r1, #1
 8001db8:	f7ff f846 	bl	8000e48 <Create_Matrix>
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2350      	movs	r3, #80	; 0x50
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f002 fb23 	bl	8004410 <memcpy>
		//Predict//
		xp_k = Multiply(A, x_k1);
 8001dca:	4eb1      	ldr	r6, [pc, #708]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001dcc:	463d      	mov	r5, r7
 8001dce:	4cb1      	ldr	r4, [pc, #708]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001dd0:	4ab1      	ldr	r2, [pc, #708]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001dd2:	ab12      	add	r3, sp, #72	; 0x48
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	2250      	movs	r2, #80	; 0x50
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 fb19 	bl	8004410 <memcpy>
 8001dde:	4668      	mov	r0, sp
 8001de0:	f104 0308 	add.w	r3, r4, #8
 8001de4:	2248      	movs	r2, #72	; 0x48
 8001de6:	4619      	mov	r1, r3
 8001de8:	f002 fb12 	bl	8004410 <memcpy>
 8001dec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001df0:	4628      	mov	r0, r5
 8001df2:	f7ff f8a2 	bl	8000f3a <Multiply>
 8001df6:	463b      	mov	r3, r7
 8001df8:	4630      	mov	r0, r6
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	2350      	movs	r3, #80	; 0x50
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f002 fb06 	bl	8004410 <memcpy>
		pp_k = Sum(Multiply(Multiply(A, p_k1), A_T), Q);
 8001e04:	f107 0558 	add.w	r5, r7, #88	; 0x58
 8001e08:	4ca2      	ldr	r4, [pc, #648]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001e0a:	4aa4      	ldr	r2, [pc, #656]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001e0c:	ab12      	add	r3, sp, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	2250      	movs	r2, #80	; 0x50
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fafc 	bl	8004410 <memcpy>
 8001e18:	4668      	mov	r0, sp
 8001e1a:	f104 0308 	add.w	r3, r4, #8
 8001e1e:	2248      	movs	r2, #72	; 0x48
 8001e20:	4619      	mov	r1, r3
 8001e22:	f002 faf5 	bl	8004410 <memcpy>
 8001e26:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f7ff f885 	bl	8000f3a <Multiply>
 8001e30:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8001e34:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001e38:	4a99      	ldr	r2, [pc, #612]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001e3a:	ab12      	add	r3, sp, #72	; 0x48
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	2250      	movs	r2, #80	; 0x50
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 fae5 	bl	8004410 <memcpy>
 8001e46:	4668      	mov	r0, sp
 8001e48:	f104 0308 	add.w	r3, r4, #8
 8001e4c:	2248      	movs	r2, #72	; 0x48
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f002 fade 	bl	8004410 <memcpy>
 8001e54:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff f86e 	bl	8000f3a <Multiply>
 8001e5e:	4e91      	ldr	r6, [pc, #580]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001e60:	463d      	mov	r5, r7
 8001e62:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001e66:	4a90      	ldr	r2, [pc, #576]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001e68:	ab12      	add	r3, sp, #72	; 0x48
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	2250      	movs	r2, #80	; 0x50
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 face 	bl	8004410 <memcpy>
 8001e74:	4668      	mov	r0, sp
 8001e76:	f104 0308 	add.w	r3, r4, #8
 8001e7a:	2248      	movs	r2, #72	; 0x48
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f002 fac7 	bl	8004410 <memcpy>
 8001e82:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001e86:	4628      	mov	r0, r5
 8001e88:	f7ff f8f9 	bl	800107e <Sum>
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4630      	mov	r0, r6
 8001e90:	4619      	mov	r1, r3
 8001e92:	2350      	movs	r3, #80	; 0x50
 8001e94:	461a      	mov	r2, r3
 8001e96:	f002 fabb 	bl	8004410 <memcpy>
		//Update//
		y_k = Minus(z_k, Multiply(C, xp_k));
 8001e9a:	f107 05f8 	add.w	r5, r7, #248	; 0xf8
 8001e9e:	4c83      	ldr	r4, [pc, #524]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001ea0:	4a7b      	ldr	r2, [pc, #492]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001ea2:	ab12      	add	r3, sp, #72	; 0x48
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	2250      	movs	r2, #80	; 0x50
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fab1 	bl	8004410 <memcpy>
 8001eae:	4668      	mov	r0, sp
 8001eb0:	f104 0308 	add.w	r3, r4, #8
 8001eb4:	2248      	movs	r2, #72	; 0x48
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f002 faaa 	bl	8004410 <memcpy>
 8001ebc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	f7ff f83a 	bl	8000f3a <Multiply>
 8001ec6:	4e7a      	ldr	r6, [pc, #488]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001ec8:	463d      	mov	r5, r7
 8001eca:	4c70      	ldr	r4, [pc, #448]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001ecc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001ed0:	ab12      	add	r3, sp, #72	; 0x48
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	2250      	movs	r2, #80	; 0x50
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fa9a 	bl	8004410 <memcpy>
 8001edc:	4668      	mov	r0, sp
 8001ede:	f104 0308 	add.w	r3, r4, #8
 8001ee2:	2248      	movs	r2, #72	; 0x48
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f002 fa93 	bl	8004410 <memcpy>
 8001eea:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001eee:	4628      	mov	r0, r5
 8001ef0:	f7ff f949 	bl	8001186 <Minus>
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	4619      	mov	r1, r3
 8001efa:	2350      	movs	r3, #80	; 0x50
 8001efc:	461a      	mov	r2, r3
 8001efe:	f002 fa87 	bl	8004410 <memcpy>
		s_k = Sum(Multiply(Multiply(C, pp_k), C_T), R);
 8001f02:	f507 75a4 	add.w	r5, r7, #328	; 0x148
 8001f06:	4c69      	ldr	r4, [pc, #420]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001f08:	4a66      	ldr	r2, [pc, #408]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f0a:	ab12      	add	r3, sp, #72	; 0x48
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	2250      	movs	r2, #80	; 0x50
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fa7d 	bl	8004410 <memcpy>
 8001f16:	4668      	mov	r0, sp
 8001f18:	f104 0308 	add.w	r3, r4, #8
 8001f1c:	2248      	movs	r2, #72	; 0x48
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f002 fa76 	bl	8004410 <memcpy>
 8001f24:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f7ff f806 	bl	8000f3a <Multiply>
 8001f2e:	f507 75cc 	add.w	r5, r7, #408	; 0x198
 8001f32:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 8001f36:	4a5f      	ldr	r2, [pc, #380]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001f38:	ab12      	add	r3, sp, #72	; 0x48
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	2250      	movs	r2, #80	; 0x50
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fa66 	bl	8004410 <memcpy>
 8001f44:	4668      	mov	r0, sp
 8001f46:	f104 0308 	add.w	r3, r4, #8
 8001f4a:	2248      	movs	r2, #72	; 0x48
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f002 fa5f 	bl	8004410 <memcpy>
 8001f52:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001f56:	4628      	mov	r0, r5
 8001f58:	f7fe ffef 	bl	8000f3a <Multiply>
 8001f5c:	4e56      	ldr	r6, [pc, #344]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001f5e:	463d      	mov	r5, r7
 8001f60:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8001f64:	4a55      	ldr	r2, [pc, #340]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001f66:	ab12      	add	r3, sp, #72	; 0x48
 8001f68:	4611      	mov	r1, r2
 8001f6a:	2250      	movs	r2, #80	; 0x50
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 fa4f 	bl	8004410 <memcpy>
 8001f72:	4668      	mov	r0, sp
 8001f74:	f104 0308 	add.w	r3, r4, #8
 8001f78:	2248      	movs	r2, #72	; 0x48
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f002 fa48 	bl	8004410 <memcpy>
 8001f80:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001f84:	4628      	mov	r0, r5
 8001f86:	f7ff f87a 	bl	800107e <Sum>
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2350      	movs	r3, #80	; 0x50
 8001f92:	461a      	mov	r2, r3
 8001f94:	f002 fa3c 	bl	8004410 <memcpy>
		s_k_inv = Inverse(s_k);
 8001f98:	4e49      	ldr	r6, [pc, #292]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001f9a:	463d      	mov	r5, r7
 8001f9c:	4c46      	ldr	r4, [pc, #280]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001f9e:	4668      	mov	r0, sp
 8001fa0:	f104 0308 	add.w	r3, r4, #8
 8001fa4:	2248      	movs	r2, #72	; 0x48
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f002 fa32 	bl	8004410 <memcpy>
 8001fac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f7ff f9dd 	bl	8001370 <Inverse>
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4630      	mov	r0, r6
 8001fba:	4619      	mov	r1, r3
 8001fbc:	2350      	movs	r3, #80	; 0x50
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f002 fa26 	bl	8004410 <memcpy>
		K = Multiply(Multiply(pp_k, C_T), s_k_inv);
 8001fc4:	f507 75f4 	add.w	r5, r7, #488	; 0x1e8
 8001fc8:	4c36      	ldr	r4, [pc, #216]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001fcc:	ab12      	add	r3, sp, #72	; 0x48
 8001fce:	4611      	mov	r1, r2
 8001fd0:	2250      	movs	r2, #80	; 0x50
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fa1c 	bl	8004410 <memcpy>
 8001fd8:	4668      	mov	r0, sp
 8001fda:	f104 0308 	add.w	r3, r4, #8
 8001fde:	2248      	movs	r2, #72	; 0x48
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f002 fa15 	bl	8004410 <memcpy>
 8001fe6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001fea:	4628      	mov	r0, r5
 8001fec:	f7fe ffa5 	bl	8000f3a <Multiply>
 8001ff0:	4e34      	ldr	r6, [pc, #208]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001ff2:	463d      	mov	r5, r7
 8001ff4:	f507 74f4 	add.w	r4, r7, #488	; 0x1e8
 8001ff8:	4a31      	ldr	r2, [pc, #196]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001ffa:	ab12      	add	r3, sp, #72	; 0x48
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	2250      	movs	r2, #80	; 0x50
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fa05 	bl	8004410 <memcpy>
 8002006:	4668      	mov	r0, sp
 8002008:	f104 0308 	add.w	r3, r4, #8
 800200c:	2248      	movs	r2, #72	; 0x48
 800200e:	4619      	mov	r1, r3
 8002010:	f002 f9fe 	bl	8004410 <memcpy>
 8002014:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002018:	4628      	mov	r0, r5
 800201a:	f7fe ff8e 	bl	8000f3a <Multiply>
 800201e:	463b      	mov	r3, r7
 8002020:	4630      	mov	r0, r6
 8002022:	4619      	mov	r1, r3
 8002024:	2350      	movs	r3, #80	; 0x50
 8002026:	461a      	mov	r2, r3
 8002028:	f002 f9f2 	bl	8004410 <memcpy>
		x_k0 = Sum(xp_k, Multiply(K, y_k));
 800202c:	f507 750e 	add.w	r5, r7, #568	; 0x238
 8002030:	4c24      	ldr	r4, [pc, #144]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002034:	ab12      	add	r3, sp, #72	; 0x48
 8002036:	4611      	mov	r1, r2
 8002038:	2250      	movs	r2, #80	; 0x50
 800203a:	4618      	mov	r0, r3
 800203c:	f002 f9e8 	bl	8004410 <memcpy>
 8002040:	4668      	mov	r0, sp
 8002042:	f104 0308 	add.w	r3, r4, #8
 8002046:	2248      	movs	r2, #72	; 0x48
 8002048:	4619      	mov	r1, r3
 800204a:	e03d      	b.n	80020c8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 800204c:	f3af 8000 	nop.w
 8002050:	54442d18 	.word	0x54442d18
 8002054:	401921fb 	.word	0x401921fb
 8002058:	d2f1a9fc 	.word	0xd2f1a9fc
 800205c:	3f50624d 	.word	0x3f50624d
 8002060:	20000128 	.word	0x20000128
 8002064:	40010000 	.word	0x40010000
 8002068:	40a80000 	.word	0x40a80000
 800206c:	200000a8 	.word	0x200000a8
 8002070:	200000b0 	.word	0x200000b0
 8002074:	200000a0 	.word	0x200000a0
 8002078:	200000d0 	.word	0x200000d0
 800207c:	408f4000 	.word	0x408f4000
 8002080:	200000c4 	.word	0x200000c4
 8002084:	200000c0 	.word	0x200000c0
 8002088:	20000098 	.word	0x20000098
 800208c:	20000260 	.word	0x20000260
 8002090:	20000170 	.word	0x20000170
 8002094:	20000210 	.word	0x20000210
 8002098:	20000440 	.word	0x20000440
 800209c:	200003a0 	.word	0x200003a0
 80020a0:	200004e0 	.word	0x200004e0
 80020a4:	20000580 	.word	0x20000580
 80020a8:	20000300 	.word	0x20000300
 80020ac:	20000490 	.word	0x20000490
 80020b0:	200003f0 	.word	0x200003f0
 80020b4:	200005d0 	.word	0x200005d0
 80020b8:	20000668 	.word	0x20000668
 80020bc:	200006b8 	.word	0x200006b8
 80020c0:	200001c0 	.word	0x200001c0
 80020c4:	200002b0 	.word	0x200002b0
 80020c8:	f002 f9a2 	bl	8004410 <memcpy>
 80020cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80020d0:	4628      	mov	r0, r5
 80020d2:	f7fe ff32 	bl	8000f3a <Multiply>
 80020d6:	4e5b      	ldr	r6, [pc, #364]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80020d8:	463d      	mov	r5, r7
 80020da:	4c5b      	ldr	r4, [pc, #364]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80020dc:	a812      	add	r0, sp, #72	; 0x48
 80020de:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80020e2:	2250      	movs	r2, #80	; 0x50
 80020e4:	4619      	mov	r1, r3
 80020e6:	f002 f993 	bl	8004410 <memcpy>
 80020ea:	4668      	mov	r0, sp
 80020ec:	f104 0308 	add.w	r3, r4, #8
 80020f0:	2248      	movs	r2, #72	; 0x48
 80020f2:	4619      	mov	r1, r3
 80020f4:	f002 f98c 	bl	8004410 <memcpy>
 80020f8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80020fc:	4628      	mov	r0, r5
 80020fe:	f7fe ffbe 	bl	800107e <Sum>
 8002102:	463b      	mov	r3, r7
 8002104:	4630      	mov	r0, r6
 8002106:	4619      	mov	r1, r3
 8002108:	2350      	movs	r3, #80	; 0x50
 800210a:	461a      	mov	r2, r3
 800210c:	f002 f980 	bl	8004410 <memcpy>
		p_k0 = Multiply(Minus(I, Multiply(K, C)), pp_k);
 8002110:	f507 7522 	add.w	r5, r7, #648	; 0x288
 8002114:	4c4d      	ldr	r4, [pc, #308]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002116:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002118:	ab12      	add	r3, sp, #72	; 0x48
 800211a:	4611      	mov	r1, r2
 800211c:	2250      	movs	r2, #80	; 0x50
 800211e:	4618      	mov	r0, r3
 8002120:	f002 f976 	bl	8004410 <memcpy>
 8002124:	4668      	mov	r0, sp
 8002126:	f104 0308 	add.w	r3, r4, #8
 800212a:	2248      	movs	r2, #72	; 0x48
 800212c:	4619      	mov	r1, r3
 800212e:	f002 f96f 	bl	8004410 <memcpy>
 8002132:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002136:	4628      	mov	r0, r5
 8002138:	f7fe feff 	bl	8000f3a <Multiply>
 800213c:	f507 7536 	add.w	r5, r7, #728	; 0x2d8
 8002140:	4c44      	ldr	r4, [pc, #272]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002142:	a812      	add	r0, sp, #72	; 0x48
 8002144:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002148:	2250      	movs	r2, #80	; 0x50
 800214a:	4619      	mov	r1, r3
 800214c:	f002 f960 	bl	8004410 <memcpy>
 8002150:	4668      	mov	r0, sp
 8002152:	f104 0308 	add.w	r3, r4, #8
 8002156:	2248      	movs	r2, #72	; 0x48
 8002158:	4619      	mov	r1, r3
 800215a:	f002 f959 	bl	8004410 <memcpy>
 800215e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002162:	4628      	mov	r0, r5
 8002164:	f7ff f80f 	bl	8001186 <Minus>
 8002168:	4d3b      	ldr	r5, [pc, #236]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800216a:	463c      	mov	r4, r7
 800216c:	4a3b      	ldr	r2, [pc, #236]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800216e:	ab12      	add	r3, sp, #72	; 0x48
 8002170:	4611      	mov	r1, r2
 8002172:	2250      	movs	r2, #80	; 0x50
 8002174:	4618      	mov	r0, r3
 8002176:	f002 f94b 	bl	8004410 <memcpy>
 800217a:	4668      	mov	r0, sp
 800217c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002180:	2248      	movs	r2, #72	; 0x48
 8002182:	4619      	mov	r1, r3
 8002184:	f002 f944 	bl	8004410 <memcpy>
 8002188:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800218c:	cb0c      	ldmia	r3, {r2, r3}
 800218e:	4620      	mov	r0, r4
 8002190:	f7fe fed3 	bl	8000f3a <Multiply>
 8002194:	463b      	mov	r3, r7
 8002196:	4628      	mov	r0, r5
 8002198:	4619      	mov	r1, r3
 800219a:	2350      	movs	r3, #80	; 0x50
 800219c:	461a      	mov	r2, r3
 800219e:	f002 f937 	bl	8004410 <memcpy>

		//Memory [N-1] data
		x_k1 = Store(x_k0);
 80021a2:	4e2f      	ldr	r6, [pc, #188]	; (8002260 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80021a4:	463d      	mov	r5, r7
 80021a6:	4c27      	ldr	r4, [pc, #156]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80021a8:	4668      	mov	r0, sp
 80021aa:	f104 0308 	add.w	r3, r4, #8
 80021ae:	2248      	movs	r2, #72	; 0x48
 80021b0:	4619      	mov	r1, r3
 80021b2:	f002 f92d 	bl	8004410 <memcpy>
 80021b6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7ff f954 	bl	8001468 <Store>
 80021c0:	463b      	mov	r3, r7
 80021c2:	4630      	mov	r0, r6
 80021c4:	4619      	mov	r1, r3
 80021c6:	2350      	movs	r3, #80	; 0x50
 80021c8:	461a      	mov	r2, r3
 80021ca:	f002 f921 	bl	8004410 <memcpy>
		p_k1 = Store(p_k0);
 80021ce:	4e25      	ldr	r6, [pc, #148]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80021d0:	463d      	mov	r5, r7
 80021d2:	4c21      	ldr	r4, [pc, #132]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80021d4:	4668      	mov	r0, sp
 80021d6:	f104 0308 	add.w	r3, r4, #8
 80021da:	2248      	movs	r2, #72	; 0x48
 80021dc:	4619      	mov	r1, r3
 80021de:	f002 f917 	bl	8004410 <memcpy>
 80021e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80021e6:	4628      	mov	r0, r5
 80021e8:	f7ff f93e 	bl	8001468 <Store>
 80021ec:	463b      	mov	r3, r7
 80021ee:	4630      	mov	r0, r6
 80021f0:	4619      	mov	r1, r3
 80021f2:	2350      	movs	r3, #80	; 0x50
 80021f4:	461a      	mov	r2, r3
 80021f6:	f002 f90b 	bl	8004410 <memcpy>
		output_theta = x_k0.data[0][0];
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fc54 	bl	8000ab0 <__aeabi_d2f>
 8002208:	4603      	mov	r3, r0
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800220c:	6013      	str	r3, [r2, #0]
		zoutput_omega = x_k0.data[1][0];
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002210:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fc4a 	bl	8000ab0 <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002220:	6013      	str	r3, [r2, #0]

		//time
		aa++;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800222a:	6013      	str	r3, [r2, #0]

		//store position
		Position[1] = Position[0] ;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	4910      	ldr	r1, [pc, #64]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002234:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
}
 8002238:	bf00      	nop
 800223a:	f507 774b 	add.w	r7, r7, #812	; 0x32c
 800223e:	46bd      	mov	sp, r7
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002242:	bf00      	nop
 8002244:	200000d8 	.word	0x200000d8
 8002248:	20000170 	.word	0x20000170
 800224c:	200002b0 	.word	0x200002b0
 8002250:	20000490 	.word	0x20000490
 8002254:	20000708 	.word	0x20000708
 8002258:	20000350 	.word	0x20000350
 800225c:	20000580 	.word	0x20000580
 8002260:	20000440 	.word	0x20000440
 8002264:	200003a0 	.word	0x200003a0
 8002268:	200000c8 	.word	0x200000c8
 800226c:	200000cc 	.word	0x200000cc
 8002270:	200000d0 	.word	0x200000d0
 8002274:	200000b0 	.word	0x200000b0

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	e7fe      	b.n	8002280 <Error_Handler+0x8>
	...

08002284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_MspInit+0x4c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <HAL_MspInit+0x4c>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_MspInit+0x4c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_MspInit+0x4c>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_MspInit+0x4c>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_MspInit+0x4c>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022c2:	2007      	movs	r0, #7
 80022c4:	f000 fa70 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_TIM_Encoder_MspInit+0x84>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d12c      	bne.n	8002350 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_TIM_Encoder_MspInit+0x88>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_TIM_Encoder_MspInit+0x88>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_TIM_Encoder_MspInit+0x88>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_TIM_Encoder_MspInit+0x88>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_TIM_Encoder_MspInit+0x88>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_TIM_Encoder_MspInit+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800232e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002340:	2301      	movs	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <HAL_TIM_Encoder_MspInit+0x8c>)
 800234c:	f000 fa6e 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40010000 	.word	0x40010000
 800235c:	40023800 	.word	0x40023800
 8002360:	40020000 	.word	0x40020000

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_TIM_Base_MspInit+0x48>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d115      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_TIM_Base_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	201e      	movs	r0, #30
 8002398:	f000 fa11 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800239c:	201e      	movs	r0, #30
 800239e:	f000 fa2a 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_UART_MspInit+0x84>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d12b      	bne.n	800242e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_UART_MspInit+0x88>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_UART_MspInit+0x88>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_UART_MspInit+0x88>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_UART_MspInit+0x88>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_UART_MspInit+0x88>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_UART_MspInit+0x88>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800240e:	230c      	movs	r3, #12
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800241e:	2307      	movs	r3, #7
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_UART_MspInit+0x8c>)
 800242a:	f000 f9ff 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40004400 	.word	0x40004400
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002490:	f000 f89a 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <TIM4_IRQHandler+0x10>)
 800249e:	f001 f9bd 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000128 	.word	0x20000128

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <SystemInit+0x20>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <SystemInit+0x20>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002508 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024d6:	490e      	ldr	r1, [pc, #56]	; (8002510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024ec:	4c0b      	ldr	r4, [pc, #44]	; (800251c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024fa:	f7ff ffd7 	bl	80024ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024fe:	f001 ff63 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002502:	f7ff f825 	bl	8001550 <main>
  bx  lr    
 8002506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002514:	08005478 	.word	0x08005478
  ldr r2, =_sbss
 8002518:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800251c:	200007a0 	.word	0x200007a0

08002520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC_IRQHandler>
	...

08002524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <HAL_Init+0x40>)
 800252e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_Init+0x40>)
 800253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_Init+0x40>)
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254c:	2003      	movs	r0, #3
 800254e:	f000 f92b 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002552:	2000      	movs	r0, #0
 8002554:	f000 f808 	bl	8002568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002558:	f7ff fe94 	bl	8002284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x54>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x58>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f943 	bl	8002812 <HAL_SYSTICK_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00e      	b.n	80025b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d80a      	bhi.n	80025b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f000 f90b 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <HAL_InitTick+0x5c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000008 	.word	0x20000008
 80025ec:	2000079c 	.word	0x2000079c

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	2000079c 	.word	0x2000079c

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e159      	b.n	8002afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8148 	bne.w	8002af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a2 	beq.w	8002af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a49      	ldr	r2, [pc, #292]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x202>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_GPIO_Init+0x2f4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x1fe>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a47      	ldr	r2, [pc, #284]	; (8002b24 <HAL_GPIO_Init+0x2f8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <HAL_GPIO_Init+0x2fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x1f6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x1f2>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a40:	4935      	ldr	r1, [pc, #212]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a72:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9c:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	f67f aea2 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b50:	e003      	b.n	8002b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e264      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	4ba3      	ldr	r3, [pc, #652]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00c      	beq.n	8002bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4ba0      	ldr	r3, [pc, #640]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d112      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b9d      	ldr	r3, [pc, #628]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b99      	ldr	r3, [pc, #612]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e23f      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x74>
 8002bce:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x98>
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a8a      	ldr	r2, [pc, #552]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b88      	ldr	r3, [pc, #544]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a87      	ldr	r2, [pc, #540]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xb0>
 8002c00:	4b84      	ldr	r3, [pc, #528]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a83      	ldr	r2, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a80      	ldr	r2, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fce6 	bl	80025f0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff fce2 	bl	80025f0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e204      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff fcd2 	bl	80025f0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff fcce 	bl	80025f0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1f0      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b62      	ldr	r3, [pc, #392]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1c4      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4952      	ldr	r1, [pc, #328]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e03a      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7ff fc87 	bl	80025f0 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fc83 	bl	80025f0 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1a5      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4940      	ldr	r1, [pc, #256]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fc66 	bl	80025f0 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff fc62 	bl	80025f0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e184      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d030      	beq.n	8002db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7ff fc46 	bl	80025f0 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7ff fc42 	bl	80025f0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e164      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x200>
 8002d86:	e015      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fc2f 	bl	80025f0 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	f7ff fc2b 	bl	80025f0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e14d      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a0 	beq.w	8002f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d121      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7ff fbf1 	bl	80025f0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e011      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ce>
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470000 	.word	0x42470000
 8002e1c:	42470e80 	.word	0x42470e80
 8002e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7ff fbe4 	bl	80025f0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e106      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <HAL_RCC_OscConfig+0x4e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2f0>
 8002e4a:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a80      	ldr	r2, [pc, #512]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	e01c      	b.n	8002e92 <HAL_RCC_OscConfig+0x32a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x312>
 8002e60:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a7a      	ldr	r2, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x32a>
 8002e7a:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a74      	ldr	r2, [pc, #464]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b72      	ldr	r3, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a71      	ldr	r2, [pc, #452]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d015      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7ff fba9 	bl	80025f0 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7ff fba5 	bl	80025f0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0c5      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x33a>
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff fb93 	bl	80025f0 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7ff fb8f 	bl	80025f0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0af      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ee      	bne.n	8002ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b56      	ldr	r3, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 809b 	beq.w	8003042 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d05c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d141      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7ff fb63 	bl	80025f0 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7ff fb5f 	bl	80025f0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e081      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff fb38 	bl	80025f0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff fb34 	bl	80025f0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e056      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x41c>
 8002fa2:	e04e      	b.n	8003042 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x4ec>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7ff fb21 	bl	80025f0 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb2:	f7ff fb1d 	bl	80025f0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e03f      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc4:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x44a>
 8002fd0:	e037      	b.n	8003042 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e032      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d028      	beq.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d11a      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003014:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003016:	4293      	cmp	r3, r2
 8003018:	d111      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d107      	bne.n	800303e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40007000 	.word	0x40007000
 8003050:	40023800 	.word	0x40023800
 8003054:	42470060 	.word	0x42470060

08003058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0cc      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90c      	bls.n	8003094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b63      	ldr	r3, [pc, #396]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0b8      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	494d      	ldr	r1, [pc, #308]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d044      	beq.n	8003178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d119      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e07f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d003      	beq.n	8003116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e067      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4934      	ldr	r1, [pc, #208]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003148:	f7ff fa52 	bl	80025f0 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	e00a      	b.n	8003166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003150:	f7ff fa4e 	bl	80025f0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e04f      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 020c 	and.w	r2, r3, #12
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	429a      	cmp	r2, r3
 8003176:	d1eb      	bne.n	8003150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d20c      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e032      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4916      	ldr	r1, [pc, #88]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	490e      	ldr	r1, [pc, #56]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031de:	f000 f821 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	490a      	ldr	r1, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	5ccb      	ldrb	r3, [r1, r3]
 80031f2:	fa22 f303 	lsr.w	r3, r2, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f9b2 	bl	8002568 <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	08005408 	.word	0x08005408
 800321c:	20000000 	.word	0x20000000
 8003220:	20000004 	.word	0x20000004

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	2300      	movs	r3, #0
 8003236:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323c:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d00d      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 8003248:	2b08      	cmp	r3, #8
 800324a:	f200 80bd 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x34>
 8003252:	2b04      	cmp	r3, #4
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x3a>
 8003256:	e0b7      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800325a:	60bb      	str	r3, [r7, #8]
       break;
 800325c:	e0b7      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325e:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003260:	60bb      	str	r3, [r7, #8]
      break;
 8003262:	e0b4      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003264:	4b5d      	ldr	r3, [pc, #372]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326e:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04d      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	461a      	mov	r2, r3
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	ea02 0800 	and.w	r8, r2, r0
 8003292:	ea03 0901 	and.w	r9, r3, r1
 8003296:	4640      	mov	r0, r8
 8003298:	4649      	mov	r1, r9
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	014b      	lsls	r3, r1, #5
 80032a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032a8:	0142      	lsls	r2, r0, #5
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	ebb0 0008 	subs.w	r0, r0, r8
 80032b2:	eb61 0109 	sbc.w	r1, r1, r9
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c4:	0182      	lsls	r2, r0, #6
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	eb63 0301 	sbc.w	r3, r3, r1
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	00d9      	lsls	r1, r3, #3
 80032d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032da:	00d0      	lsls	r0, r2, #3
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	eb12 0208 	adds.w	r2, r2, r8
 80032e4:	eb43 0309 	adc.w	r3, r3, r9
 80032e8:	f04f 0000 	mov.w	r0, #0
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	0259      	lsls	r1, r3, #9
 80032f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032f6:	0250      	lsls	r0, r2, #9
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	461a      	mov	r2, r3
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f7fd fc22 	bl	8000b50 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e04a      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	461a      	mov	r2, r3
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	ea02 0400 	and.w	r4, r2, r0
 800332e:	ea03 0501 	and.w	r5, r3, r1
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	014b      	lsls	r3, r1, #5
 8003340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003344:	0142      	lsls	r2, r0, #5
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	1b00      	subs	r0, r0, r4
 800334c:	eb61 0105 	sbc.w	r1, r1, r5
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	018b      	lsls	r3, r1, #6
 800335a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800335e:	0182      	lsls	r2, r0, #6
 8003360:	1a12      	subs	r2, r2, r0
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	00d9      	lsls	r1, r3, #3
 8003370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003374:	00d0      	lsls	r0, r2, #3
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	1912      	adds	r2, r2, r4
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	f04f 0000 	mov.w	r0, #0
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	0299      	lsls	r1, r3, #10
 800338a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800338e:	0290      	lsls	r0, r2, #10
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	461a      	mov	r2, r3
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f7fd fbd6 	bl	8000b50 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	60bb      	str	r3, [r7, #8]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ca:	60bb      	str	r3, [r7, #8]
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	68bb      	ldr	r3, [r7, #8]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08005418 	.word	0x08005418

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	; (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	08005418 	.word	0x08005418

08003450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e041      	b.n	80034e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe ff74 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 fbbc 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e044      	b.n	8003592 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d018      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x6c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d013      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x6c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00e      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x6c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x6c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_TIM_Base_Start_IT+0xbc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x6c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d111      	bne.n	8003580 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b06      	cmp	r3, #6
 800356c:	d010      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357e:	e007      	b.n	8003590 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	40014000 	.word	0x40014000

080035b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e097      	b.n	80036f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7fe fe79 	bl	80022d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f8:	f023 0307 	bic.w	r3, r3, #7
 80035fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f000 faff 	bl	8003c0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	4313      	orrs	r3, r2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003654:	f023 030c 	bic.w	r3, r3, #12
 8003658:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4313      	orrs	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	011a      	lsls	r2, r3, #4
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	031b      	lsls	r3, r3, #12
 8003684:	4313      	orrs	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	4313      	orrs	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003710:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003718:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003720:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003728:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d110      	bne.n	8003752 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003736:	7b7b      	ldrb	r3, [r7, #13]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e069      	b.n	8003814 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	e031      	b.n	80037b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d110      	bne.n	800377a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800375e:	7b3b      	ldrb	r3, [r7, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d001      	beq.n	8003768 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e055      	b.n	8003814 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	e01d      	b.n	80037b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d108      	bne.n	8003792 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003780:	7bbb      	ldrb	r3, [r7, #14]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003786:	7b7b      	ldrb	r3, [r7, #13]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800378c:	7b3b      	ldrb	r3, [r7, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e03e      	b.n	8003814 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_TIM_Encoder_Start+0xc4>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d008      	beq.n	80037d4 <HAL_TIM_Encoder_Start+0xd4>
 80037c2:	e00f      	b.n	80037e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb37 	bl	8003e40 <TIM_CCxChannelCmd>
      break;
 80037d2:	e016      	b.n	8003802 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	2104      	movs	r1, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fb2f 	bl	8003e40 <TIM_CCxChannelCmd>
      break;
 80037e2:	e00e      	b.n	8003802 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fb27 	bl	8003e40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	2104      	movs	r1, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fb20 	bl	8003e40 <TIM_CCxChannelCmd>
      break;
 8003800:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0202 	mvn.w	r2, #2
 8003848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f9b5 	bl	8003bce <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9a7 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f9b8 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0204 	mvn.w	r2, #4
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f98b 	bl	8003bce <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f97d 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f98e 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d122      	bne.n	8003920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d11b      	bne.n	8003920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0208 	mvn.w	r2, #8
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f961 	bl	8003bce <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f953 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f964 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b10      	cmp	r3, #16
 800392c:	d122      	bne.n	8003974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d11b      	bne.n	8003974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2208      	movs	r2, #8
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f937 	bl	8003bce <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f929 	bl	8003bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f93a 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe f9a8 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fad8 	bl	8003f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8ff 	bl	8003bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0220 	mvn.w	r2, #32
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 faa2 	bl	8003f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_ConfigClockSource+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0b4      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x186>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d03e      	beq.n	8003b00 <HAL_TIM_ConfigClockSource+0xd4>
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	f200 8087 	bhi.w	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8e:	f000 8086 	beq.w	8003b9e <HAL_TIM_ConfigClockSource+0x172>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	d87f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b70      	cmp	r3, #112	; 0x70
 8003a9a:	d01a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d87b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b60      	cmp	r3, #96	; 0x60
 8003aa2:	d050      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x11a>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d877      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b50      	cmp	r3, #80	; 0x50
 8003aaa:	d03c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0xfa>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d873      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d058      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x13a>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d86f      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b30      	cmp	r3, #48	; 0x30
 8003aba:	d064      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d86b      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d060      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d867      	bhi.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05c      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d05a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	e062      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f000 f98d 	bl	8003e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	609a      	str	r2, [r3, #8]
      break;
 8003afe:	e04f      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f000 f976 	bl	8003e00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b22:	609a      	str	r2, [r3, #8]
      break;
 8003b24:	e03c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 f8ea 	bl	8003d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2150      	movs	r1, #80	; 0x50
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f943 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b44:	e02c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 f909 	bl	8003d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2160      	movs	r1, #96	; 0x60
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f933 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b64:	e01c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f000 f8ca 	bl	8003d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2140      	movs	r1, #64	; 0x40
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f923 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b84:	e00c      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f000 f91a 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003b96:	e003      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a34      	ldr	r2, [pc, #208]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00f      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2a:	d00b      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a31      	ldr	r2, [pc, #196]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a30      	ldr	r2, [pc, #192]	; (8003cf8 <TIM_Base_SetConfig+0xec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <TIM_Base_SetConfig+0xf0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01b      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d017      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <TIM_Base_SetConfig+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <TIM_Base_SetConfig+0xf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <TIM_Base_SetConfig+0xf4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <TIM_Base_SetConfig+0xf8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <TIM_Base_SetConfig+0xfc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f043 0307 	orr.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2201      	movs	r2, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e050      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d013      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40014000 	.word	0x40014000

08003f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e03f      	b.n	8004022 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe f9fc 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f829 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	b09f      	sub	sp, #124	; 0x7c
 8004032:	af00      	add	r7, sp, #0
 8004034:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	68d9      	ldr	r1, [r3, #12]
 8004044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	ea40 0301 	orr.w	r3, r0, r1
 800404c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	431a      	orrs	r2, r3
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004070:	f021 010c 	bic.w	r1, r1, #12
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800407a:	430b      	orrs	r3, r1
 800407c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	ea40 0301 	orr.w	r3, r0, r1
 8004094:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4bc5      	ldr	r3, [pc, #788]	; (80043b0 <UART_SetConfig+0x384>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d004      	beq.n	80040aa <UART_SetConfig+0x7e>
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4bc3      	ldr	r3, [pc, #780]	; (80043b4 <UART_SetConfig+0x388>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d103      	bne.n	80040b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040aa:	f7ff f9bd 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 80040ae:	6778      	str	r0, [r7, #116]	; 0x74
 80040b0:	e002      	b.n	80040b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b2:	f7ff f9a5 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80040b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	f040 80b6 	bne.w	8004230 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c6:	461c      	mov	r4, r3
 80040c8:	f04f 0500 	mov.w	r5, #0
 80040cc:	4622      	mov	r2, r4
 80040ce:	462b      	mov	r3, r5
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	6439      	str	r1, [r7, #64]	; 0x40
 80040d4:	415b      	adcs	r3, r3
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040dc:	1912      	adds	r2, r2, r4
 80040de:	eb45 0303 	adc.w	r3, r5, r3
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	00d9      	lsls	r1, r3, #3
 80040ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040f0:	00d0      	lsls	r0, r2, #3
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	1911      	adds	r1, r2, r4
 80040f8:	6639      	str	r1, [r7, #96]	; 0x60
 80040fa:	416b      	adcs	r3, r5
 80040fc:	667b      	str	r3, [r7, #100]	; 0x64
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	461a      	mov	r2, r3
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	1891      	adds	r1, r2, r2
 800410a:	63b9      	str	r1, [r7, #56]	; 0x38
 800410c:	415b      	adcs	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004114:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004118:	f7fc fd1a 	bl	8000b50 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4ba5      	ldr	r3, [pc, #660]	; (80043b8 <UART_SetConfig+0x38c>)
 8004122:	fba3 2302 	umull	r2, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	011e      	lsls	r6, r3, #4
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	461c      	mov	r4, r3
 800412e:	f04f 0500 	mov.w	r5, #0
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	1891      	adds	r1, r2, r2
 8004138:	6339      	str	r1, [r7, #48]	; 0x30
 800413a:	415b      	adcs	r3, r3
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
 800413e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004142:	1912      	adds	r2, r2, r4
 8004144:	eb45 0303 	adc.w	r3, r5, r3
 8004148:	f04f 0000 	mov.w	r0, #0
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	00d9      	lsls	r1, r3, #3
 8004152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004156:	00d0      	lsls	r0, r2, #3
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	1911      	adds	r1, r2, r4
 800415e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004160:	416b      	adcs	r3, r5
 8004162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	461a      	mov	r2, r3
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	1891      	adds	r1, r2, r2
 8004170:	62b9      	str	r1, [r7, #40]	; 0x28
 8004172:	415b      	adcs	r3, r3
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800417a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800417e:	f7fc fce7 	bl	8000b50 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b8c      	ldr	r3, [pc, #560]	; (80043b8 <UART_SetConfig+0x38c>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a87      	ldr	r2, [pc, #540]	; (80043b8 <UART_SetConfig+0x38c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a8:	441e      	add	r6, r3
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	4618      	mov	r0, r3
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	1894      	adds	r4, r2, r2
 80041b8:	623c      	str	r4, [r7, #32]
 80041ba:	415b      	adcs	r3, r3
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041c2:	1812      	adds	r2, r2, r0
 80041c4:	eb41 0303 	adc.w	r3, r1, r3
 80041c8:	f04f 0400 	mov.w	r4, #0
 80041cc:	f04f 0500 	mov.w	r5, #0
 80041d0:	00dd      	lsls	r5, r3, #3
 80041d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d6:	00d4      	lsls	r4, r2, #3
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	1814      	adds	r4, r2, r0
 80041de:	653c      	str	r4, [r7, #80]	; 0x50
 80041e0:	414b      	adcs	r3, r1
 80041e2:	657b      	str	r3, [r7, #84]	; 0x54
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	1891      	adds	r1, r2, r2
 80041f0:	61b9      	str	r1, [r7, #24]
 80041f2:	415b      	adcs	r3, r3
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041fe:	f7fc fca7 	bl	8000b50 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4b6c      	ldr	r3, [pc, #432]	; (80043b8 <UART_SetConfig+0x38c>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a67      	ldr	r2, [pc, #412]	; (80043b8 <UART_SetConfig+0x38c>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	f003 0207 	and.w	r2, r3, #7
 8004226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4432      	add	r2, r6
 800422c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800422e:	e0b9      	b.n	80043a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	461c      	mov	r4, r3
 8004234:	f04f 0500 	mov.w	r5, #0
 8004238:	4622      	mov	r2, r4
 800423a:	462b      	mov	r3, r5
 800423c:	1891      	adds	r1, r2, r2
 800423e:	6139      	str	r1, [r7, #16]
 8004240:	415b      	adcs	r3, r3
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004248:	1912      	adds	r2, r2, r4
 800424a:	eb45 0303 	adc.w	r3, r5, r3
 800424e:	f04f 0000 	mov.w	r0, #0
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	00d9      	lsls	r1, r3, #3
 8004258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800425c:	00d0      	lsls	r0, r2, #3
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	eb12 0804 	adds.w	r8, r2, r4
 8004266:	eb43 0905 	adc.w	r9, r3, r5
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	008b      	lsls	r3, r1, #2
 800427e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004282:	0082      	lsls	r2, r0, #2
 8004284:	4640      	mov	r0, r8
 8004286:	4649      	mov	r1, r9
 8004288:	f7fc fc62 	bl	8000b50 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <UART_SetConfig+0x38c>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011e      	lsls	r6, r3, #4
 800429a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429c:	4618      	mov	r0, r3
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	1894      	adds	r4, r2, r2
 80042a8:	60bc      	str	r4, [r7, #8]
 80042aa:	415b      	adcs	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b2:	1812      	adds	r2, r2, r0
 80042b4:	eb41 0303 	adc.w	r3, r1, r3
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	f04f 0500 	mov.w	r5, #0
 80042c0:	00dd      	lsls	r5, r3, #3
 80042c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042c6:	00d4      	lsls	r4, r2, #3
 80042c8:	4622      	mov	r2, r4
 80042ca:	462b      	mov	r3, r5
 80042cc:	1814      	adds	r4, r2, r0
 80042ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80042d0:	414b      	adcs	r3, r1
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4618      	mov	r0, r3
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	008b      	lsls	r3, r1, #2
 80042e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ec:	0082      	lsls	r2, r0, #2
 80042ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042f2:	f7fc fc2d 	bl	8000b50 <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4b2f      	ldr	r3, [pc, #188]	; (80043b8 <UART_SetConfig+0x38c>)
 80042fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	2164      	movs	r1, #100	; 0x64
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	3332      	adds	r3, #50	; 0x32
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <UART_SetConfig+0x38c>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431a:	441e      	add	r6, r3
 800431c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431e:	4618      	mov	r0, r3
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	1894      	adds	r4, r2, r2
 800432a:	603c      	str	r4, [r7, #0]
 800432c:	415b      	adcs	r3, r3
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004334:	1812      	adds	r2, r2, r0
 8004336:	eb41 0303 	adc.w	r3, r1, r3
 800433a:	f04f 0400 	mov.w	r4, #0
 800433e:	f04f 0500 	mov.w	r5, #0
 8004342:	00dd      	lsls	r5, r3, #3
 8004344:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004348:	00d4      	lsls	r4, r2, #3
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	eb12 0a00 	adds.w	sl, r2, r0
 8004352:	eb43 0b01 	adc.w	fp, r3, r1
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800436e:	0082      	lsls	r2, r0, #2
 8004370:	4650      	mov	r0, sl
 8004372:	4659      	mov	r1, fp
 8004374:	f7fc fbec 	bl	8000b50 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <UART_SetConfig+0x38c>)
 800437e:	fba3 1302 	umull	r1, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2164      	movs	r1, #100	; 0x64
 8004386:	fb01 f303 	mul.w	r3, r1, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	3332      	adds	r3, #50	; 0x32
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <UART_SetConfig+0x38c>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4432      	add	r2, r6
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	377c      	adds	r7, #124	; 0x7c
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40011400 	.word	0x40011400
 80043b8:	51eb851f 	.word	0x51eb851f

080043bc <__errno>:
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <__errno+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4d0d      	ldr	r5, [pc, #52]	; (8004400 <__libc_init_array+0x38>)
 80043cc:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043ce:	1b64      	subs	r4, r4, r5
 80043d0:	10a4      	asrs	r4, r4, #2
 80043d2:	2600      	movs	r6, #0
 80043d4:	42a6      	cmp	r6, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	4d0b      	ldr	r5, [pc, #44]	; (8004408 <__libc_init_array+0x40>)
 80043da:	4c0c      	ldr	r4, [pc, #48]	; (800440c <__libc_init_array+0x44>)
 80043dc:	f000 ffe2 	bl	80053a4 <_init>
 80043e0:	1b64      	subs	r4, r4, r5
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	2600      	movs	r6, #0
 80043e6:	42a6      	cmp	r6, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f0:	4798      	blx	r3
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fa:	4798      	blx	r3
 80043fc:	3601      	adds	r6, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08005470 	.word	0x08005470
 8004404:	08005470 	.word	0x08005470
 8004408:	08005470 	.word	0x08005470
 800440c:	08005474 	.word	0x08005474

08004410 <memcpy>:
 8004410:	440a      	add	r2, r1
 8004412:	4291      	cmp	r1, r2
 8004414:	f100 33ff 	add.w	r3, r0, #4294967295
 8004418:	d100      	bne.n	800441c <memcpy+0xc>
 800441a:	4770      	bx	lr
 800441c:	b510      	push	{r4, lr}
 800441e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004426:	4291      	cmp	r1, r2
 8004428:	d1f9      	bne.n	800441e <memcpy+0xe>
 800442a:	bd10      	pop	{r4, pc}

0800442c <memset>:
 800442c:	4402      	add	r2, r0
 800442e:	4603      	mov	r3, r0
 8004430:	4293      	cmp	r3, r2
 8004432:	d100      	bne.n	8004436 <memset+0xa>
 8004434:	4770      	bx	lr
 8004436:	f803 1b01 	strb.w	r1, [r3], #1
 800443a:	e7f9      	b.n	8004430 <memset+0x4>

0800443c <pow>:
 800443c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004440:	ec59 8b10 	vmov	r8, r9, d0
 8004444:	ec57 6b11 	vmov	r6, r7, d1
 8004448:	f000 f8a6 	bl	8004598 <__ieee754_pow>
 800444c:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <pow+0x14c>)
 800444e:	f993 3000 	ldrsb.w	r3, [r3]
 8004452:	3301      	adds	r3, #1
 8004454:	ec55 4b10 	vmov	r4, r5, d0
 8004458:	d015      	beq.n	8004486 <pow+0x4a>
 800445a:	4632      	mov	r2, r6
 800445c:	463b      	mov	r3, r7
 800445e:	4630      	mov	r0, r6
 8004460:	4639      	mov	r1, r7
 8004462:	f7fc fb0f 	bl	8000a84 <__aeabi_dcmpun>
 8004466:	b970      	cbnz	r0, 8004486 <pow+0x4a>
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	4640      	mov	r0, r8
 800446e:	4649      	mov	r1, r9
 8004470:	f7fc fb08 	bl	8000a84 <__aeabi_dcmpun>
 8004474:	2200      	movs	r2, #0
 8004476:	2300      	movs	r3, #0
 8004478:	b148      	cbz	r0, 800448e <pow+0x52>
 800447a:	4630      	mov	r0, r6
 800447c:	4639      	mov	r1, r7
 800447e:	f7fc facf 	bl	8000a20 <__aeabi_dcmpeq>
 8004482:	2800      	cmp	r0, #0
 8004484:	d17d      	bne.n	8004582 <pow+0x146>
 8004486:	ec45 4b10 	vmov	d0, r4, r5
 800448a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448e:	4640      	mov	r0, r8
 8004490:	4649      	mov	r1, r9
 8004492:	f7fc fac5 	bl	8000a20 <__aeabi_dcmpeq>
 8004496:	b1e0      	cbz	r0, 80044d2 <pow+0x96>
 8004498:	2200      	movs	r2, #0
 800449a:	2300      	movs	r3, #0
 800449c:	4630      	mov	r0, r6
 800449e:	4639      	mov	r1, r7
 80044a0:	f7fc fabe 	bl	8000a20 <__aeabi_dcmpeq>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d16c      	bne.n	8004582 <pow+0x146>
 80044a8:	ec47 6b10 	vmov	d0, r6, r7
 80044ac:	f000 fe53 	bl	8005156 <finite>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0e8      	beq.n	8004486 <pow+0x4a>
 80044b4:	2200      	movs	r2, #0
 80044b6:	2300      	movs	r3, #0
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f7fc faba 	bl	8000a34 <__aeabi_dcmplt>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d0e0      	beq.n	8004486 <pow+0x4a>
 80044c4:	f7ff ff7a 	bl	80043bc <__errno>
 80044c8:	2321      	movs	r3, #33	; 0x21
 80044ca:	6003      	str	r3, [r0, #0]
 80044cc:	2400      	movs	r4, #0
 80044ce:	4d2f      	ldr	r5, [pc, #188]	; (800458c <pow+0x150>)
 80044d0:	e7d9      	b.n	8004486 <pow+0x4a>
 80044d2:	ec45 4b10 	vmov	d0, r4, r5
 80044d6:	f000 fe3e 	bl	8005156 <finite>
 80044da:	bbb8      	cbnz	r0, 800454c <pow+0x110>
 80044dc:	ec49 8b10 	vmov	d0, r8, r9
 80044e0:	f000 fe39 	bl	8005156 <finite>
 80044e4:	b390      	cbz	r0, 800454c <pow+0x110>
 80044e6:	ec47 6b10 	vmov	d0, r6, r7
 80044ea:	f000 fe34 	bl	8005156 <finite>
 80044ee:	b368      	cbz	r0, 800454c <pow+0x110>
 80044f0:	4622      	mov	r2, r4
 80044f2:	462b      	mov	r3, r5
 80044f4:	4620      	mov	r0, r4
 80044f6:	4629      	mov	r1, r5
 80044f8:	f7fc fac4 	bl	8000a84 <__aeabi_dcmpun>
 80044fc:	b160      	cbz	r0, 8004518 <pow+0xdc>
 80044fe:	f7ff ff5d 	bl	80043bc <__errno>
 8004502:	2321      	movs	r3, #33	; 0x21
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f7fc f949 	bl	80007a4 <__aeabi_ddiv>
 8004512:	4604      	mov	r4, r0
 8004514:	460d      	mov	r5, r1
 8004516:	e7b6      	b.n	8004486 <pow+0x4a>
 8004518:	f7ff ff50 	bl	80043bc <__errno>
 800451c:	2322      	movs	r3, #34	; 0x22
 800451e:	6003      	str	r3, [r0, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	2300      	movs	r3, #0
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	f7fc fa84 	bl	8000a34 <__aeabi_dcmplt>
 800452c:	2400      	movs	r4, #0
 800452e:	b158      	cbz	r0, 8004548 <pow+0x10c>
 8004530:	ec47 6b10 	vmov	d0, r6, r7
 8004534:	f000 fe24 	bl	8005180 <rint>
 8004538:	4632      	mov	r2, r6
 800453a:	ec51 0b10 	vmov	r0, r1, d0
 800453e:	463b      	mov	r3, r7
 8004540:	f7fc fa6e 	bl	8000a20 <__aeabi_dcmpeq>
 8004544:	2800      	cmp	r0, #0
 8004546:	d0c2      	beq.n	80044ce <pow+0x92>
 8004548:	4d11      	ldr	r5, [pc, #68]	; (8004590 <pow+0x154>)
 800454a:	e79c      	b.n	8004486 <pow+0x4a>
 800454c:	2200      	movs	r2, #0
 800454e:	2300      	movs	r3, #0
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fc fa64 	bl	8000a20 <__aeabi_dcmpeq>
 8004558:	2800      	cmp	r0, #0
 800455a:	d094      	beq.n	8004486 <pow+0x4a>
 800455c:	ec49 8b10 	vmov	d0, r8, r9
 8004560:	f000 fdf9 	bl	8005156 <finite>
 8004564:	2800      	cmp	r0, #0
 8004566:	d08e      	beq.n	8004486 <pow+0x4a>
 8004568:	ec47 6b10 	vmov	d0, r6, r7
 800456c:	f000 fdf3 	bl	8005156 <finite>
 8004570:	2800      	cmp	r0, #0
 8004572:	d088      	beq.n	8004486 <pow+0x4a>
 8004574:	f7ff ff22 	bl	80043bc <__errno>
 8004578:	2322      	movs	r3, #34	; 0x22
 800457a:	6003      	str	r3, [r0, #0]
 800457c:	2400      	movs	r4, #0
 800457e:	2500      	movs	r5, #0
 8004580:	e781      	b.n	8004486 <pow+0x4a>
 8004582:	4d04      	ldr	r5, [pc, #16]	; (8004594 <pow+0x158>)
 8004584:	2400      	movs	r4, #0
 8004586:	e77e      	b.n	8004486 <pow+0x4a>
 8004588:	20000070 	.word	0x20000070
 800458c:	fff00000 	.word	0xfff00000
 8004590:	7ff00000 	.word	0x7ff00000
 8004594:	3ff00000 	.word	0x3ff00000

08004598 <__ieee754_pow>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	ed2d 8b06 	vpush	{d8-d10}
 80045a0:	b08d      	sub	sp, #52	; 0x34
 80045a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80045a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80045aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80045ae:	ea56 0100 	orrs.w	r1, r6, r0
 80045b2:	ec53 2b10 	vmov	r2, r3, d0
 80045b6:	f000 84d1 	beq.w	8004f5c <__ieee754_pow+0x9c4>
 80045ba:	497f      	ldr	r1, [pc, #508]	; (80047b8 <__ieee754_pow+0x220>)
 80045bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80045c0:	428c      	cmp	r4, r1
 80045c2:	ee10 8a10 	vmov	r8, s0
 80045c6:	4699      	mov	r9, r3
 80045c8:	dc09      	bgt.n	80045de <__ieee754_pow+0x46>
 80045ca:	d103      	bne.n	80045d4 <__ieee754_pow+0x3c>
 80045cc:	b97a      	cbnz	r2, 80045ee <__ieee754_pow+0x56>
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	dd02      	ble.n	80045d8 <__ieee754_pow+0x40>
 80045d2:	e00c      	b.n	80045ee <__ieee754_pow+0x56>
 80045d4:	428e      	cmp	r6, r1
 80045d6:	dc02      	bgt.n	80045de <__ieee754_pow+0x46>
 80045d8:	428e      	cmp	r6, r1
 80045da:	d110      	bne.n	80045fe <__ieee754_pow+0x66>
 80045dc:	b178      	cbz	r0, 80045fe <__ieee754_pow+0x66>
 80045de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80045e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80045e6:	ea54 0308 	orrs.w	r3, r4, r8
 80045ea:	f000 84b7 	beq.w	8004f5c <__ieee754_pow+0x9c4>
 80045ee:	4873      	ldr	r0, [pc, #460]	; (80047bc <__ieee754_pow+0x224>)
 80045f0:	b00d      	add	sp, #52	; 0x34
 80045f2:	ecbd 8b06 	vpop	{d8-d10}
 80045f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f000 bdb9 	b.w	8005170 <nan>
 80045fe:	f1b9 0f00 	cmp.w	r9, #0
 8004602:	da36      	bge.n	8004672 <__ieee754_pow+0xda>
 8004604:	496e      	ldr	r1, [pc, #440]	; (80047c0 <__ieee754_pow+0x228>)
 8004606:	428e      	cmp	r6, r1
 8004608:	dc51      	bgt.n	80046ae <__ieee754_pow+0x116>
 800460a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800460e:	428e      	cmp	r6, r1
 8004610:	f340 84af 	ble.w	8004f72 <__ieee754_pow+0x9da>
 8004614:	1531      	asrs	r1, r6, #20
 8004616:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800461a:	2914      	cmp	r1, #20
 800461c:	dd0f      	ble.n	800463e <__ieee754_pow+0xa6>
 800461e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004622:	fa20 fc01 	lsr.w	ip, r0, r1
 8004626:	fa0c f101 	lsl.w	r1, ip, r1
 800462a:	4281      	cmp	r1, r0
 800462c:	f040 84a1 	bne.w	8004f72 <__ieee754_pow+0x9da>
 8004630:	f00c 0c01 	and.w	ip, ip, #1
 8004634:	f1cc 0102 	rsb	r1, ip, #2
 8004638:	9100      	str	r1, [sp, #0]
 800463a:	b180      	cbz	r0, 800465e <__ieee754_pow+0xc6>
 800463c:	e059      	b.n	80046f2 <__ieee754_pow+0x15a>
 800463e:	2800      	cmp	r0, #0
 8004640:	d155      	bne.n	80046ee <__ieee754_pow+0x156>
 8004642:	f1c1 0114 	rsb	r1, r1, #20
 8004646:	fa46 fc01 	asr.w	ip, r6, r1
 800464a:	fa0c f101 	lsl.w	r1, ip, r1
 800464e:	42b1      	cmp	r1, r6
 8004650:	f040 848c 	bne.w	8004f6c <__ieee754_pow+0x9d4>
 8004654:	f00c 0c01 	and.w	ip, ip, #1
 8004658:	f1cc 0102 	rsb	r1, ip, #2
 800465c:	9100      	str	r1, [sp, #0]
 800465e:	4959      	ldr	r1, [pc, #356]	; (80047c4 <__ieee754_pow+0x22c>)
 8004660:	428e      	cmp	r6, r1
 8004662:	d12d      	bne.n	80046c0 <__ieee754_pow+0x128>
 8004664:	2f00      	cmp	r7, #0
 8004666:	da79      	bge.n	800475c <__ieee754_pow+0x1c4>
 8004668:	4956      	ldr	r1, [pc, #344]	; (80047c4 <__ieee754_pow+0x22c>)
 800466a:	2000      	movs	r0, #0
 800466c:	f7fc f89a 	bl	80007a4 <__aeabi_ddiv>
 8004670:	e016      	b.n	80046a0 <__ieee754_pow+0x108>
 8004672:	2100      	movs	r1, #0
 8004674:	9100      	str	r1, [sp, #0]
 8004676:	2800      	cmp	r0, #0
 8004678:	d13b      	bne.n	80046f2 <__ieee754_pow+0x15a>
 800467a:	494f      	ldr	r1, [pc, #316]	; (80047b8 <__ieee754_pow+0x220>)
 800467c:	428e      	cmp	r6, r1
 800467e:	d1ee      	bne.n	800465e <__ieee754_pow+0xc6>
 8004680:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004684:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004688:	ea53 0308 	orrs.w	r3, r3, r8
 800468c:	f000 8466 	beq.w	8004f5c <__ieee754_pow+0x9c4>
 8004690:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <__ieee754_pow+0x230>)
 8004692:	429c      	cmp	r4, r3
 8004694:	dd0d      	ble.n	80046b2 <__ieee754_pow+0x11a>
 8004696:	2f00      	cmp	r7, #0
 8004698:	f280 8464 	bge.w	8004f64 <__ieee754_pow+0x9cc>
 800469c:	2000      	movs	r0, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	ec41 0b10 	vmov	d0, r0, r1
 80046a4:	b00d      	add	sp, #52	; 0x34
 80046a6:	ecbd 8b06 	vpop	{d8-d10}
 80046aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ae:	2102      	movs	r1, #2
 80046b0:	e7e0      	b.n	8004674 <__ieee754_pow+0xdc>
 80046b2:	2f00      	cmp	r7, #0
 80046b4:	daf2      	bge.n	800469c <__ieee754_pow+0x104>
 80046b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80046ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80046be:	e7ef      	b.n	80046a0 <__ieee754_pow+0x108>
 80046c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80046c4:	d104      	bne.n	80046d0 <__ieee754_pow+0x138>
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fb ff41 	bl	8000550 <__aeabi_dmul>
 80046ce:	e7e7      	b.n	80046a0 <__ieee754_pow+0x108>
 80046d0:	493e      	ldr	r1, [pc, #248]	; (80047cc <__ieee754_pow+0x234>)
 80046d2:	428f      	cmp	r7, r1
 80046d4:	d10d      	bne.n	80046f2 <__ieee754_pow+0x15a>
 80046d6:	f1b9 0f00 	cmp.w	r9, #0
 80046da:	db0a      	blt.n	80046f2 <__ieee754_pow+0x15a>
 80046dc:	ec43 2b10 	vmov	d0, r2, r3
 80046e0:	b00d      	add	sp, #52	; 0x34
 80046e2:	ecbd 8b06 	vpop	{d8-d10}
 80046e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f000 bc77 	b.w	8004fdc <__ieee754_sqrt>
 80046ee:	2100      	movs	r1, #0
 80046f0:	9100      	str	r1, [sp, #0]
 80046f2:	ec43 2b10 	vmov	d0, r2, r3
 80046f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046fa:	f000 fd23 	bl	8005144 <fabs>
 80046fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004702:	ec51 0b10 	vmov	r0, r1, d0
 8004706:	f1b8 0f00 	cmp.w	r8, #0
 800470a:	d12a      	bne.n	8004762 <__ieee754_pow+0x1ca>
 800470c:	b12c      	cbz	r4, 800471a <__ieee754_pow+0x182>
 800470e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80047c4 <__ieee754_pow+0x22c>
 8004712:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004716:	45e6      	cmp	lr, ip
 8004718:	d123      	bne.n	8004762 <__ieee754_pow+0x1ca>
 800471a:	2f00      	cmp	r7, #0
 800471c:	da05      	bge.n	800472a <__ieee754_pow+0x192>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	2000      	movs	r0, #0
 8004724:	4927      	ldr	r1, [pc, #156]	; (80047c4 <__ieee754_pow+0x22c>)
 8004726:	f7fc f83d 	bl	80007a4 <__aeabi_ddiv>
 800472a:	f1b9 0f00 	cmp.w	r9, #0
 800472e:	dab7      	bge.n	80046a0 <__ieee754_pow+0x108>
 8004730:	9b00      	ldr	r3, [sp, #0]
 8004732:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004736:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800473a:	4323      	orrs	r3, r4
 800473c:	d108      	bne.n	8004750 <__ieee754_pow+0x1b8>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f7fb fd4b 	bl	80001e0 <__aeabi_dsub>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	e78d      	b.n	800466c <__ieee754_pow+0xd4>
 8004750:	9b00      	ldr	r3, [sp, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d1a4      	bne.n	80046a0 <__ieee754_pow+0x108>
 8004756:	4602      	mov	r2, r0
 8004758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	e79e      	b.n	80046a0 <__ieee754_pow+0x108>
 8004762:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004766:	f10c 35ff 	add.w	r5, ip, #4294967295
 800476a:	950a      	str	r5, [sp, #40]	; 0x28
 800476c:	9d00      	ldr	r5, [sp, #0]
 800476e:	46ac      	mov	ip, r5
 8004770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004772:	ea5c 0505 	orrs.w	r5, ip, r5
 8004776:	d0e4      	beq.n	8004742 <__ieee754_pow+0x1aa>
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <__ieee754_pow+0x238>)
 800477a:	429e      	cmp	r6, r3
 800477c:	f340 80fc 	ble.w	8004978 <__ieee754_pow+0x3e0>
 8004780:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004784:	429e      	cmp	r6, r3
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <__ieee754_pow+0x230>)
 8004788:	dd07      	ble.n	800479a <__ieee754_pow+0x202>
 800478a:	429c      	cmp	r4, r3
 800478c:	dc0a      	bgt.n	80047a4 <__ieee754_pow+0x20c>
 800478e:	2f00      	cmp	r7, #0
 8004790:	da84      	bge.n	800469c <__ieee754_pow+0x104>
 8004792:	a307      	add	r3, pc, #28	; (adr r3, 80047b0 <__ieee754_pow+0x218>)
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	e795      	b.n	80046c6 <__ieee754_pow+0x12e>
 800479a:	429c      	cmp	r4, r3
 800479c:	dbf7      	blt.n	800478e <__ieee754_pow+0x1f6>
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <__ieee754_pow+0x22c>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	dd17      	ble.n	80047d4 <__ieee754_pow+0x23c>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	dcf4      	bgt.n	8004792 <__ieee754_pow+0x1fa>
 80047a8:	e778      	b.n	800469c <__ieee754_pow+0x104>
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	8800759c 	.word	0x8800759c
 80047b4:	7e37e43c 	.word	0x7e37e43c
 80047b8:	7ff00000 	.word	0x7ff00000
 80047bc:	08005420 	.word	0x08005420
 80047c0:	433fffff 	.word	0x433fffff
 80047c4:	3ff00000 	.word	0x3ff00000
 80047c8:	3fefffff 	.word	0x3fefffff
 80047cc:	3fe00000 	.word	0x3fe00000
 80047d0:	41e00000 	.word	0x41e00000
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <__ieee754_pow+0x3d0>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	f7fb fd02 	bl	80001e0 <__aeabi_dsub>
 80047dc:	a356      	add	r3, pc, #344	; (adr r3, 8004938 <__ieee754_pow+0x3a0>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
 80047e6:	f7fb feb3 	bl	8000550 <__aeabi_dmul>
 80047ea:	a355      	add	r3, pc, #340	; (adr r3, 8004940 <__ieee754_pow+0x3a8>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	4620      	mov	r0, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7fb feaa 	bl	8000550 <__aeabi_dmul>
 80047fc:	4b5b      	ldr	r3, [pc, #364]	; (800496c <__ieee754_pow+0x3d4>)
 80047fe:	4682      	mov	sl, r0
 8004800:	468b      	mov	fp, r1
 8004802:	2200      	movs	r2, #0
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fea2 	bl	8000550 <__aeabi_dmul>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	a14d      	add	r1, pc, #308	; (adr r1, 8004948 <__ieee754_pow+0x3b0>)
 8004812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004816:	f7fb fce3 	bl	80001e0 <__aeabi_dsub>
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f7fb fe97 	bl	8000550 <__aeabi_dmul>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	2000      	movs	r0, #0
 8004828:	4951      	ldr	r1, [pc, #324]	; (8004970 <__ieee754_pow+0x3d8>)
 800482a:	f7fb fcd9 	bl	80001e0 <__aeabi_dsub>
 800482e:	4622      	mov	r2, r4
 8004830:	4680      	mov	r8, r0
 8004832:	4689      	mov	r9, r1
 8004834:	462b      	mov	r3, r5
 8004836:	4620      	mov	r0, r4
 8004838:	4629      	mov	r1, r5
 800483a:	f7fb fe89 	bl	8000550 <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4640      	mov	r0, r8
 8004844:	4649      	mov	r1, r9
 8004846:	f7fb fe83 	bl	8000550 <__aeabi_dmul>
 800484a:	a341      	add	r3, pc, #260	; (adr r3, 8004950 <__ieee754_pow+0x3b8>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb fe7e 	bl	8000550 <__aeabi_dmul>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4650      	mov	r0, sl
 800485a:	4659      	mov	r1, fp
 800485c:	f7fb fcc0 	bl	80001e0 <__aeabi_dsub>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4680      	mov	r8, r0
 8004866:	4689      	mov	r9, r1
 8004868:	4630      	mov	r0, r6
 800486a:	4639      	mov	r1, r7
 800486c:	f7fb fcba 	bl	80001e4 <__adddf3>
 8004870:	2400      	movs	r4, #0
 8004872:	4632      	mov	r2, r6
 8004874:	463b      	mov	r3, r7
 8004876:	4620      	mov	r0, r4
 8004878:	460d      	mov	r5, r1
 800487a:	f7fb fcb1 	bl	80001e0 <__aeabi_dsub>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fb fcab 	bl	80001e0 <__aeabi_dsub>
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	4313      	orrs	r3, r2
 8004892:	4682      	mov	sl, r0
 8004894:	468b      	mov	fp, r1
 8004896:	f040 81f1 	bne.w	8004c7c <__ieee754_pow+0x6e4>
 800489a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004958 <__ieee754_pow+0x3c0>
 800489e:	eeb0 8a47 	vmov.f32	s16, s14
 80048a2:	eef0 8a67 	vmov.f32	s17, s15
 80048a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048aa:	2600      	movs	r6, #0
 80048ac:	4632      	mov	r2, r6
 80048ae:	463b      	mov	r3, r7
 80048b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b4:	f7fb fc94 	bl	80001e0 <__aeabi_dsub>
 80048b8:	4622      	mov	r2, r4
 80048ba:	462b      	mov	r3, r5
 80048bc:	f7fb fe48 	bl	8000550 <__aeabi_dmul>
 80048c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048c4:	4680      	mov	r8, r0
 80048c6:	4689      	mov	r9, r1
 80048c8:	4650      	mov	r0, sl
 80048ca:	4659      	mov	r1, fp
 80048cc:	f7fb fe40 	bl	8000550 <__aeabi_dmul>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4640      	mov	r0, r8
 80048d6:	4649      	mov	r1, r9
 80048d8:	f7fb fc84 	bl	80001e4 <__adddf3>
 80048dc:	4632      	mov	r2, r6
 80048de:	463b      	mov	r3, r7
 80048e0:	4680      	mov	r8, r0
 80048e2:	4689      	mov	r9, r1
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fb fe32 	bl	8000550 <__aeabi_dmul>
 80048ec:	460b      	mov	r3, r1
 80048ee:	4604      	mov	r4, r0
 80048f0:	460d      	mov	r5, r1
 80048f2:	4602      	mov	r2, r0
 80048f4:	4649      	mov	r1, r9
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7fb fc74 	bl	80001e4 <__adddf3>
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <__ieee754_pow+0x3dc>)
 80048fe:	4299      	cmp	r1, r3
 8004900:	ec45 4b19 	vmov	d9, r4, r5
 8004904:	4606      	mov	r6, r0
 8004906:	460f      	mov	r7, r1
 8004908:	468b      	mov	fp, r1
 800490a:	f340 82fe 	ble.w	8004f0a <__ieee754_pow+0x972>
 800490e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004916:	4303      	orrs	r3, r0
 8004918:	f000 81f0 	beq.w	8004cfc <__ieee754_pow+0x764>
 800491c:	a310      	add	r3, pc, #64	; (adr r3, 8004960 <__ieee754_pow+0x3c8>)
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	ec51 0b18 	vmov	r0, r1, d8
 8004926:	f7fb fe13 	bl	8000550 <__aeabi_dmul>
 800492a:	a30d      	add	r3, pc, #52	; (adr r3, 8004960 <__ieee754_pow+0x3c8>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	e6cb      	b.n	80046ca <__ieee754_pow+0x132>
 8004932:	bf00      	nop
 8004934:	f3af 8000 	nop.w
 8004938:	60000000 	.word	0x60000000
 800493c:	3ff71547 	.word	0x3ff71547
 8004940:	f85ddf44 	.word	0xf85ddf44
 8004944:	3e54ae0b 	.word	0x3e54ae0b
 8004948:	55555555 	.word	0x55555555
 800494c:	3fd55555 	.word	0x3fd55555
 8004950:	652b82fe 	.word	0x652b82fe
 8004954:	3ff71547 	.word	0x3ff71547
 8004958:	00000000 	.word	0x00000000
 800495c:	bff00000 	.word	0xbff00000
 8004960:	8800759c 	.word	0x8800759c
 8004964:	7e37e43c 	.word	0x7e37e43c
 8004968:	3ff00000 	.word	0x3ff00000
 800496c:	3fd00000 	.word	0x3fd00000
 8004970:	3fe00000 	.word	0x3fe00000
 8004974:	408fffff 	.word	0x408fffff
 8004978:	4bd7      	ldr	r3, [pc, #860]	; (8004cd8 <__ieee754_pow+0x740>)
 800497a:	ea03 0309 	and.w	r3, r3, r9
 800497e:	2200      	movs	r2, #0
 8004980:	b92b      	cbnz	r3, 800498e <__ieee754_pow+0x3f6>
 8004982:	4bd6      	ldr	r3, [pc, #856]	; (8004cdc <__ieee754_pow+0x744>)
 8004984:	f7fb fde4 	bl	8000550 <__aeabi_dmul>
 8004988:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800498c:	460c      	mov	r4, r1
 800498e:	1523      	asrs	r3, r4, #20
 8004990:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004994:	4413      	add	r3, r2
 8004996:	9309      	str	r3, [sp, #36]	; 0x24
 8004998:	4bd1      	ldr	r3, [pc, #836]	; (8004ce0 <__ieee754_pow+0x748>)
 800499a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800499e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80049a2:	429c      	cmp	r4, r3
 80049a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80049a8:	dd08      	ble.n	80049bc <__ieee754_pow+0x424>
 80049aa:	4bce      	ldr	r3, [pc, #824]	; (8004ce4 <__ieee754_pow+0x74c>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	f340 8163 	ble.w	8004c78 <__ieee754_pow+0x6e0>
 80049b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b4:	3301      	adds	r3, #1
 80049b6:	9309      	str	r3, [sp, #36]	; 0x24
 80049b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80049bc:	2400      	movs	r4, #0
 80049be:	00e3      	lsls	r3, r4, #3
 80049c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049c2:	4bc9      	ldr	r3, [pc, #804]	; (8004ce8 <__ieee754_pow+0x750>)
 80049c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049c8:	ed93 7b00 	vldr	d7, [r3]
 80049cc:	4629      	mov	r1, r5
 80049ce:	ec53 2b17 	vmov	r2, r3, d7
 80049d2:	eeb0 8a47 	vmov.f32	s16, s14
 80049d6:	eef0 8a67 	vmov.f32	s17, s15
 80049da:	4682      	mov	sl, r0
 80049dc:	f7fb fc00 	bl	80001e0 <__aeabi_dsub>
 80049e0:	4652      	mov	r2, sl
 80049e2:	4606      	mov	r6, r0
 80049e4:	460f      	mov	r7, r1
 80049e6:	462b      	mov	r3, r5
 80049e8:	ec51 0b18 	vmov	r0, r1, d8
 80049ec:	f7fb fbfa 	bl	80001e4 <__adddf3>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	2000      	movs	r0, #0
 80049f6:	49bd      	ldr	r1, [pc, #756]	; (8004cec <__ieee754_pow+0x754>)
 80049f8:	f7fb fed4 	bl	80007a4 <__aeabi_ddiv>
 80049fc:	ec41 0b19 	vmov	d9, r0, r1
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4630      	mov	r0, r6
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fb fda2 	bl	8000550 <__aeabi_dmul>
 8004a0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004a20:	46ab      	mov	fp, r5
 8004a22:	106d      	asrs	r5, r5, #1
 8004a24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004a28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004a2c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004a30:	2200      	movs	r2, #0
 8004a32:	4640      	mov	r0, r8
 8004a34:	4649      	mov	r1, r9
 8004a36:	4614      	mov	r4, r2
 8004a38:	461d      	mov	r5, r3
 8004a3a:	f7fb fd89 	bl	8000550 <__aeabi_dmul>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4630      	mov	r0, r6
 8004a44:	4639      	mov	r1, r7
 8004a46:	f7fb fbcb 	bl	80001e0 <__aeabi_dsub>
 8004a4a:	ec53 2b18 	vmov	r2, r3, d8
 8004a4e:	4606      	mov	r6, r0
 8004a50:	460f      	mov	r7, r1
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fbc3 	bl	80001e0 <__aeabi_dsub>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4650      	mov	r0, sl
 8004a60:	4659      	mov	r1, fp
 8004a62:	f7fb fbbd 	bl	80001e0 <__aeabi_dsub>
 8004a66:	4642      	mov	r2, r8
 8004a68:	464b      	mov	r3, r9
 8004a6a:	f7fb fd71 	bl	8000550 <__aeabi_dmul>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fb fbb3 	bl	80001e0 <__aeabi_dsub>
 8004a7a:	ec53 2b19 	vmov	r2, r3, d9
 8004a7e:	f7fb fd67 	bl	8000550 <__aeabi_dmul>
 8004a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a86:	ec41 0b18 	vmov	d8, r0, r1
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fb fd5f 	bl	8000550 <__aeabi_dmul>
 8004a92:	a37d      	add	r3, pc, #500	; (adr r3, 8004c88 <__ieee754_pow+0x6f0>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	f7fb fd58 	bl	8000550 <__aeabi_dmul>
 8004aa0:	a37b      	add	r3, pc, #492	; (adr r3, 8004c90 <__ieee754_pow+0x6f8>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fb9d 	bl	80001e4 <__adddf3>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f7fb fd4f 	bl	8000550 <__aeabi_dmul>
 8004ab2:	a379      	add	r3, pc, #484	; (adr r3, 8004c98 <__ieee754_pow+0x700>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fb94 	bl	80001e4 <__adddf3>
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f7fb fd46 	bl	8000550 <__aeabi_dmul>
 8004ac4:	a376      	add	r3, pc, #472	; (adr r3, 8004ca0 <__ieee754_pow+0x708>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fb8b 	bl	80001e4 <__adddf3>
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	f7fb fd3d 	bl	8000550 <__aeabi_dmul>
 8004ad6:	a374      	add	r3, pc, #464	; (adr r3, 8004ca8 <__ieee754_pow+0x710>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fb82 	bl	80001e4 <__adddf3>
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	f7fb fd34 	bl	8000550 <__aeabi_dmul>
 8004ae8:	a371      	add	r3, pc, #452	; (adr r3, 8004cb0 <__ieee754_pow+0x718>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fb79 	bl	80001e4 <__adddf3>
 8004af2:	4622      	mov	r2, r4
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	462b      	mov	r3, r5
 8004afa:	4620      	mov	r0, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7fb fd27 	bl	8000550 <__aeabi_dmul>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4630      	mov	r0, r6
 8004b08:	4639      	mov	r1, r7
 8004b0a:	f7fb fd21 	bl	8000550 <__aeabi_dmul>
 8004b0e:	4642      	mov	r2, r8
 8004b10:	4604      	mov	r4, r0
 8004b12:	460d      	mov	r5, r1
 8004b14:	464b      	mov	r3, r9
 8004b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1a:	f7fb fb63 	bl	80001e4 <__adddf3>
 8004b1e:	ec53 2b18 	vmov	r2, r3, d8
 8004b22:	f7fb fd15 	bl	8000550 <__aeabi_dmul>
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	f7fb fb5b 	bl	80001e4 <__adddf3>
 8004b2e:	4642      	mov	r2, r8
 8004b30:	4682      	mov	sl, r0
 8004b32:	468b      	mov	fp, r1
 8004b34:	464b      	mov	r3, r9
 8004b36:	4640      	mov	r0, r8
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb fd09 	bl	8000550 <__aeabi_dmul>
 8004b3e:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <__ieee754_pow+0x758>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	4606      	mov	r6, r0
 8004b44:	460f      	mov	r7, r1
 8004b46:	f7fb fb4d 	bl	80001e4 <__adddf3>
 8004b4a:	4652      	mov	r2, sl
 8004b4c:	465b      	mov	r3, fp
 8004b4e:	f7fb fb49 	bl	80001e4 <__adddf3>
 8004b52:	9c04      	ldr	r4, [sp, #16]
 8004b54:	460d      	mov	r5, r1
 8004b56:	4622      	mov	r2, r4
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	f7fb fcf7 	bl	8000550 <__aeabi_dmul>
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <__ieee754_pow+0x758>)
 8004b64:	4680      	mov	r8, r0
 8004b66:	4689      	mov	r9, r1
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	f7fb fb37 	bl	80001e0 <__aeabi_dsub>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	f7fb fb33 	bl	80001e0 <__aeabi_dsub>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4650      	mov	r0, sl
 8004b80:	4659      	mov	r1, fp
 8004b82:	f7fb fb2d 	bl	80001e0 <__aeabi_dsub>
 8004b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b8a:	f7fb fce1 	bl	8000550 <__aeabi_dmul>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4606      	mov	r6, r0
 8004b92:	460f      	mov	r7, r1
 8004b94:	462b      	mov	r3, r5
 8004b96:	ec51 0b18 	vmov	r0, r1, d8
 8004b9a:	f7fb fcd9 	bl	8000550 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb fb1d 	bl	80001e4 <__adddf3>
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb fb15 	bl	80001e4 <__adddf3>
 8004bba:	9c04      	ldr	r4, [sp, #16]
 8004bbc:	a33e      	add	r3, pc, #248	; (adr r3, 8004cb8 <__ieee754_pow+0x720>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	f7fb fcc3 	bl	8000550 <__aeabi_dmul>
 8004bca:	4642      	mov	r2, r8
 8004bcc:	ec41 0b18 	vmov	d8, r0, r1
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fb03 	bl	80001e0 <__aeabi_dsub>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4630      	mov	r0, r6
 8004be0:	4639      	mov	r1, r7
 8004be2:	f7fb fafd 	bl	80001e0 <__aeabi_dsub>
 8004be6:	a336      	add	r3, pc, #216	; (adr r3, 8004cc0 <__ieee754_pow+0x728>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fcb0 	bl	8000550 <__aeabi_dmul>
 8004bf0:	a335      	add	r3, pc, #212	; (adr r3, 8004cc8 <__ieee754_pow+0x730>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb fca7 	bl	8000550 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4630      	mov	r0, r6
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7fb faeb 	bl	80001e4 <__adddf3>
 8004c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c10:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <__ieee754_pow+0x75c>)
 8004c12:	4413      	add	r3, r2
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f7fb fae4 	bl	80001e4 <__adddf3>
 8004c1c:	4682      	mov	sl, r0
 8004c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c20:	468b      	mov	fp, r1
 8004c22:	f7fb fc2b 	bl	800047c <__aeabi_i2d>
 8004c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c28:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <__ieee754_pow+0x760>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	4652      	mov	r2, sl
 8004c36:	465b      	mov	r3, fp
 8004c38:	ec51 0b18 	vmov	r0, r1, d8
 8004c3c:	f7fb fad2 	bl	80001e4 <__adddf3>
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	f7fb face 	bl	80001e4 <__adddf3>
 8004c48:	4632      	mov	r2, r6
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	f7fb faca 	bl	80001e4 <__adddf3>
 8004c50:	9c04      	ldr	r4, [sp, #16]
 8004c52:	4632      	mov	r2, r6
 8004c54:	463b      	mov	r3, r7
 8004c56:	4620      	mov	r0, r4
 8004c58:	460d      	mov	r5, r1
 8004c5a:	f7fb fac1 	bl	80001e0 <__aeabi_dsub>
 8004c5e:	4642      	mov	r2, r8
 8004c60:	464b      	mov	r3, r9
 8004c62:	f7fb fabd 	bl	80001e0 <__aeabi_dsub>
 8004c66:	ec53 2b18 	vmov	r2, r3, d8
 8004c6a:	f7fb fab9 	bl	80001e0 <__aeabi_dsub>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4650      	mov	r0, sl
 8004c74:	4659      	mov	r1, fp
 8004c76:	e606      	b.n	8004886 <__ieee754_pow+0x2ee>
 8004c78:	2401      	movs	r4, #1
 8004c7a:	e6a0      	b.n	80049be <__ieee754_pow+0x426>
 8004c7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004cd0 <__ieee754_pow+0x738>
 8004c80:	e60d      	b.n	800489e <__ieee754_pow+0x306>
 8004c82:	bf00      	nop
 8004c84:	f3af 8000 	nop.w
 8004c88:	4a454eef 	.word	0x4a454eef
 8004c8c:	3fca7e28 	.word	0x3fca7e28
 8004c90:	93c9db65 	.word	0x93c9db65
 8004c94:	3fcd864a 	.word	0x3fcd864a
 8004c98:	a91d4101 	.word	0xa91d4101
 8004c9c:	3fd17460 	.word	0x3fd17460
 8004ca0:	518f264d 	.word	0x518f264d
 8004ca4:	3fd55555 	.word	0x3fd55555
 8004ca8:	db6fabff 	.word	0xdb6fabff
 8004cac:	3fdb6db6 	.word	0x3fdb6db6
 8004cb0:	33333303 	.word	0x33333303
 8004cb4:	3fe33333 	.word	0x3fe33333
 8004cb8:	e0000000 	.word	0xe0000000
 8004cbc:	3feec709 	.word	0x3feec709
 8004cc0:	dc3a03fd 	.word	0xdc3a03fd
 8004cc4:	3feec709 	.word	0x3feec709
 8004cc8:	145b01f5 	.word	0x145b01f5
 8004ccc:	be3e2fe0 	.word	0xbe3e2fe0
 8004cd0:	00000000 	.word	0x00000000
 8004cd4:	3ff00000 	.word	0x3ff00000
 8004cd8:	7ff00000 	.word	0x7ff00000
 8004cdc:	43400000 	.word	0x43400000
 8004ce0:	0003988e 	.word	0x0003988e
 8004ce4:	000bb679 	.word	0x000bb679
 8004ce8:	08005428 	.word	0x08005428
 8004cec:	3ff00000 	.word	0x3ff00000
 8004cf0:	40080000 	.word	0x40080000
 8004cf4:	08005448 	.word	0x08005448
 8004cf8:	08005438 	.word	0x08005438
 8004cfc:	a3b5      	add	r3, pc, #724	; (adr r3, 8004fd4 <__ieee754_pow+0xa3c>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	4640      	mov	r0, r8
 8004d04:	4649      	mov	r1, r9
 8004d06:	f7fb fa6d 	bl	80001e4 <__adddf3>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	ec41 0b1a 	vmov	d10, r0, r1
 8004d10:	462b      	mov	r3, r5
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb fa63 	bl	80001e0 <__aeabi_dsub>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	ec51 0b1a 	vmov	r0, r1, d10
 8004d22:	f7fb fea5 	bl	8000a70 <__aeabi_dcmpgt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f47f adf8 	bne.w	800491c <__ieee754_pow+0x384>
 8004d2c:	4aa4      	ldr	r2, [pc, #656]	; (8004fc0 <__ieee754_pow+0xa28>)
 8004d2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f340 810b 	ble.w	8004f4e <__ieee754_pow+0x9b6>
 8004d38:	151b      	asrs	r3, r3, #20
 8004d3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004d3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004d42:	fa4a f303 	asr.w	r3, sl, r3
 8004d46:	445b      	add	r3, fp
 8004d48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004d4c:	4e9d      	ldr	r6, [pc, #628]	; (8004fc4 <__ieee754_pow+0xa2c>)
 8004d4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004d52:	4116      	asrs	r6, r2
 8004d54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004d58:	2000      	movs	r0, #0
 8004d5a:	ea23 0106 	bic.w	r1, r3, r6
 8004d5e:	f1c2 0214 	rsb	r2, r2, #20
 8004d62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004d66:	fa4a fa02 	asr.w	sl, sl, r2
 8004d6a:	f1bb 0f00 	cmp.w	fp, #0
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	bfb8      	it	lt
 8004d78:	f1ca 0a00 	rsblt	sl, sl, #0
 8004d7c:	f7fb fa30 	bl	80001e0 <__aeabi_dsub>
 8004d80:	ec41 0b19 	vmov	d9, r0, r1
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	ec51 0b19 	vmov	r0, r1, d9
 8004d8c:	f7fb fa2a 	bl	80001e4 <__adddf3>
 8004d90:	2400      	movs	r4, #0
 8004d92:	a379      	add	r3, pc, #484	; (adr r3, 8004f78 <__ieee754_pow+0x9e0>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	4620      	mov	r0, r4
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	f7fb fbd8 	bl	8000550 <__aeabi_dmul>
 8004da0:	ec53 2b19 	vmov	r2, r3, d9
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb fa18 	bl	80001e0 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	f7fb fa12 	bl	80001e0 <__aeabi_dsub>
 8004dbc:	a370      	add	r3, pc, #448	; (adr r3, 8004f80 <__ieee754_pow+0x9e8>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fbc5 	bl	8000550 <__aeabi_dmul>
 8004dc6:	a370      	add	r3, pc, #448	; (adr r3, 8004f88 <__ieee754_pow+0x9f0>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	4680      	mov	r8, r0
 8004dce:	4689      	mov	r9, r1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb fbbc 	bl	8000550 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4649      	mov	r1, r9
 8004de0:	f7fb fa00 	bl	80001e4 <__adddf3>
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb f9f8 	bl	80001e4 <__adddf3>
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	4680      	mov	r8, r0
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	f7fb f9f0 	bl	80001e0 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7fb f9ea 	bl	80001e0 <__aeabi_dsub>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	464b      	mov	r3, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb fb9a 	bl	8000550 <__aeabi_dmul>
 8004e1c:	a35c      	add	r3, pc, #368	; (adr r3, 8004f90 <__ieee754_pow+0x9f8>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	4604      	mov	r4, r0
 8004e24:	460d      	mov	r5, r1
 8004e26:	f7fb fb93 	bl	8000550 <__aeabi_dmul>
 8004e2a:	a35b      	add	r3, pc, #364	; (adr r3, 8004f98 <__ieee754_pow+0xa00>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb f9d6 	bl	80001e0 <__aeabi_dsub>
 8004e34:	4622      	mov	r2, r4
 8004e36:	462b      	mov	r3, r5
 8004e38:	f7fb fb8a 	bl	8000550 <__aeabi_dmul>
 8004e3c:	a358      	add	r3, pc, #352	; (adr r3, 8004fa0 <__ieee754_pow+0xa08>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb f9cf 	bl	80001e4 <__adddf3>
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	f7fb fb81 	bl	8000550 <__aeabi_dmul>
 8004e4e:	a356      	add	r3, pc, #344	; (adr r3, 8004fa8 <__ieee754_pow+0xa10>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb f9c4 	bl	80001e0 <__aeabi_dsub>
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	f7fb fb78 	bl	8000550 <__aeabi_dmul>
 8004e60:	a353      	add	r3, pc, #332	; (adr r3, 8004fb0 <__ieee754_pow+0xa18>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb f9bd 	bl	80001e4 <__adddf3>
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	f7fb fb6f 	bl	8000550 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f7fb f9b1 	bl	80001e0 <__aeabi_dsub>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f7fb fb61 	bl	8000550 <__aeabi_dmul>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	ec41 0b19 	vmov	d9, r0, r1
 8004e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb f9a0 	bl	80001e0 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	ec51 0b19 	vmov	r0, r1, d9
 8004ea8:	f7fb fc7c 	bl	80007a4 <__aeabi_ddiv>
 8004eac:	4632      	mov	r2, r6
 8004eae:	4604      	mov	r4, r0
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb fb4a 	bl	8000550 <__aeabi_dmul>
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	f7fb f990 	bl	80001e4 <__adddf3>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4620      	mov	r0, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	f7fb f988 	bl	80001e0 <__aeabi_dsub>
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f7fb f984 	bl	80001e0 <__aeabi_dsub>
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4602      	mov	r2, r0
 8004edc:	493a      	ldr	r1, [pc, #232]	; (8004fc8 <__ieee754_pow+0xa30>)
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f7fb f97e 	bl	80001e0 <__aeabi_dsub>
 8004ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	da2f      	bge.n	8004f54 <__ieee754_pow+0x9bc>
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	ed9d 0b00 	vldr	d0, [sp]
 8004efa:	f000 f9cd 	bl	8005298 <scalbn>
 8004efe:	ec51 0b10 	vmov	r0, r1, d0
 8004f02:	ec53 2b18 	vmov	r2, r3, d8
 8004f06:	f7ff bbe0 	b.w	80046ca <__ieee754_pow+0x132>
 8004f0a:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <__ieee754_pow+0xa34>)
 8004f0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004f10:	429e      	cmp	r6, r3
 8004f12:	f77f af0b 	ble.w	8004d2c <__ieee754_pow+0x794>
 8004f16:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <__ieee754_pow+0xa38>)
 8004f18:	440b      	add	r3, r1
 8004f1a:	4303      	orrs	r3, r0
 8004f1c:	d00b      	beq.n	8004f36 <__ieee754_pow+0x99e>
 8004f1e:	a326      	add	r3, pc, #152	; (adr r3, 8004fb8 <__ieee754_pow+0xa20>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	ec51 0b18 	vmov	r0, r1, d8
 8004f28:	f7fb fb12 	bl	8000550 <__aeabi_dmul>
 8004f2c:	a322      	add	r3, pc, #136	; (adr r3, 8004fb8 <__ieee754_pow+0xa20>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f7ff bbca 	b.w	80046ca <__ieee754_pow+0x132>
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f7fb f951 	bl	80001e0 <__aeabi_dsub>
 8004f3e:	4642      	mov	r2, r8
 8004f40:	464b      	mov	r3, r9
 8004f42:	f7fb fd8b 	bl	8000a5c <__aeabi_dcmpge>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f aef0 	beq.w	8004d2c <__ieee754_pow+0x794>
 8004f4c:	e7e7      	b.n	8004f1e <__ieee754_pow+0x986>
 8004f4e:	f04f 0a00 	mov.w	sl, #0
 8004f52:	e717      	b.n	8004d84 <__ieee754_pow+0x7ec>
 8004f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	e7d2      	b.n	8004f02 <__ieee754_pow+0x96a>
 8004f5c:	491a      	ldr	r1, [pc, #104]	; (8004fc8 <__ieee754_pow+0xa30>)
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7ff bb9e 	b.w	80046a0 <__ieee754_pow+0x108>
 8004f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f68:	f7ff bb9a 	b.w	80046a0 <__ieee754_pow+0x108>
 8004f6c:	9000      	str	r0, [sp, #0]
 8004f6e:	f7ff bb76 	b.w	800465e <__ieee754_pow+0xc6>
 8004f72:	2100      	movs	r1, #0
 8004f74:	f7ff bb60 	b.w	8004638 <__ieee754_pow+0xa0>
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	3fe62e43 	.word	0x3fe62e43
 8004f80:	fefa39ef 	.word	0xfefa39ef
 8004f84:	3fe62e42 	.word	0x3fe62e42
 8004f88:	0ca86c39 	.word	0x0ca86c39
 8004f8c:	be205c61 	.word	0xbe205c61
 8004f90:	72bea4d0 	.word	0x72bea4d0
 8004f94:	3e663769 	.word	0x3e663769
 8004f98:	c5d26bf1 	.word	0xc5d26bf1
 8004f9c:	3ebbbd41 	.word	0x3ebbbd41
 8004fa0:	af25de2c 	.word	0xaf25de2c
 8004fa4:	3f11566a 	.word	0x3f11566a
 8004fa8:	16bebd93 	.word	0x16bebd93
 8004fac:	3f66c16c 	.word	0x3f66c16c
 8004fb0:	5555553e 	.word	0x5555553e
 8004fb4:	3fc55555 	.word	0x3fc55555
 8004fb8:	c2f8f359 	.word	0xc2f8f359
 8004fbc:	01a56e1f 	.word	0x01a56e1f
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	000fffff 	.word	0x000fffff
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	4090cbff 	.word	0x4090cbff
 8004fd0:	3f6f3400 	.word	0x3f6f3400
 8004fd4:	652b82fe 	.word	0x652b82fe
 8004fd8:	3c971547 	.word	0x3c971547

08004fdc <__ieee754_sqrt>:
 8004fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe0:	ec55 4b10 	vmov	r4, r5, d0
 8004fe4:	4e56      	ldr	r6, [pc, #344]	; (8005140 <__ieee754_sqrt+0x164>)
 8004fe6:	43ae      	bics	r6, r5
 8004fe8:	ee10 0a10 	vmov	r0, s0
 8004fec:	ee10 3a10 	vmov	r3, s0
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	462a      	mov	r2, r5
 8004ff4:	d110      	bne.n	8005018 <__ieee754_sqrt+0x3c>
 8004ff6:	ee10 2a10 	vmov	r2, s0
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	f7fb faa8 	bl	8000550 <__aeabi_dmul>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4620      	mov	r0, r4
 8005006:	4629      	mov	r1, r5
 8005008:	f7fb f8ec 	bl	80001e4 <__adddf3>
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	ec45 4b10 	vmov	d0, r4, r5
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	2d00      	cmp	r5, #0
 800501a:	dc10      	bgt.n	800503e <__ieee754_sqrt+0x62>
 800501c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005020:	4330      	orrs	r0, r6
 8005022:	d0f5      	beq.n	8005010 <__ieee754_sqrt+0x34>
 8005024:	b15d      	cbz	r5, 800503e <__ieee754_sqrt+0x62>
 8005026:	ee10 2a10 	vmov	r2, s0
 800502a:	462b      	mov	r3, r5
 800502c:	ee10 0a10 	vmov	r0, s0
 8005030:	f7fb f8d6 	bl	80001e0 <__aeabi_dsub>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	f7fb fbb4 	bl	80007a4 <__aeabi_ddiv>
 800503c:	e7e6      	b.n	800500c <__ieee754_sqrt+0x30>
 800503e:	1509      	asrs	r1, r1, #20
 8005040:	d076      	beq.n	8005130 <__ieee754_sqrt+0x154>
 8005042:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005046:	07ce      	lsls	r6, r1, #31
 8005048:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800504c:	bf5e      	ittt	pl
 800504e:	0fda      	lsrpl	r2, r3, #31
 8005050:	005b      	lslpl	r3, r3, #1
 8005052:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005056:	0fda      	lsrs	r2, r3, #31
 8005058:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800505c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005060:	2000      	movs	r0, #0
 8005062:	106d      	asrs	r5, r5, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	f04f 0e16 	mov.w	lr, #22
 800506a:	4684      	mov	ip, r0
 800506c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005070:	eb0c 0401 	add.w	r4, ip, r1
 8005074:	4294      	cmp	r4, r2
 8005076:	bfde      	ittt	le
 8005078:	1b12      	suble	r2, r2, r4
 800507a:	eb04 0c01 	addle.w	ip, r4, r1
 800507e:	1840      	addle	r0, r0, r1
 8005080:	0052      	lsls	r2, r2, #1
 8005082:	f1be 0e01 	subs.w	lr, lr, #1
 8005086:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800508a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800508e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005092:	d1ed      	bne.n	8005070 <__ieee754_sqrt+0x94>
 8005094:	4671      	mov	r1, lr
 8005096:	2720      	movs	r7, #32
 8005098:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800509c:	4562      	cmp	r2, ip
 800509e:	eb04 060e 	add.w	r6, r4, lr
 80050a2:	dc02      	bgt.n	80050aa <__ieee754_sqrt+0xce>
 80050a4:	d113      	bne.n	80050ce <__ieee754_sqrt+0xf2>
 80050a6:	429e      	cmp	r6, r3
 80050a8:	d811      	bhi.n	80050ce <__ieee754_sqrt+0xf2>
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	eb06 0e04 	add.w	lr, r6, r4
 80050b0:	da43      	bge.n	800513a <__ieee754_sqrt+0x15e>
 80050b2:	f1be 0f00 	cmp.w	lr, #0
 80050b6:	db40      	blt.n	800513a <__ieee754_sqrt+0x15e>
 80050b8:	f10c 0801 	add.w	r8, ip, #1
 80050bc:	eba2 020c 	sub.w	r2, r2, ip
 80050c0:	429e      	cmp	r6, r3
 80050c2:	bf88      	it	hi
 80050c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80050c8:	1b9b      	subs	r3, r3, r6
 80050ca:	4421      	add	r1, r4
 80050cc:	46c4      	mov	ip, r8
 80050ce:	0052      	lsls	r2, r2, #1
 80050d0:	3f01      	subs	r7, #1
 80050d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80050d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80050da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050de:	d1dd      	bne.n	800509c <__ieee754_sqrt+0xc0>
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d006      	beq.n	80050f2 <__ieee754_sqrt+0x116>
 80050e4:	1c4c      	adds	r4, r1, #1
 80050e6:	bf13      	iteet	ne
 80050e8:	3101      	addne	r1, #1
 80050ea:	3001      	addeq	r0, #1
 80050ec:	4639      	moveq	r1, r7
 80050ee:	f021 0101 	bicne.w	r1, r1, #1
 80050f2:	1043      	asrs	r3, r0, #1
 80050f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80050f8:	0849      	lsrs	r1, r1, #1
 80050fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80050fe:	07c2      	lsls	r2, r0, #31
 8005100:	bf48      	it	mi
 8005102:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005106:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800510a:	460c      	mov	r4, r1
 800510c:	463d      	mov	r5, r7
 800510e:	e77f      	b.n	8005010 <__ieee754_sqrt+0x34>
 8005110:	0ada      	lsrs	r2, r3, #11
 8005112:	3815      	subs	r0, #21
 8005114:	055b      	lsls	r3, r3, #21
 8005116:	2a00      	cmp	r2, #0
 8005118:	d0fa      	beq.n	8005110 <__ieee754_sqrt+0x134>
 800511a:	02d7      	lsls	r7, r2, #11
 800511c:	d50a      	bpl.n	8005134 <__ieee754_sqrt+0x158>
 800511e:	f1c1 0420 	rsb	r4, r1, #32
 8005122:	fa23 f404 	lsr.w	r4, r3, r4
 8005126:	1e4d      	subs	r5, r1, #1
 8005128:	408b      	lsls	r3, r1
 800512a:	4322      	orrs	r2, r4
 800512c:	1b41      	subs	r1, r0, r5
 800512e:	e788      	b.n	8005042 <__ieee754_sqrt+0x66>
 8005130:	4608      	mov	r0, r1
 8005132:	e7f0      	b.n	8005116 <__ieee754_sqrt+0x13a>
 8005134:	0052      	lsls	r2, r2, #1
 8005136:	3101      	adds	r1, #1
 8005138:	e7ef      	b.n	800511a <__ieee754_sqrt+0x13e>
 800513a:	46e0      	mov	r8, ip
 800513c:	e7be      	b.n	80050bc <__ieee754_sqrt+0xe0>
 800513e:	bf00      	nop
 8005140:	7ff00000 	.word	0x7ff00000

08005144 <fabs>:
 8005144:	ec51 0b10 	vmov	r0, r1, d0
 8005148:	ee10 2a10 	vmov	r2, s0
 800514c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005150:	ec43 2b10 	vmov	d0, r2, r3
 8005154:	4770      	bx	lr

08005156 <finite>:
 8005156:	b082      	sub	sp, #8
 8005158:	ed8d 0b00 	vstr	d0, [sp]
 800515c:	9801      	ldr	r0, [sp, #4]
 800515e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005162:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005166:	0fc0      	lsrs	r0, r0, #31
 8005168:	b002      	add	sp, #8
 800516a:	4770      	bx	lr
 800516c:	0000      	movs	r0, r0
	...

08005170 <nan>:
 8005170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005178 <nan+0x8>
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	00000000 	.word	0x00000000
 800517c:	7ff80000 	.word	0x7ff80000

08005180 <rint>:
 8005180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005182:	ec51 0b10 	vmov	r0, r1, d0
 8005186:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800518a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800518e:	2e13      	cmp	r6, #19
 8005190:	ee10 4a10 	vmov	r4, s0
 8005194:	460b      	mov	r3, r1
 8005196:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800519a:	dc58      	bgt.n	800524e <rint+0xce>
 800519c:	2e00      	cmp	r6, #0
 800519e:	da2b      	bge.n	80051f8 <rint+0x78>
 80051a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80051a4:	4302      	orrs	r2, r0
 80051a6:	d023      	beq.n	80051f0 <rint+0x70>
 80051a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80051ac:	4302      	orrs	r2, r0
 80051ae:	4254      	negs	r4, r2
 80051b0:	4314      	orrs	r4, r2
 80051b2:	0c4b      	lsrs	r3, r1, #17
 80051b4:	0b24      	lsrs	r4, r4, #12
 80051b6:	045b      	lsls	r3, r3, #17
 80051b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80051bc:	ea44 0103 	orr.w	r1, r4, r3
 80051c0:	4b32      	ldr	r3, [pc, #200]	; (800528c <rint+0x10c>)
 80051c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80051c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb f807 	bl	80001e4 <__adddf3>
 80051d6:	e9cd 0100 	strd	r0, r1, [sp]
 80051da:	463b      	mov	r3, r7
 80051dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e0:	4632      	mov	r2, r6
 80051e2:	f7fa fffd 	bl	80001e0 <__aeabi_dsub>
 80051e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80051ee:	4639      	mov	r1, r7
 80051f0:	ec41 0b10 	vmov	d0, r0, r1
 80051f4:	b003      	add	sp, #12
 80051f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <rint+0x110>)
 80051fa:	4132      	asrs	r2, r6
 80051fc:	ea01 0702 	and.w	r7, r1, r2
 8005200:	4307      	orrs	r7, r0
 8005202:	d0f5      	beq.n	80051f0 <rint+0x70>
 8005204:	0851      	lsrs	r1, r2, #1
 8005206:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800520a:	4314      	orrs	r4, r2
 800520c:	d00c      	beq.n	8005228 <rint+0xa8>
 800520e:	ea23 0201 	bic.w	r2, r3, r1
 8005212:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005216:	2e13      	cmp	r6, #19
 8005218:	fa43 f606 	asr.w	r6, r3, r6
 800521c:	bf0c      	ite	eq
 800521e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005222:	2400      	movne	r4, #0
 8005224:	ea42 0306 	orr.w	r3, r2, r6
 8005228:	4918      	ldr	r1, [pc, #96]	; (800528c <rint+0x10c>)
 800522a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800522e:	4622      	mov	r2, r4
 8005230:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fa ffd4 	bl	80001e4 <__adddf3>
 800523c:	e9cd 0100 	strd	r0, r1, [sp]
 8005240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	f7fa ffca 	bl	80001e0 <__aeabi_dsub>
 800524c:	e7d0      	b.n	80051f0 <rint+0x70>
 800524e:	2e33      	cmp	r6, #51	; 0x33
 8005250:	dd07      	ble.n	8005262 <rint+0xe2>
 8005252:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005256:	d1cb      	bne.n	80051f0 <rint+0x70>
 8005258:	ee10 2a10 	vmov	r2, s0
 800525c:	f7fa ffc2 	bl	80001e4 <__adddf3>
 8005260:	e7c6      	b.n	80051f0 <rint+0x70>
 8005262:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005266:	f04f 36ff 	mov.w	r6, #4294967295
 800526a:	40d6      	lsrs	r6, r2
 800526c:	4230      	tst	r0, r6
 800526e:	d0bf      	beq.n	80051f0 <rint+0x70>
 8005270:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005274:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005278:	bf1f      	itttt	ne
 800527a:	ea24 0101 	bicne.w	r1, r4, r1
 800527e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005282:	fa44 f202 	asrne.w	r2, r4, r2
 8005286:	ea41 0402 	orrne.w	r4, r1, r2
 800528a:	e7cd      	b.n	8005228 <rint+0xa8>
 800528c:	08005458 	.word	0x08005458
 8005290:	000fffff 	.word	0x000fffff
 8005294:	00000000 	.word	0x00000000

08005298 <scalbn>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	ec55 4b10 	vmov	r4, r5, d0
 800529e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052a2:	4606      	mov	r6, r0
 80052a4:	462b      	mov	r3, r5
 80052a6:	b99a      	cbnz	r2, 80052d0 <scalbn+0x38>
 80052a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052ac:	4323      	orrs	r3, r4
 80052ae:	d036      	beq.n	800531e <scalbn+0x86>
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <scalbn+0x100>)
 80052b2:	4629      	mov	r1, r5
 80052b4:	ee10 0a10 	vmov	r0, s0
 80052b8:	2200      	movs	r2, #0
 80052ba:	f7fb f949 	bl	8000550 <__aeabi_dmul>
 80052be:	4b37      	ldr	r3, [pc, #220]	; (800539c <scalbn+0x104>)
 80052c0:	429e      	cmp	r6, r3
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	da10      	bge.n	80052ea <scalbn+0x52>
 80052c8:	a32b      	add	r3, pc, #172	; (adr r3, 8005378 <scalbn+0xe0>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	e03a      	b.n	8005346 <scalbn+0xae>
 80052d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d10c      	bne.n	80052f2 <scalbn+0x5a>
 80052d8:	ee10 2a10 	vmov	r2, s0
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	f7fa ff80 	bl	80001e4 <__adddf3>
 80052e4:	4604      	mov	r4, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	e019      	b.n	800531e <scalbn+0x86>
 80052ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80052ee:	460b      	mov	r3, r1
 80052f0:	3a36      	subs	r2, #54	; 0x36
 80052f2:	4432      	add	r2, r6
 80052f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80052f8:	428a      	cmp	r2, r1
 80052fa:	dd08      	ble.n	800530e <scalbn+0x76>
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	a120      	add	r1, pc, #128	; (adr r1, 8005380 <scalbn+0xe8>)
 8005300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005304:	da1c      	bge.n	8005340 <scalbn+0xa8>
 8005306:	a120      	add	r1, pc, #128	; (adr r1, 8005388 <scalbn+0xf0>)
 8005308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530c:	e018      	b.n	8005340 <scalbn+0xa8>
 800530e:	2a00      	cmp	r2, #0
 8005310:	dd08      	ble.n	8005324 <scalbn+0x8c>
 8005312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800531a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800531e:	ec45 4b10 	vmov	d0, r4, r5
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005328:	da19      	bge.n	800535e <scalbn+0xc6>
 800532a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800532e:	429e      	cmp	r6, r3
 8005330:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005334:	dd0a      	ble.n	800534c <scalbn+0xb4>
 8005336:	a112      	add	r1, pc, #72	; (adr r1, 8005380 <scalbn+0xe8>)
 8005338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e2      	bne.n	8005306 <scalbn+0x6e>
 8005340:	a30f      	add	r3, pc, #60	; (adr r3, 8005380 <scalbn+0xe8>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f7fb f903 	bl	8000550 <__aeabi_dmul>
 800534a:	e7cb      	b.n	80052e4 <scalbn+0x4c>
 800534c:	a10a      	add	r1, pc, #40	; (adr r1, 8005378 <scalbn+0xe0>)
 800534e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0b8      	beq.n	80052c8 <scalbn+0x30>
 8005356:	a10e      	add	r1, pc, #56	; (adr r1, 8005390 <scalbn+0xf8>)
 8005358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800535c:	e7b4      	b.n	80052c8 <scalbn+0x30>
 800535e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005362:	3236      	adds	r2, #54	; 0x36
 8005364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005368:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800536c:	4620      	mov	r0, r4
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <scalbn+0x108>)
 8005370:	2200      	movs	r2, #0
 8005372:	e7e8      	b.n	8005346 <scalbn+0xae>
 8005374:	f3af 8000 	nop.w
 8005378:	c2f8f359 	.word	0xc2f8f359
 800537c:	01a56e1f 	.word	0x01a56e1f
 8005380:	8800759c 	.word	0x8800759c
 8005384:	7e37e43c 	.word	0x7e37e43c
 8005388:	8800759c 	.word	0x8800759c
 800538c:	fe37e43c 	.word	0xfe37e43c
 8005390:	c2f8f359 	.word	0xc2f8f359
 8005394:	81a56e1f 	.word	0x81a56e1f
 8005398:	43500000 	.word	0x43500000
 800539c:	ffff3cb0 	.word	0xffff3cb0
 80053a0:	3c900000 	.word	0x3c900000

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

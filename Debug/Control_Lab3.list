
Control_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080054f0  080054f0  000154f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005588  08005588  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000070  08005600  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08005600  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d15c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192a  00000000  00000000  0002d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e72  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb70  00000000  00000000  00046082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3c1  00000000  00000000  00052bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dffb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003720  00000000  00000000  000e0004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080054d4 	.word	0x080054d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080054d4 	.word	0x080054d4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <Create_Matrix>:
}Matrix;

Matrix A, C, R, Q, x_k0, x_k1, z_k, xp_k, pp_k, p_k0, p_k1, A_T, C_T, y_k, s_k, s_k_inv, K, I, test;

Matrix Create_Matrix(int rows, int cols, double b[9])
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b09e      	sub	sp, #120	; 0x78
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
	Matrix a;
	a.rows = rows;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	65bb      	str	r3, [r7, #88]	; 0x58
	a.cols = cols;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	65fb      	str	r3, [r7, #92]	; 0x5c

	for (int i = 0; i < 3; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	677b      	str	r3, [r7, #116]	; 0x74
 8000e6e:	e01c      	b.n	8000eaa <Create_Matrix+0x56>
	{
		for (int j = 0; j < 3; j++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	673b      	str	r3, [r7, #112]	; 0x70
 8000e74:	e013      	b.n	8000e9e <Create_Matrix+0x4a>
		{
			a.data[i][j] = 0;
 8000e76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	3378      	adds	r3, #120	; 0x78
 8000e86:	443b      	add	r3, r7
 8000e88:	f1a3 0168 	sub.w	r1, r3, #104	; 0x68
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 8000e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	673b      	str	r3, [r7, #112]	; 0x70
 8000e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	dde8      	ble.n	8000e76 <Create_Matrix+0x22>
	for (int i = 0; i < 3; i++)
 8000ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	677b      	str	r3, [r7, #116]	; 0x74
 8000eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	dddf      	ble.n	8000e70 <Create_Matrix+0x1c>
		}
	}

	int n = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; i < rows; i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000eb8:	e032      	b.n	8000f20 <Create_Matrix+0xcc>
	{
		for (int j = 0; j < cols; j++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8000ebe:	e028      	b.n	8000f12 <Create_Matrix+0xbe>
		{
			a.data[i][j] = 0;
 8000ec0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	3378      	adds	r3, #120	; 0x78
 8000ed0:	443b      	add	r3, r7
 8000ed2:	f1a3 0168 	sub.w	r1, r3, #104	; 0x68
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	e9c1 2300 	strd	r2, r3, [r1]
			a.data[i][j] = b[n];
 8000ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	4413      	add	r3, r2
 8000eea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	3378      	adds	r3, #120	; 0x78
 8000efe:	443b      	add	r3, r7
 8000f00:	3b68      	subs	r3, #104	; 0x68
 8000f02:	e9c3 0100 	strd	r0, r1, [r3]
			n++;
 8000f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f08:	3301      	adds	r3, #1
 8000f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (int j = 0; j < cols; j++)
 8000f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f0e:	3301      	adds	r3, #1
 8000f10:	667b      	str	r3, [r7, #100]	; 0x64
 8000f12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbd2      	blt.n	8000ec0 <Create_Matrix+0x6c>
	for (int i = 0; i < rows; i++)
 8000f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbc8      	blt.n	8000eba <Create_Matrix+0x66>
		}
	}
	return a;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2250      	movs	r2, #80	; 0x50
 8000f32:	4619      	mov	r1, r3
 8000f34:	f003 fb9c 	bl	8004670 <memcpy>
}
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	3778      	adds	r7, #120	; 0x78
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <Multiply>:

Matrix Multiply(Matrix a, Matrix b)
{
 8000f40:	b082      	sub	sp, #8
 8000f42:	b5b0      	push	{r4, r5, r7, lr}
 8000f44:	b09c      	sub	sp, #112	; 0x70
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000f4e:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 8000f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = b.cols;
 8000f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
	for (int i = 0; i < 3; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f62:	e01c      	b.n	8000f9e <Multiply+0x5e>
	{
		for (int j = 0; j < 3; j++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f68:	e013      	b.n	8000f92 <Multiply+0x52>
		{
			c.data[i][j] = 0;
 8000f6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	3370      	adds	r3, #112	; 0x70
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f1a3 0168 	sub.w	r1, r3, #104	; 0x68
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 8000f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f8e:	3301      	adds	r3, #1
 8000f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	dde8      	ble.n	8000f6a <Multiply+0x2a>
	for (int i = 0; i < 3; i++)
 8000f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	dddf      	ble.n	8000f64 <Multiply+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8000fa8:	e053      	b.n	8001052 <Multiply+0x112>
	{
		for (int j = 0; j < b.cols; j++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	663b      	str	r3, [r7, #96]	; 0x60
 8000fae:	e048      	b.n	8001042 <Multiply+0x102>
		{
			for (int k = 0; k < b.rows; k++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fb4:	e03d      	b.n	8001032 <Multiply+0xf2>
			{
				c.data[i][j] += a.data[i][k] * b.data[k][j];
 8000fb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	3370      	adds	r3, #112	; 0x70
 8000fc6:	443b      	add	r3, r7
 8000fc8:	3b68      	subs	r3, #104	; 0x68
 8000fca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	3380      	adds	r3, #128	; 0x80
 8000fde:	443b      	add	r3, r7
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	3380      	adds	r3, #128	; 0x80
 8000ff4:	443b      	add	r3, r7
 8000ff6:	3350      	adds	r3, #80	; 0x50
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff faa8 	bl	8000550 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff f8ec 	bl	80001e4 <__adddf3>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	3370      	adds	r3, #112	; 0x70
 8001024:	443b      	add	r3, r7
 8001026:	3b68      	subs	r3, #104	; 0x68
 8001028:	e9c3 0100 	strd	r0, r1, [r3]
			for (int k = 0; k < b.rows; k++)
 800102c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800102e:	3301      	adds	r3, #1
 8001030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001032:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001036:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001038:	429a      	cmp	r2, r3
 800103a:	dbbc      	blt.n	8000fb6 <Multiply+0x76>
		for (int j = 0; j < b.cols; j++)
 800103c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800103e:	3301      	adds	r3, #1
 8001040:	663b      	str	r3, [r7, #96]	; 0x60
 8001042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001046:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001048:	429a      	cmp	r2, r3
 800104a:	dbb1      	blt.n	8000fb0 <Multiply+0x70>
	for (int i = 0; i < a.rows; i++)
 800104c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800104e:	3301      	adds	r3, #1
 8001050:	667b      	str	r3, [r7, #100]	; 0x64
 8001052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001058:	429a      	cmp	r2, r3
 800105a:	dba6      	blt.n	8000faa <Multiply+0x6a>
			}
		}
	}
	return c;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	2250      	movs	r2, #80	; 0x50
 8001066:	4619      	mov	r1, r3
 8001068:	f003 fb02 	bl	8004670 <memcpy>

}
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	3770      	adds	r7, #112	; 0x70
 8001070:	46bd      	mov	sp, r7
 8001072:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001076:	b002      	add	sp, #8
 8001078:	4770      	bx	lr

0800107a <Sum>:

Matrix Sum(Matrix a, Matrix b)
{
 800107a:	b082      	sub	sp, #8
 800107c:	b580      	push	{r7, lr}
 800107e:	b09a      	sub	sp, #104	; 0x68
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001088:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 800108c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = b.cols;
 8001092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001096:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	667b      	str	r3, [r7, #100]	; 0x64
 800109c:	e01c      	b.n	80010d8 <Sum+0x5e>
	{
		for (int j = 0; j < 3; j++)
 800109e:	2300      	movs	r3, #0
 80010a0:	663b      	str	r3, [r7, #96]	; 0x60
 80010a2:	e013      	b.n	80010cc <Sum+0x52>
		{
			c.data[i][j] = 0;
 80010a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	3368      	adds	r3, #104	; 0x68
 80010b4:	443b      	add	r3, r7
 80010b6:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80010c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010c8:	3301      	adds	r3, #1
 80010ca:	663b      	str	r3, [r7, #96]	; 0x60
 80010cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	dde8      	ble.n	80010a4 <Sum+0x2a>
	for (int i = 0; i < 3; i++)
 80010d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010d4:	3301      	adds	r3, #1
 80010d6:	667b      	str	r3, [r7, #100]	; 0x64
 80010d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010da:	2b02      	cmp	r3, #2
 80010dc:	dddf      	ble.n	800109e <Sum+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010e2:	e036      	b.n	8001152 <Sum+0xd8>
	{
		for (int j = 0; j < a.cols; j++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80010e8:	e02b      	b.n	8001142 <Sum+0xc8>
		{
			c.data[i][j] = a.data[i][j] + b.data[i][j];
 80010ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	3370      	adds	r3, #112	; 0x70
 80010fa:	443b      	add	r3, r7
 80010fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	3370      	adds	r3, #112	; 0x70
 8001110:	443b      	add	r3, r7
 8001112:	3350      	adds	r3, #80	; 0x50
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff f864 	bl	80001e4 <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	3368      	adds	r3, #104	; 0x68
 8001134:	443b      	add	r3, r7
 8001136:	3b60      	subs	r3, #96	; 0x60
 8001138:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 800113c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800113e:	3301      	adds	r3, #1
 8001140:	65bb      	str	r3, [r7, #88]	; 0x58
 8001142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001148:	429a      	cmp	r2, r3
 800114a:	dbce      	blt.n	80010ea <Sum+0x70>
	for (int i = 0; i < a.rows; i++)
 800114c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114e:	3301      	adds	r3, #1
 8001150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001156:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001158:	429a      	cmp	r2, r3
 800115a:	dbc3      	blt.n	80010e4 <Sum+0x6a>
		}
	}

	return c;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	2250      	movs	r2, #80	; 0x50
 8001166:	4619      	mov	r1, r3
 8001168:	f003 fa82 	bl	8004670 <memcpy>
}
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	3768      	adds	r7, #104	; 0x68
 8001170:	46bd      	mov	sp, r7
 8001172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001176:	b002      	add	sp, #8
 8001178:	4770      	bx	lr

0800117a <Minus>:

Matrix Minus(Matrix a, Matrix b)
{
 800117a:	b082      	sub	sp, #8
 800117c:	b580      	push	{r7, lr}
 800117e:	b09a      	sub	sp, #104	; 0x68
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001188:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 800118c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001190:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = b.cols;
 8001192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001196:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	667b      	str	r3, [r7, #100]	; 0x64
 800119c:	e01c      	b.n	80011d8 <Minus+0x5e>
	{
		for (int j = 0; j < 3; j++)
 800119e:	2300      	movs	r3, #0
 80011a0:	663b      	str	r3, [r7, #96]	; 0x60
 80011a2:	e013      	b.n	80011cc <Minus+0x52>
		{
			c.data[i][j] = 0;
 80011a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	3368      	adds	r3, #104	; 0x68
 80011b4:	443b      	add	r3, r7
 80011b6:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80011c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011c8:	3301      	adds	r3, #1
 80011ca:	663b      	str	r3, [r7, #96]	; 0x60
 80011cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	dde8      	ble.n	80011a4 <Minus+0x2a>
	for (int i = 0; i < 3; i++)
 80011d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011d4:	3301      	adds	r3, #1
 80011d6:	667b      	str	r3, [r7, #100]	; 0x64
 80011d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011da:	2b02      	cmp	r3, #2
 80011dc:	dddf      	ble.n	800119e <Minus+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011e2:	e036      	b.n	8001252 <Minus+0xd8>
	{
		for (int j = 0; j < a.cols; j++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80011e8:	e02b      	b.n	8001242 <Minus+0xc8>
		{
			c.data[i][j] = a.data[i][j] - b.data[i][j];
 80011ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	3370      	adds	r3, #112	; 0x70
 80011fa:	443b      	add	r3, r7
 80011fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	3370      	adds	r3, #112	; 0x70
 8001210:	443b      	add	r3, r7
 8001212:	3350      	adds	r3, #80	; 0x50
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7fe ffe2 	bl	80001e0 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	3368      	adds	r3, #104	; 0x68
 8001234:	443b      	add	r3, r7
 8001236:	3b60      	subs	r3, #96	; 0x60
 8001238:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 800123c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800123e:	3301      	adds	r3, #1
 8001240:	65bb      	str	r3, [r7, #88]	; 0x58
 8001242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001248:	429a      	cmp	r2, r3
 800124a:	dbce      	blt.n	80011ea <Minus+0x70>
	for (int i = 0; i < a.rows; i++)
 800124c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124e:	3301      	adds	r3, #1
 8001250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001256:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001258:	429a      	cmp	r2, r3
 800125a:	dbc3      	blt.n	80011e4 <Minus+0x6a>
		}
	}

	return c;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	2250      	movs	r2, #80	; 0x50
 8001266:	4619      	mov	r1, r3
 8001268:	f003 fa02 	bl	8004670 <memcpy>
}
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	3768      	adds	r7, #104	; 0x68
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001276:	b002      	add	sp, #8
 8001278:	4770      	bx	lr

0800127a <Transpose>:

Matrix Transpose(Matrix a)
{
 800127a:	b082      	sub	sp, #8
 800127c:	b580      	push	{r7, lr}
 800127e:	b09a      	sub	sp, #104	; 0x68
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001288:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 800128c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001290:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = a.cols;
 8001292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001296:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 8001298:	2300      	movs	r3, #0
 800129a:	667b      	str	r3, [r7, #100]	; 0x64
 800129c:	e01c      	b.n	80012d8 <Transpose+0x5e>
	{
		for (int j = 0; j < 3; j++)
 800129e:	2300      	movs	r3, #0
 80012a0:	663b      	str	r3, [r7, #96]	; 0x60
 80012a2:	e013      	b.n	80012cc <Transpose+0x52>
		{
			c.data[i][j] = 0;
 80012a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	3368      	adds	r3, #104	; 0x68
 80012b4:	443b      	add	r3, r7
 80012b6:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80012c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012c8:	3301      	adds	r3, #1
 80012ca:	663b      	str	r3, [r7, #96]	; 0x60
 80012cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	dde8      	ble.n	80012a4 <Transpose+0x2a>
	for (int i = 0; i < 3; i++)
 80012d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012d4:	3301      	adds	r3, #1
 80012d6:	667b      	str	r3, [r7, #100]	; 0x64
 80012d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012da:	2b02      	cmp	r3, #2
 80012dc:	dddf      	ble.n	800129e <Transpose+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012e2:	e024      	b.n	800132e <Transpose+0xb4>
	{
		for (int j = 0; j < a.cols; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80012e8:	e019      	b.n	800131e <Transpose+0xa4>
		{
			c.data[i][j] = a.data[j][i];
 80012ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	3370      	adds	r3, #112	; 0x70
 80012fa:	443b      	add	r3, r7
 80012fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001300:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	3368      	adds	r3, #104	; 0x68
 8001310:	443b      	add	r3, r7
 8001312:	3b60      	subs	r3, #96	; 0x60
 8001314:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 8001318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800131a:	3301      	adds	r3, #1
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
 800131e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001324:	429a      	cmp	r2, r3
 8001326:	dbe0      	blt.n	80012ea <Transpose+0x70>
	for (int i = 0; i < a.rows; i++)
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	3301      	adds	r3, #1
 800132c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800132e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001334:	429a      	cmp	r2, r3
 8001336:	dbd5      	blt.n	80012e4 <Transpose+0x6a>
		}
	}
	return c;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2250      	movs	r2, #80	; 0x50
 8001342:	4619      	mov	r1, r3
 8001344:	f003 f994 	bl	8004670 <memcpy>
}
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	3768      	adds	r7, #104	; 0x68
 800134c:	46bd      	mov	sp, r7
 800134e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001352:	b002      	add	sp, #8
 8001354:	4770      	bx	lr
	...

08001358 <Inverse>:

Matrix Inverse(Matrix a)
{
 8001358:	b082      	sub	sp, #8
 800135a:	b580      	push	{r7, lr}
 800135c:	b09a      	sub	sp, #104	; 0x68
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001366:	e881 000c 	stmia.w	r1, {r2, r3}
	//this function is for only 1x1 matrix
	Matrix c;
	c.rows = a.rows;
 800136a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800136e:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = a.cols;
 8001370:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001374:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	667b      	str	r3, [r7, #100]	; 0x64
 800137a:	e01c      	b.n	80013b6 <Inverse+0x5e>
	{
		for (int j = 0; j < 3; j++)
 800137c:	2300      	movs	r3, #0
 800137e:	663b      	str	r3, [r7, #96]	; 0x60
 8001380:	e013      	b.n	80013aa <Inverse+0x52>
		{
			c.data[i][j] = 0;
 8001382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	3368      	adds	r3, #104	; 0x68
 8001392:	443b      	add	r3, r7
 8001394:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 80013a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a6:	3301      	adds	r3, #1
 80013a8:	663b      	str	r3, [r7, #96]	; 0x60
 80013aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	dde8      	ble.n	8001382 <Inverse+0x2a>
	for (int i = 0; i < 3; i++)
 80013b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b2:	3301      	adds	r3, #1
 80013b4:	667b      	str	r3, [r7, #100]	; 0x64
 80013b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dddf      	ble.n	800137c <Inverse+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013c0:	e02d      	b.n	800141e <Inverse+0xc6>
	{
		for (int j = 0; j < a.cols; j++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80013c6:	e022      	b.n	800140e <Inverse+0xb6>
		{
			c.data[i][j] = 1/(a.data[i][j]);
 80013c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	3370      	adds	r3, #112	; 0x70
 80013d8:	443b      	add	r3, r7
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	4919      	ldr	r1, [pc, #100]	; (8001448 <Inverse+0xf0>)
 80013e4:	f7ff f9de 	bl	80007a4 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	3368      	adds	r3, #104	; 0x68
 8001400:	443b      	add	r3, r7
 8001402:	3b60      	subs	r3, #96	; 0x60
 8001404:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 8001408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800140a:	3301      	adds	r3, #1
 800140c:	65bb      	str	r3, [r7, #88]	; 0x58
 800140e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001414:	429a      	cmp	r2, r3
 8001416:	dbd7      	blt.n	80013c8 <Inverse+0x70>
	for (int i = 0; i < a.rows; i++)
 8001418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141a:	3301      	adds	r3, #1
 800141c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800141e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001422:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001424:	429a      	cmp	r2, r3
 8001426:	dbcc      	blt.n	80013c2 <Inverse+0x6a>
		}
	}
	return c;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	2250      	movs	r2, #80	; 0x50
 8001432:	4619      	mov	r1, r3
 8001434:	f003 f91c 	bl	8004670 <memcpy>
}
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	3768      	adds	r7, #104	; 0x68
 800143c:	46bd      	mov	sp, r7
 800143e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001442:	b002      	add	sp, #8
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	3ff00000 	.word	0x3ff00000

0800144c <Store>:

Matrix Store(Matrix a)
{
 800144c:	b082      	sub	sp, #8
 800144e:	b580      	push	{r7, lr}
 8001450:	b09a      	sub	sp, #104	; 0x68
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800145a:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix c;
	c.rows = a.rows;
 800145e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001462:	653b      	str	r3, [r7, #80]	; 0x50
	c.cols = a.cols;
 8001464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001468:	657b      	str	r3, [r7, #84]	; 0x54

	for (int i = 0; i < 3; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	667b      	str	r3, [r7, #100]	; 0x64
 800146e:	e01c      	b.n	80014aa <Store+0x5e>
	{
		for (int j = 0; j < 3; j++)
 8001470:	2300      	movs	r3, #0
 8001472:	663b      	str	r3, [r7, #96]	; 0x60
 8001474:	e013      	b.n	800149e <Store+0x52>
		{
			c.data[i][j] = 0;
 8001476:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	3368      	adds	r3, #104	; 0x68
 8001486:	443b      	add	r3, r7
 8001488:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; j++)
 8001498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800149a:	3301      	adds	r3, #1
 800149c:	663b      	str	r3, [r7, #96]	; 0x60
 800149e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	dde8      	ble.n	8001476 <Store+0x2a>
	for (int i = 0; i < 3; i++)
 80014a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a6:	3301      	adds	r3, #1
 80014a8:	667b      	str	r3, [r7, #100]	; 0x64
 80014aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	dddf      	ble.n	8001470 <Store+0x24>
		}
	}

	for (int i = 0; i < a.rows; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014b4:	e024      	b.n	8001500 <Store+0xb4>
	{
		for (int j = 0; j < a.cols; j++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80014ba:	e019      	b.n	80014f0 <Store+0xa4>
		{
			c.data[i][j] = (a.data[i][j]);
 80014bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	3370      	adds	r3, #112	; 0x70
 80014cc:	443b      	add	r3, r7
 80014ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	3368      	adds	r3, #104	; 0x68
 80014e2:	443b      	add	r3, r7
 80014e4:	3b60      	subs	r3, #96	; 0x60
 80014e6:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < a.cols; j++)
 80014ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ec:	3301      	adds	r3, #1
 80014ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80014f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbe0      	blt.n	80014bc <Store+0x70>
	for (int i = 0; i < a.rows; i++)
 80014fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fc:	3301      	adds	r3, #1
 80014fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001506:	429a      	cmp	r2, r3
 8001508:	dbd5      	blt.n	80014b6 <Store+0x6a>
		}
	}
	return c;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2250      	movs	r2, #80	; 0x50
 8001514:	4619      	mov	r1, r3
 8001516:	f003 f8ab 	bl	8004670 <memcpy>
}
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	3768      	adds	r7, #104	; 0x68
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001524:	b002      	add	sp, #8
 8001526:	4770      	bx	lr

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800152e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001530:	f001 f858 	bl	80025e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001534:	f000 fa54 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001538:	f000 fb8a 	bl	8001c50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800153c:	f000 fb5e 	bl	8001bfc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001540:	f000 fb0e 	bl	8001b60 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001544:	f000 fab4 	bl	8001ab0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001548:	48c5      	ldr	r0, [pc, #788]	; (8001860 <main+0x338>)
 800154a:	f002 f855 	bl	80035f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800154e:	213c      	movs	r1, #60	; 0x3c
 8001550:	48c4      	ldr	r0, [pc, #784]	; (8001864 <main+0x33c>)
 8001552:	f002 f959 	bl	8003808 <HAL_TIM_Encoder_Start>
  double dt = 1/1000.0;
 8001556:	a3b2      	add	r3, pc, #712	; (adr r3, 8001820 <main+0x2f8>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
  double mat_a[9] = { 1, dt, (0.5 * (pow(dt,2))), 0, 1, dt, 0, 0, 1 };
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4bc0      	ldr	r3, [pc, #768]	; (8001868 <main+0x340>)
 8001566:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 800156a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800156e:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8001572:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8001828 <main+0x300>
 8001576:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800157a:	f003 f88f 	bl	800469c <pow>
 800157e:	ec51 0b10 	vmov	r0, r1, d0
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4bb9      	ldr	r3, [pc, #740]	; (800186c <main+0x344>)
 8001588:	f7fe ffe2 	bl	8000550 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4bb0      	ldr	r3, [pc, #704]	; (8001868 <main+0x340>)
 80015a6:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
 80015aa:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80015ae:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4ba6      	ldr	r3, [pc, #664]	; (8001868 <main+0x340>)
 80015d0:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  double mat_c[3] = { 1, 0, 0 };
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4ba3      	ldr	r3, [pc, #652]	; (8001868 <main+0x340>)
 80015da:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  double mat_r[1] = { 0.0033145 };
 80015f6:	a38e      	add	r3, pc, #568	; (adr r3, 8001830 <main+0x308>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  double eye[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
 8001600:	4a9b      	ldr	r2, [pc, #620]	; (8001870 <main+0x348>)
 8001602:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001606:	4611      	mov	r1, r2
 8001608:	2248      	movs	r2, #72	; 0x48
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f830 	bl	8004670 <memcpy>
  double zero[9] = { 0 };
 8001610:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001614:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001618:	4618      	mov	r0, r3
 800161a:	2348      	movs	r3, #72	; 0x48
 800161c:	461a      	mov	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	f003 f834 	bl	800468c <memset>
  double var_jerk = 6.5;
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <main+0x34c>)
 800162a:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
  double var_theta = (pow(((1 / 6.0) * pow(dt,3)), 2))*var_jerk;
 800162e:	ed9f 1b82 	vldr	d1, [pc, #520]	; 8001838 <main+0x310>
 8001632:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001636:	f003 f831 	bl	800469c <pow>
 800163a:	ec51 0b10 	vmov	r0, r1, d0
 800163e:	a380      	add	r3, pc, #512	; (adr r3, 8001840 <main+0x318>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe ff84 	bl	8000550 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	ec43 2b17 	vmov	d7, r2, r3
 8001650:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8001828 <main+0x300>
 8001654:	eeb0 0a47 	vmov.f32	s0, s14
 8001658:	eef0 0a67 	vmov.f32	s1, s15
 800165c:	f003 f81e 	bl	800469c <pow>
 8001660:	ec53 2b10 	vmov	r2, r3, d0
 8001664:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8001668:	f7fe ff72 	bl	8000550 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 236e 	strd	r2, r3, [r7, #440]	; 0x1b8
  double var_omega = (pow(((1 / 2.0) * pow(dt, 2)), 2)) * var_jerk;
 8001674:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 8001828 <main+0x300>
 8001678:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800167c:	f003 f80e 	bl	800469c <pow>
 8001680:	ec51 0b10 	vmov	r0, r1, d0
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b78      	ldr	r3, [pc, #480]	; (800186c <main+0x344>)
 800168a:	f7fe ff61 	bl	8000550 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	ec43 2b17 	vmov	d7, r2, r3
 8001696:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001828 <main+0x300>
 800169a:	eeb0 0a47 	vmov.f32	s0, s14
 800169e:	eef0 0a67 	vmov.f32	s1, s15
 80016a2:	f002 fffb 	bl	800469c <pow>
 80016a6:	ec53 2b10 	vmov	r2, r3, d0
 80016aa:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80016ae:	f7fe ff4f 	bl	8000550 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
  double var_alpha = (pow(dt, 2)) * var_jerk;
 80016ba:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8001828 <main+0x300>
 80016be:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 80016c2:	f002 ffeb 	bl	800469c <pow>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80016ce:	f7fe ff3f 	bl	8000550 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
  double var_theta_omega = ((1 / 12.0) * pow(dt, 5)) * var_jerk;
 80016da:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8001848 <main+0x320>
 80016de:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 80016e2:	f002 ffdb 	bl	800469c <pow>
 80016e6:	ec51 0b10 	vmov	r0, r1, d0
 80016ea:	a359      	add	r3, pc, #356	; (adr r3, 8001850 <main+0x328>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff2e 	bl	8000550 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 80016fc:	f7fe ff28 	bl	8000550 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
  double var_theta_alpha = ((1 / 6.0) * pow(dt, 4)) * var_jerk;
 8001708:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001858 <main+0x330>
 800170c:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 8001710:	f002 ffc4 	bl	800469c <pow>
 8001714:	ec51 0b10 	vmov	r0, r1, d0
 8001718:	a349      	add	r3, pc, #292	; (adr r3, 8001840 <main+0x318>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff17 	bl	8000550 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 800172a:	f7fe ff11 	bl	8000550 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
  double var_omega_alpha = ((1 / 2.0) * pow(dt, 3))* var_jerk;
 8001736:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001838 <main+0x310>
 800173a:	ed97 0b72 	vldr	d0, [r7, #456]	; 0x1c8
 800173e:	f002 ffad 	bl	800469c <pow>
 8001742:	ec51 0b10 	vmov	r0, r1, d0
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	4b48      	ldr	r3, [pc, #288]	; (800186c <main+0x344>)
 800174c:	f7fe ff00 	bl	8000550 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8001758:	f7fe fefa 	bl	8000550 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
  double mat_q[9] = {var_theta, var_theta_omega, var_theta_alpha, var_theta_omega, var_omega, var_omega_alpha, var_theta_alpha, var_omega_alpha, var_alpha };
 8001764:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001768:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800176c:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8001770:	e9c1 2300 	strd	r2, r3, [r1]
 8001774:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001778:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800177c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8001780:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001784:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001788:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800178c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8001790:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001794:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001798:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 800179c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80017a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80017a4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017a8:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 80017ac:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 80017b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80017b4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017b8:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 80017bc:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80017c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80017c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017c8:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 80017cc:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80017d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80017d4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017d8:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 80017dc:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80017e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80017e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017e8:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 80017ec:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80017f0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  A = Create_Matrix(3, 3, mat_a);
 80017f4:	4c20      	ldr	r4, [pc, #128]	; (8001878 <main+0x350>)
 80017f6:	4638      	mov	r0, r7
 80017f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80017fc:	2203      	movs	r2, #3
 80017fe:	2103      	movs	r1, #3
 8001800:	f7ff fb28 	bl	8000e54 <Create_Matrix>
 8001804:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001808:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800180c:	4620      	mov	r0, r4
 800180e:	4619      	mov	r1, r3
 8001810:	2350      	movs	r3, #80	; 0x50
 8001812:	461a      	mov	r2, r3
 8001814:	f002 ff2c 	bl	8004670 <memcpy>
 8001818:	e030      	b.n	800187c <main+0x354>
 800181a:	bf00      	nop
 800181c:	f3af 8000 	nop.w
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	3f50624d 	.word	0x3f50624d
 8001828:	00000000 	.word	0x00000000
 800182c:	40000000 	.word	0x40000000
 8001830:	a3486f05 	.word	0xa3486f05
 8001834:	3f6b2702 	.word	0x3f6b2702
 8001838:	00000000 	.word	0x00000000
 800183c:	40080000 	.word	0x40080000
 8001840:	55555555 	.word	0x55555555
 8001844:	3fc55555 	.word	0x3fc55555
 8001848:	00000000 	.word	0x00000000
 800184c:	40140000 	.word	0x40140000
 8001850:	55555555 	.word	0x55555555
 8001854:	3fb55555 	.word	0x3fb55555
 8001858:	00000000 	.word	0x00000000
 800185c:	40100000 	.word	0x40100000
 8001860:	200000d4 	.word	0x200000d4
 8001864:	2000008c 	.word	0x2000008c
 8001868:	3ff00000 	.word	0x3ff00000
 800186c:	3fe00000 	.word	0x3fe00000
 8001870:	080054f0 	.word	0x080054f0
 8001874:	401a0000 	.word	0x401a0000
 8001878:	20000160 	.word	0x20000160
  A_T = Transpose(A);
 800187c:	4e4f      	ldr	r6, [pc, #316]	; (80019bc <main+0x494>)
 800187e:	463d      	mov	r5, r7
 8001880:	4c4f      	ldr	r4, [pc, #316]	; (80019c0 <main+0x498>)
 8001882:	4668      	mov	r0, sp
 8001884:	f104 0308 	add.w	r3, r4, #8
 8001888:	2248      	movs	r2, #72	; 0x48
 800188a:	4619      	mov	r1, r3
 800188c:	f002 fef0 	bl	8004670 <memcpy>
 8001890:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001894:	4628      	mov	r0, r5
 8001896:	f7ff fcf0 	bl	800127a <Transpose>
 800189a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800189e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018a2:	4630      	mov	r0, r6
 80018a4:	4619      	mov	r1, r3
 80018a6:	2350      	movs	r3, #80	; 0x50
 80018a8:	461a      	mov	r2, r3
 80018aa:	f002 fee1 	bl	8004670 <memcpy>
  C = Create_Matrix(1, 3, mat_c);
 80018ae:	4c45      	ldr	r4, [pc, #276]	; (80019c4 <main+0x49c>)
 80018b0:	4638      	mov	r0, r7
 80018b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018b6:	2203      	movs	r2, #3
 80018b8:	2101      	movs	r1, #1
 80018ba:	f7ff facb 	bl	8000e54 <Create_Matrix>
 80018be:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80018c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018c6:	4620      	mov	r0, r4
 80018c8:	4619      	mov	r1, r3
 80018ca:	2350      	movs	r3, #80	; 0x50
 80018cc:	461a      	mov	r2, r3
 80018ce:	f002 fecf 	bl	8004670 <memcpy>
  C_T = Transpose(C);
 80018d2:	4e3d      	ldr	r6, [pc, #244]	; (80019c8 <main+0x4a0>)
 80018d4:	463d      	mov	r5, r7
 80018d6:	4c3b      	ldr	r4, [pc, #236]	; (80019c4 <main+0x49c>)
 80018d8:	4668      	mov	r0, sp
 80018da:	f104 0308 	add.w	r3, r4, #8
 80018de:	2248      	movs	r2, #72	; 0x48
 80018e0:	4619      	mov	r1, r3
 80018e2:	f002 fec5 	bl	8004670 <memcpy>
 80018e6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018ea:	4628      	mov	r0, r5
 80018ec:	f7ff fcc5 	bl	800127a <Transpose>
 80018f0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80018f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80018f8:	4630      	mov	r0, r6
 80018fa:	4619      	mov	r1, r3
 80018fc:	2350      	movs	r3, #80	; 0x50
 80018fe:	461a      	mov	r2, r3
 8001900:	f002 feb6 	bl	8004670 <memcpy>
  R = Create_Matrix(1, 1, mat_r);
 8001904:	4c31      	ldr	r4, [pc, #196]	; (80019cc <main+0x4a4>)
 8001906:	4638      	mov	r0, r7
 8001908:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800190c:	2201      	movs	r2, #1
 800190e:	2101      	movs	r1, #1
 8001910:	f7ff faa0 	bl	8000e54 <Create_Matrix>
 8001914:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001918:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800191c:	4620      	mov	r0, r4
 800191e:	4619      	mov	r1, r3
 8001920:	2350      	movs	r3, #80	; 0x50
 8001922:	461a      	mov	r2, r3
 8001924:	f002 fea4 	bl	8004670 <memcpy>
  Q = Create_Matrix(3, 3, mat_q);
 8001928:	4c29      	ldr	r4, [pc, #164]	; (80019d0 <main+0x4a8>)
 800192a:	4638      	mov	r0, r7
 800192c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001930:	2203      	movs	r2, #3
 8001932:	2103      	movs	r1, #3
 8001934:	f7ff fa8e 	bl	8000e54 <Create_Matrix>
 8001938:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800193c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001940:	4620      	mov	r0, r4
 8001942:	4619      	mov	r1, r3
 8001944:	2350      	movs	r3, #80	; 0x50
 8001946:	461a      	mov	r2, r3
 8001948:	f002 fe92 	bl	8004670 <memcpy>
  I = Create_Matrix(3, 3, eye);
 800194c:	4c21      	ldr	r4, [pc, #132]	; (80019d4 <main+0x4ac>)
 800194e:	4638      	mov	r0, r7
 8001950:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001954:	2203      	movs	r2, #3
 8001956:	2103      	movs	r1, #3
 8001958:	f7ff fa7c 	bl	8000e54 <Create_Matrix>
 800195c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001960:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001964:	4620      	mov	r0, r4
 8001966:	4619      	mov	r1, r3
 8001968:	2350      	movs	r3, #80	; 0x50
 800196a:	461a      	mov	r2, r3
 800196c:	f002 fe80 	bl	8004670 <memcpy>
  x_k1 = Create_Matrix(3, 1, zero);
 8001970:	4c19      	ldr	r4, [pc, #100]	; (80019d8 <main+0x4b0>)
 8001972:	4638      	mov	r0, r7
 8001974:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001978:	2201      	movs	r2, #1
 800197a:	2103      	movs	r1, #3
 800197c:	f7ff fa6a 	bl	8000e54 <Create_Matrix>
 8001980:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001984:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001988:	4620      	mov	r0, r4
 800198a:	4619      	mov	r1, r3
 800198c:	2350      	movs	r3, #80	; 0x50
 800198e:	461a      	mov	r2, r3
 8001990:	f002 fe6e 	bl	8004670 <memcpy>
  p_k1 = Create_Matrix(3, 3, zero);
 8001994:	4c11      	ldr	r4, [pc, #68]	; (80019dc <main+0x4b4>)
 8001996:	4638      	mov	r0, r7
 8001998:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800199c:	2203      	movs	r2, #3
 800199e:	2103      	movs	r1, #3
 80019a0:	f7ff fa58 	bl	8000e54 <Create_Matrix>
 80019a4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80019a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019ac:	4620      	mov	r0, r4
 80019ae:	4619      	mov	r1, r3
 80019b0:	2350      	movs	r3, #80	; 0x50
 80019b2:	461a      	mov	r2, r3
 80019b4:	f002 fe5c 	bl	8004670 <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <main+0x490>
 80019ba:	bf00      	nop
 80019bc:	200004d0 	.word	0x200004d0
 80019c0:	20000160 	.word	0x20000160
 80019c4:	200001b0 	.word	0x200001b0
 80019c8:	20000520 	.word	0x20000520
 80019cc:	20000200 	.word	0x20000200
 80019d0:	20000250 	.word	0x20000250
 80019d4:	200006b0 	.word	0x200006b0
 80019d8:	200002f0 	.word	0x200002f0
 80019dc:	20000480 	.word	0x20000480

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fe4c 	bl	800468c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <SystemClock_Config+0xc8>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <SystemClock_Config+0xc8>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <SystemClock_Config+0xc8>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <SystemClock_Config+0xcc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <SystemClock_Config+0xcc>)
 8001a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <SystemClock_Config+0xcc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a44:	2310      	movs	r3, #16
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a50:	2308      	movs	r3, #8
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 f8df 	bl	8002c28 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a70:	f000 fc62 	bl	8002338 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2103      	movs	r1, #3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fb41 	bl	8003118 <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a9c:	f000 fc4c 	bl	8002338 <Error_Handler>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3750      	adds	r7, #80	; 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000

08001ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fde4 	bl	800468c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <MX_TIM1_Init+0xac>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64511;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001ae0:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af8:	2303      	movs	r3, #3
 8001afa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b00:	2301      	movs	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001b24:	f001 fdca 	bl	80036bc <HAL_TIM_Encoder_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b2e:	f000 fc03 	bl	8002338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM1_Init+0xa8>)
 8001b40:	f002 fa28 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b4a:	f000 fbf5 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000008c 	.word	0x2000008c
 8001b5c:	40010000 	.word	0x40010000

08001b60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	463b      	mov	r3, r7
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <MX_TIM4_Init+0x98>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001b84:	2263      	movs	r2, #99	; 0x63
 8001b86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ba2:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001ba4:	f001 fcd8 	bl	8003558 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001bae:	f000 fbc3 	bl	8002338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001bc0:	f001 ffb8 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001bca:	f000 fbb5 	bl	8002338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_TIM4_Init+0x94>)
 8001bdc:	f002 f9da 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001be6:	f000 fba7 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200000d4 	.word	0x200000d4
 8001bf8:	40000800 	.word	0x40000800

08001bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <MX_USART2_UART_Init+0x50>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_USART2_UART_Init+0x4c>)
 8001c34:	f002 fa30 	bl	8004098 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c3e:	f000 fb7b 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000011c 	.word	0x2000011c
 8001c4c:	40004400 	.word	0x40004400

08001c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_GPIO_Init+0xd0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2120      	movs	r1, #32
 8001cda:	4812      	ldr	r0, [pc, #72]	; (8001d24 <MX_GPIO_Init+0xd4>)
 8001cdc:	f000 ff8a 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_GPIO_Init+0xd8>)
 8001cf8:	f000 fdf8 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_GPIO_Init+0xd4>)
 8001d14:	f000 fdea 	bl	80028ec <HAL_GPIO_Init>

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	00000000 	.word	0x00000000

08001d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
 8001d36:	af26      	add	r7, sp, #152	; 0x98
 8001d38:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001d3c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001d40:	6018      	str	r0, [r3, #0]
	if (htim == &htim4)
 8001d42:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001d46:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4ad6      	ldr	r2, [pc, #856]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	f040 82ce 	bne.w	80022f0 <HAL_TIM_PeriodElapsedCallback+0x5c0>
	{
		RadRel = (TIM1->CNT/3072.0)*(2*M_PI);
 8001d54:	4bd5      	ldr	r3, [pc, #852]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fb7f 	bl	800045c <__aeabi_ui2d>
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4bd3      	ldr	r3, [pc, #844]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001d64:	f7fe fd1e 	bl	80007a4 <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	a3c9      	add	r3, pc, #804	; (adr r3, 8002098 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fbeb 	bl	8000550 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	49cd      	ldr	r1, [pc, #820]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d80:	e9c1 2300 	strd	r2, r3, [r1]
		Position[0] = RadRel;
 8001d84:	4bcb      	ldr	r3, [pc, #812]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	49cb      	ldr	r1, [pc, #812]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001d8c:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = (Position[0] - Position[1]) / 0.001;
 8001d90:	4bc9      	ldr	r3, [pc, #804]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001d92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d96:	4bc8      	ldr	r3, [pc, #800]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001d98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d9c:	f7fe fa20 	bl	80001e0 <__aeabi_dsub>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	a3bd      	add	r3, pc, #756	; (adr r3, 80020a0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fcf9 	bl	80007a4 <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	49c1      	ldr	r1, [pc, #772]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001db8:	e9c1 2300 	strd	r2, r3, [r1]
		ti = aa / 1000.0;
 8001dbc:	4bc0      	ldr	r3, [pc, #768]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb5b 	bl	800047c <__aeabi_i2d>
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4bbe      	ldr	r3, [pc, #760]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001dcc:	f7fe fcea 	bl	80007a4 <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fe6a 	bl	8000ab0 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4aba      	ldr	r2, [pc, #744]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001de0:	6013      	str	r3, [r2, #0]
		tk = ti;
 8001de2:	4bb9      	ldr	r3, [pc, #740]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4ab9      	ldr	r2, [pc, #740]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001de8:	6013      	str	r3, [r2, #0]
		sensor[0] = RadRel;
 8001dea:	4bb2      	ldr	r3, [pc, #712]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	49b7      	ldr	r1, [pc, #732]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001df2:	e9c1 2300 	strd	r2, r3, [r1]
		z_k = Create_Matrix(1, 1, sensor);
 8001df6:	4cb7      	ldr	r4, [pc, #732]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001df8:	4638      	mov	r0, r7
 8001dfa:	4bb5      	ldr	r3, [pc, #724]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2101      	movs	r1, #1
 8001e00:	f7ff f828 	bl	8000e54 <Create_Matrix>
 8001e04:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e08:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2350      	movs	r3, #80	; 0x50
 8001e12:	461a      	mov	r2, r3
 8001e14:	f002 fc2c 	bl	8004670 <memcpy>
		//Predict//
		xp_k = Multiply(A, x_k1);
 8001e18:	4eaf      	ldr	r6, [pc, #700]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001e1a:	463d      	mov	r5, r7
 8001e1c:	4caf      	ldr	r4, [pc, #700]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001e1e:	4ab0      	ldr	r2, [pc, #704]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001e20:	ab12      	add	r3, sp, #72	; 0x48
 8001e22:	4611      	mov	r1, r2
 8001e24:	2250      	movs	r2, #80	; 0x50
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fc22 	bl	8004670 <memcpy>
 8001e2c:	4668      	mov	r0, sp
 8001e2e:	f104 0308 	add.w	r3, r4, #8
 8001e32:	2248      	movs	r2, #72	; 0x48
 8001e34:	4619      	mov	r1, r3
 8001e36:	f002 fc1b 	bl	8004670 <memcpy>
 8001e3a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001e3e:	4628      	mov	r0, r5
 8001e40:	f7ff f87e 	bl	8000f40 <Multiply>
 8001e44:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e48:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	4619      	mov	r1, r3
 8001e50:	2350      	movs	r3, #80	; 0x50
 8001e52:	461a      	mov	r2, r3
 8001e54:	f002 fc0c 	bl	8004670 <memcpy>
		pp_k = Sum(Multiply(Multiply(A, p_k1), A_T), Q);
 8001e58:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e5c:	f5a3 7534 	sub.w	r5, r3, #720	; 0x2d0
 8001e60:	4c9e      	ldr	r4, [pc, #632]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001e62:	4aa0      	ldr	r2, [pc, #640]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001e64:	ab12      	add	r3, sp, #72	; 0x48
 8001e66:	4611      	mov	r1, r2
 8001e68:	2250      	movs	r2, #80	; 0x50
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fc00 	bl	8004670 <memcpy>
 8001e70:	4668      	mov	r0, sp
 8001e72:	f104 0308 	add.w	r3, r4, #8
 8001e76:	2248      	movs	r2, #72	; 0x48
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f002 fbf9 	bl	8004670 <memcpy>
 8001e7e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001e82:	4628      	mov	r0, r5
 8001e84:	f7ff f85c 	bl	8000f40 <Multiply>
 8001e88:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e8c:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
 8001e90:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001e94:	f5a3 7434 	sub.w	r4, r3, #720	; 0x2d0
 8001e98:	4a93      	ldr	r2, [pc, #588]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001e9a:	ab12      	add	r3, sp, #72	; 0x48
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	2250      	movs	r2, #80	; 0x50
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fbe5 	bl	8004670 <memcpy>
 8001ea6:	4668      	mov	r0, sp
 8001ea8:	f104 0308 	add.w	r3, r4, #8
 8001eac:	2248      	movs	r2, #72	; 0x48
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f002 fbde 	bl	8004670 <memcpy>
 8001eb4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f7ff f841 	bl	8000f40 <Multiply>
 8001ebe:	4e8b      	ldr	r6, [pc, #556]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001ec0:	463d      	mov	r5, r7
 8001ec2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001ec6:	f5a3 7420 	sub.w	r4, r3, #640	; 0x280
 8001eca:	4a89      	ldr	r2, [pc, #548]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001ecc:	ab12      	add	r3, sp, #72	; 0x48
 8001ece:	4611      	mov	r1, r2
 8001ed0:	2250      	movs	r2, #80	; 0x50
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fbcc 	bl	8004670 <memcpy>
 8001ed8:	4668      	mov	r0, sp
 8001eda:	f104 0308 	add.w	r3, r4, #8
 8001ede:	2248      	movs	r2, #72	; 0x48
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f002 fbc5 	bl	8004670 <memcpy>
 8001ee6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7ff f8c5 	bl	800107a <Sum>
 8001ef0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001ef4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001ef8:	4630      	mov	r0, r6
 8001efa:	4619      	mov	r1, r3
 8001efc:	2350      	movs	r3, #80	; 0x50
 8001efe:	461a      	mov	r2, r3
 8001f00:	f002 fbb6 	bl	8004670 <memcpy>
		//Update//
		y_k = Minus(z_k, Multiply(C, xp_k));
 8001f04:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001f08:	f5a3 750c 	sub.w	r5, r3, #560	; 0x230
 8001f0c:	4c79      	ldr	r4, [pc, #484]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001f0e:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001f10:	ab12      	add	r3, sp, #72	; 0x48
 8001f12:	4611      	mov	r1, r2
 8001f14:	2250      	movs	r2, #80	; 0x50
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fbaa 	bl	8004670 <memcpy>
 8001f1c:	4668      	mov	r0, sp
 8001f1e:	f104 0308 	add.w	r3, r4, #8
 8001f22:	2248      	movs	r2, #72	; 0x48
 8001f24:	4619      	mov	r1, r3
 8001f26:	f002 fba3 	bl	8004670 <memcpy>
 8001f2a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f7ff f806 	bl	8000f40 <Multiply>
 8001f34:	4e70      	ldr	r6, [pc, #448]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8001f36:	463d      	mov	r5, r7
 8001f38:	4c66      	ldr	r4, [pc, #408]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001f3a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001f3e:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8001f42:	ab12      	add	r3, sp, #72	; 0x48
 8001f44:	4611      	mov	r1, r2
 8001f46:	2250      	movs	r2, #80	; 0x50
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fb91 	bl	8004670 <memcpy>
 8001f4e:	4668      	mov	r0, sp
 8001f50:	f104 0308 	add.w	r3, r4, #8
 8001f54:	2248      	movs	r2, #72	; 0x48
 8001f56:	4619      	mov	r1, r3
 8001f58:	f002 fb8a 	bl	8004670 <memcpy>
 8001f5c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001f60:	4628      	mov	r0, r5
 8001f62:	f7ff f90a 	bl	800117a <Minus>
 8001f66:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001f6a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001f6e:	4630      	mov	r0, r6
 8001f70:	4619      	mov	r1, r3
 8001f72:	2350      	movs	r3, #80	; 0x50
 8001f74:	461a      	mov	r2, r3
 8001f76:	f002 fb7b 	bl	8004670 <memcpy>
		s_k = Sum(Multiply(Multiply(C, pp_k), C_T), R);
 8001f7a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001f7e:	f5a3 75f0 	sub.w	r5, r3, #480	; 0x1e0
 8001f82:	4c5c      	ldr	r4, [pc, #368]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001f84:	4a59      	ldr	r2, [pc, #356]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001f86:	ab12      	add	r3, sp, #72	; 0x48
 8001f88:	4611      	mov	r1, r2
 8001f8a:	2250      	movs	r2, #80	; 0x50
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fb6f 	bl	8004670 <memcpy>
 8001f92:	4668      	mov	r0, sp
 8001f94:	f104 0308 	add.w	r3, r4, #8
 8001f98:	2248      	movs	r2, #72	; 0x48
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f002 fb68 	bl	8004670 <memcpy>
 8001fa0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe ffcb 	bl	8000f40 <Multiply>
 8001faa:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001fae:	f5a3 75c8 	sub.w	r5, r3, #400	; 0x190
 8001fb2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001fb6:	f5a3 74f0 	sub.w	r4, r3, #480	; 0x1e0
 8001fba:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8001fbc:	ab12      	add	r3, sp, #72	; 0x48
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	2250      	movs	r2, #80	; 0x50
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 fb54 	bl	8004670 <memcpy>
 8001fc8:	4668      	mov	r0, sp
 8001fca:	f104 0308 	add.w	r3, r4, #8
 8001fce:	2248      	movs	r2, #72	; 0x48
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f002 fb4d 	bl	8004670 <memcpy>
 8001fd6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f7fe ffb0 	bl	8000f40 <Multiply>
 8001fe0:	4e47      	ldr	r6, [pc, #284]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8001fe2:	463d      	mov	r5, r7
 8001fe4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001fe8:	f5a3 74c8 	sub.w	r4, r3, #400	; 0x190
 8001fec:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8001fee:	ab12      	add	r3, sp, #72	; 0x48
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	2250      	movs	r2, #80	; 0x50
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fb3b 	bl	8004670 <memcpy>
 8001ffa:	4668      	mov	r0, sp
 8001ffc:	f104 0308 	add.w	r3, r4, #8
 8002000:	2248      	movs	r2, #72	; 0x48
 8002002:	4619      	mov	r1, r3
 8002004:	f002 fb34 	bl	8004670 <memcpy>
 8002008:	e894 000c 	ldmia.w	r4, {r2, r3}
 800200c:	4628      	mov	r0, r5
 800200e:	f7ff f834 	bl	800107a <Sum>
 8002012:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002016:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800201a:	4630      	mov	r0, r6
 800201c:	4619      	mov	r1, r3
 800201e:	2350      	movs	r3, #80	; 0x50
 8002020:	461a      	mov	r2, r3
 8002022:	f002 fb25 	bl	8004670 <memcpy>
		s_k_inv = Inverse(s_k);
 8002026:	4e38      	ldr	r6, [pc, #224]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002028:	463d      	mov	r5, r7
 800202a:	4c35      	ldr	r4, [pc, #212]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800202c:	4668      	mov	r0, sp
 800202e:	f104 0308 	add.w	r3, r4, #8
 8002032:	2248      	movs	r2, #72	; 0x48
 8002034:	4619      	mov	r1, r3
 8002036:	f002 fb1b 	bl	8004670 <memcpy>
 800203a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800203e:	4628      	mov	r0, r5
 8002040:	f7ff f98a 	bl	8001358 <Inverse>
 8002044:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002048:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800204c:	4630      	mov	r0, r6
 800204e:	4619      	mov	r1, r3
 8002050:	2350      	movs	r3, #80	; 0x50
 8002052:	461a      	mov	r2, r3
 8002054:	f002 fb0c 	bl	8004670 <memcpy>
		K = Multiply(Multiply(pp_k, C_T), s_k_inv);
 8002058:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800205c:	f5a3 75a0 	sub.w	r5, r3, #320	; 0x140
 8002060:	4c22      	ldr	r4, [pc, #136]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002062:	4a26      	ldr	r2, [pc, #152]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002064:	ab12      	add	r3, sp, #72	; 0x48
 8002066:	4611      	mov	r1, r2
 8002068:	2250      	movs	r2, #80	; 0x50
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fb00 	bl	8004670 <memcpy>
 8002070:	4668      	mov	r0, sp
 8002072:	f104 0308 	add.w	r3, r4, #8
 8002076:	2248      	movs	r2, #72	; 0x48
 8002078:	4619      	mov	r1, r3
 800207a:	f002 faf9 	bl	8004670 <memcpy>
 800207e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002082:	4628      	mov	r0, r5
 8002084:	f7fe ff5c 	bl	8000f40 <Multiply>
 8002088:	4e20      	ldr	r6, [pc, #128]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800208a:	463d      	mov	r5, r7
 800208c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002090:	f5a3 74a0 	sub.w	r4, r3, #320	; 0x140
 8002094:	e03c      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x3e0>
 8002096:	bf00      	nop
 8002098:	54442d18 	.word	0x54442d18
 800209c:	401921fb 	.word	0x401921fb
 80020a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020a4:	3f50624d 	.word	0x3f50624d
 80020a8:	200000d4 	.word	0x200000d4
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40a80000 	.word	0x40a80000
 80020b4:	20000710 	.word	0x20000710
 80020b8:	20000718 	.word	0x20000718
 80020bc:	20000708 	.word	0x20000708
 80020c0:	20000738 	.word	0x20000738
 80020c4:	408f4000 	.word	0x408f4000
 80020c8:	2000072c 	.word	0x2000072c
 80020cc:	20000728 	.word	0x20000728
 80020d0:	20000700 	.word	0x20000700
 80020d4:	20000340 	.word	0x20000340
 80020d8:	20000390 	.word	0x20000390
 80020dc:	20000160 	.word	0x20000160
 80020e0:	200002f0 	.word	0x200002f0
 80020e4:	20000480 	.word	0x20000480
 80020e8:	200004d0 	.word	0x200004d0
 80020ec:	200003e0 	.word	0x200003e0
 80020f0:	20000250 	.word	0x20000250
 80020f4:	200001b0 	.word	0x200001b0
 80020f8:	20000570 	.word	0x20000570
 80020fc:	20000520 	.word	0x20000520
 8002100:	200005c0 	.word	0x200005c0
 8002104:	20000200 	.word	0x20000200
 8002108:	20000610 	.word	0x20000610
 800210c:	20000660 	.word	0x20000660
 8002110:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002112:	ab12      	add	r3, sp, #72	; 0x48
 8002114:	4611      	mov	r1, r2
 8002116:	2250      	movs	r2, #80	; 0x50
 8002118:	4618      	mov	r0, r3
 800211a:	f002 faa9 	bl	8004670 <memcpy>
 800211e:	4668      	mov	r0, sp
 8002120:	f104 0308 	add.w	r3, r4, #8
 8002124:	2248      	movs	r2, #72	; 0x48
 8002126:	4619      	mov	r1, r3
 8002128:	f002 faa2 	bl	8004670 <memcpy>
 800212c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002130:	4628      	mov	r0, r5
 8002132:	f7fe ff05 	bl	8000f40 <Multiply>
 8002136:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800213a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800213e:	4630      	mov	r0, r6
 8002140:	4619      	mov	r1, r3
 8002142:	2350      	movs	r3, #80	; 0x50
 8002144:	461a      	mov	r2, r3
 8002146:	f002 fa93 	bl	8004670 <memcpy>
		x_k0 = Sum(xp_k, Multiply(K, y_k));
 800214a:	f507 750e 	add.w	r5, r7, #568	; 0x238
 800214e:	4c6c      	ldr	r4, [pc, #432]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002150:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002152:	ab12      	add	r3, sp, #72	; 0x48
 8002154:	4611      	mov	r1, r2
 8002156:	2250      	movs	r2, #80	; 0x50
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fa89 	bl	8004670 <memcpy>
 800215e:	4668      	mov	r0, sp
 8002160:	f104 0308 	add.w	r3, r4, #8
 8002164:	2248      	movs	r2, #72	; 0x48
 8002166:	4619      	mov	r1, r3
 8002168:	f002 fa82 	bl	8004670 <memcpy>
 800216c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002170:	4628      	mov	r0, r5
 8002172:	f7fe fee5 	bl	8000f40 <Multiply>
 8002176:	4e64      	ldr	r6, [pc, #400]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002178:	463d      	mov	r5, r7
 800217a:	4c64      	ldr	r4, [pc, #400]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800217c:	a812      	add	r0, sp, #72	; 0x48
 800217e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002182:	2250      	movs	r2, #80	; 0x50
 8002184:	4619      	mov	r1, r3
 8002186:	f002 fa73 	bl	8004670 <memcpy>
 800218a:	4668      	mov	r0, sp
 800218c:	f104 0308 	add.w	r3, r4, #8
 8002190:	2248      	movs	r2, #72	; 0x48
 8002192:	4619      	mov	r1, r3
 8002194:	f002 fa6c 	bl	8004670 <memcpy>
 8002198:	e894 000c 	ldmia.w	r4, {r2, r3}
 800219c:	4628      	mov	r0, r5
 800219e:	f7fe ff6c 	bl	800107a <Sum>
 80021a2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80021a6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80021aa:	4630      	mov	r0, r6
 80021ac:	4619      	mov	r1, r3
 80021ae:	2350      	movs	r3, #80	; 0x50
 80021b0:	461a      	mov	r2, r3
 80021b2:	f002 fa5d 	bl	8004670 <memcpy>
		p_k0 = Multiply(Minus(I, Multiply(K, C)), pp_k);
 80021b6:	f507 7522 	add.w	r5, r7, #648	; 0x288
 80021ba:	4c51      	ldr	r4, [pc, #324]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80021bc:	4a54      	ldr	r2, [pc, #336]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80021be:	ab12      	add	r3, sp, #72	; 0x48
 80021c0:	4611      	mov	r1, r2
 80021c2:	2250      	movs	r2, #80	; 0x50
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fa53 	bl	8004670 <memcpy>
 80021ca:	4668      	mov	r0, sp
 80021cc:	f104 0308 	add.w	r3, r4, #8
 80021d0:	2248      	movs	r2, #72	; 0x48
 80021d2:	4619      	mov	r1, r3
 80021d4:	f002 fa4c 	bl	8004670 <memcpy>
 80021d8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80021dc:	4628      	mov	r0, r5
 80021de:	f7fe feaf 	bl	8000f40 <Multiply>
 80021e2:	f507 7536 	add.w	r5, r7, #728	; 0x2d8
 80021e6:	4c4b      	ldr	r4, [pc, #300]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80021e8:	a812      	add	r0, sp, #72	; 0x48
 80021ea:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80021ee:	2250      	movs	r2, #80	; 0x50
 80021f0:	4619      	mov	r1, r3
 80021f2:	f002 fa3d 	bl	8004670 <memcpy>
 80021f6:	4668      	mov	r0, sp
 80021f8:	f104 0308 	add.w	r3, r4, #8
 80021fc:	2248      	movs	r2, #72	; 0x48
 80021fe:	4619      	mov	r1, r3
 8002200:	f002 fa36 	bl	8004670 <memcpy>
 8002204:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002208:	4628      	mov	r0, r5
 800220a:	f7fe ffb6 	bl	800117a <Minus>
 800220e:	4d42      	ldr	r5, [pc, #264]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8002210:	463c      	mov	r4, r7
 8002212:	4a42      	ldr	r2, [pc, #264]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8002214:	ab12      	add	r3, sp, #72	; 0x48
 8002216:	4611      	mov	r1, r2
 8002218:	2250      	movs	r2, #80	; 0x50
 800221a:	4618      	mov	r0, r3
 800221c:	f002 fa28 	bl	8004670 <memcpy>
 8002220:	4668      	mov	r0, sp
 8002222:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002226:	2248      	movs	r2, #72	; 0x48
 8002228:	4619      	mov	r1, r3
 800222a:	f002 fa21 	bl	8004670 <memcpy>
 800222e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8002232:	cb0c      	ldmia	r3, {r2, r3}
 8002234:	4620      	mov	r0, r4
 8002236:	f7fe fe83 	bl	8000f40 <Multiply>
 800223a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800223e:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002242:	4628      	mov	r0, r5
 8002244:	4619      	mov	r1, r3
 8002246:	2350      	movs	r3, #80	; 0x50
 8002248:	461a      	mov	r2, r3
 800224a:	f002 fa11 	bl	8004670 <memcpy>

		//Memory [N-1] data
		x_k1 = Store(x_k0);
 800224e:	4e34      	ldr	r6, [pc, #208]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8002250:	463d      	mov	r5, r7
 8002252:	4c2d      	ldr	r4, [pc, #180]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002254:	4668      	mov	r0, sp
 8002256:	f104 0308 	add.w	r3, r4, #8
 800225a:	2248      	movs	r2, #72	; 0x48
 800225c:	4619      	mov	r1, r3
 800225e:	f002 fa07 	bl	8004670 <memcpy>
 8002262:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002266:	4628      	mov	r0, r5
 8002268:	f7ff f8f0 	bl	800144c <Store>
 800226c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002270:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002274:	4630      	mov	r0, r6
 8002276:	4619      	mov	r1, r3
 8002278:	2350      	movs	r3, #80	; 0x50
 800227a:	461a      	mov	r2, r3
 800227c:	f002 f9f8 	bl	8004670 <memcpy>
		p_k1 = Store(p_k0);
 8002280:	4e28      	ldr	r6, [pc, #160]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8002282:	463d      	mov	r5, r7
 8002284:	4c24      	ldr	r4, [pc, #144]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8002286:	4668      	mov	r0, sp
 8002288:	f104 0308 	add.w	r3, r4, #8
 800228c:	2248      	movs	r2, #72	; 0x48
 800228e:	4619      	mov	r1, r3
 8002290:	f002 f9ee 	bl	8004670 <memcpy>
 8002294:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002298:	4628      	mov	r0, r5
 800229a:	f7ff f8d7 	bl	800144c <Store>
 800229e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80022a2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80022a6:	4630      	mov	r0, r6
 80022a8:	4619      	mov	r1, r3
 80022aa:	2350      	movs	r3, #80	; 0x50
 80022ac:	461a      	mov	r2, r3
 80022ae:	f002 f9df 	bl	8004670 <memcpy>
		output_theta = x_k0.data[0][0];
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fbf8 	bl	8000ab0 <__aeabi_d2f>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80022c4:	6013      	str	r3, [r2, #0]
		zoutput_omega = x_k0.data[1][0];
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80022c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe fbee 	bl	8000ab0 <__aeabi_d2f>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80022d8:	6013      	str	r3, [r2, #0]

		//time
		aa++;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80022e2:	6013      	str	r3, [r2, #0]

		//store position
		Position[1] = Position[0] ;
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	4912      	ldr	r1, [pc, #72]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80022ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
}
 80022f0:	bf00      	nop
 80022f2:	f507 774b 	add.w	r7, r7, #812	; 0x32c
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000610 	.word	0x20000610
 8002300:	20000660 	.word	0x20000660
 8002304:	20000570 	.word	0x20000570
 8002308:	200002a0 	.word	0x200002a0
 800230c:	20000390 	.word	0x20000390
 8002310:	200001b0 	.word	0x200001b0
 8002314:	200006b0 	.word	0x200006b0
 8002318:	20000430 	.word	0x20000430
 800231c:	200003e0 	.word	0x200003e0
 8002320:	200002f0 	.word	0x200002f0
 8002324:	20000480 	.word	0x20000480
 8002328:	20000730 	.word	0x20000730
 800232c:	20000734 	.word	0x20000734
 8002330:	20000738 	.word	0x20000738
 8002334:	20000718 	.word	0x20000718

08002338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002340:	e7fe      	b.n	8002340 <Error_Handler+0x8>
	...

08002344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <HAL_MspInit+0x4c>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_MspInit+0x4c>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002382:	2007      	movs	r0, #7
 8002384:	f000 fa70 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_TIM_Encoder_MspInit+0x84>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d12c      	bne.n	8002410 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_TIM_Encoder_MspInit+0x88>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_TIM_Encoder_MspInit+0x88>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_TIM_Encoder_MspInit+0x88>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_TIM_Encoder_MspInit+0x88>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIM_Encoder_MspInit+0x88>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_TIM_Encoder_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002400:	2301      	movs	r3, #1
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <HAL_TIM_Encoder_MspInit+0x8c>)
 800240c:	f000 fa6e 	bl	80028ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40010000 	.word	0x40010000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000

08002424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0e      	ldr	r2, [pc, #56]	; (800246c <HAL_TIM_Base_MspInit+0x48>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d115      	bne.n	8002462 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_TIM_Base_MspInit+0x4c>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <HAL_TIM_Base_MspInit+0x4c>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_TIM_Base_MspInit+0x4c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	201e      	movs	r0, #30
 8002458:	f000 fa11 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800245c:	201e      	movs	r0, #30
 800245e:	f000 fa2a 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40000800 	.word	0x40000800
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <HAL_UART_MspInit+0x84>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12b      	bne.n	80024ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_UART_MspInit+0x88>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <HAL_UART_MspInit+0x88>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_UART_MspInit+0x88>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_UART_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_UART_MspInit+0x88>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_UART_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ce:	230c      	movs	r3, #12
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024de:	2307      	movs	r3, #7
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	4805      	ldr	r0, [pc, #20]	; (8002500 <HAL_UART_MspInit+0x8c>)
 80024ea:	f000 f9ff 	bl	80028ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40004400 	.word	0x40004400
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020000 	.word	0x40020000

08002504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <NMI_Handler+0x4>

0800250a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <MemManage_Handler+0x4>

08002516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <UsageFault_Handler+0x4>

08002522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002550:	f000 f89a 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}

08002558 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <TIM4_IRQHandler+0x10>)
 800255e:	f001 f9e1 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200000d4 	.word	0x200000d4

0800256c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <SystemInit+0x20>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <SystemInit+0x20>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002596:	490e      	ldr	r1, [pc, #56]	; (80025d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002598:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025ac:	4c0b      	ldr	r4, [pc, #44]	; (80025dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025ba:	f7ff ffd7 	bl	800256c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025be:	f002 f833 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c2:	f7fe ffb1 	bl	8001528 <main>
  bx  lr    
 80025c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025d4:	08005590 	.word	0x08005590
  ldr r2, =_sbss
 80025d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025dc:	20000740 	.word	0x20000740

080025e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC_IRQHandler>
	...

080025e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <HAL_Init+0x40>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_Init+0x40>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_Init+0x40>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260c:	2003      	movs	r0, #3
 800260e:	f000 f92b 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002612:	2000      	movs	r0, #0
 8002614:	f000 f808 	bl	8002628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002618:	f7ff fe94 	bl	8002344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x54>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f943 	bl	80028d2 <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00e      	b.n	8002674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0f      	cmp	r3, #15
 800265a:	d80a      	bhi.n	8002672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265c:	2200      	movs	r2, #0
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f000 f90b 	bl	800287e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <HAL_InitTick+0x5c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000000 	.word	0x20000000
 8002680:	20000008 	.word	0x20000008
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x20>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x24>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_IncTick+0x24>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000008 	.word	0x20000008
 80026ac:	2000073c 	.word	0x2000073c

080026b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_GetTick+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000073c 	.word	0x2000073c

080026c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <__NVIC_GetPriorityGrouping+0x18>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 0307 	and.w	r3, r3, #7
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <__NVIC_EnableIRQ+0x38>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2001      	movs	r0, #1
 800274e:	fa00 f202 	lsl.w	r2, r0, r2
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e100 	.word	0xe000e100

08002768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0a      	blt.n	8002792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <__NVIC_SetPriority+0x4c>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	440b      	add	r3, r1
 800278c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002790:	e00a      	b.n	80027a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4908      	ldr	r1, [pc, #32]	; (80027b8 <__NVIC_SetPriority+0x50>)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3b04      	subs	r3, #4
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	440b      	add	r3, r1
 80027a6:	761a      	strb	r2, [r3, #24]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f1c3 0307 	rsb	r3, r3, #7
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	bf28      	it	cs
 80027da:	2304      	movcs	r3, #4
 80027dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d902      	bls.n	80027ec <NVIC_EncodePriority+0x30>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3b03      	subs	r3, #3
 80027ea:	e000      	b.n	80027ee <NVIC_EncodePriority+0x32>
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	401a      	ands	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43d9      	mvns	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	4313      	orrs	r3, r2
         );
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f7ff ff8e 	bl	8002768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff29 	bl	80026c8 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002890:	f7ff ff3e 	bl	8002710 <__NVIC_GetPriorityGrouping>
 8002894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7ff ff8e 	bl	80027bc <NVIC_EncodePriority>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff5d 	bl	8002768 <__NVIC_SetPriority>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff31 	bl	800272c <__NVIC_EnableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffa2 	bl	8002824 <SysTick_Config>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e159      	b.n	8002bbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	429a      	cmp	r2, r3
 8002922:	f040 8148 	bne.w	8002bb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d005      	beq.n	800293e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	2b02      	cmp	r3, #2
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d017      	beq.n	80029dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a2 	beq.w	8002bb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_GPIO_Init+0x2e8>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_GPIO_Init+0x2e8>)
 8002a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <HAL_GPIO_Init+0x2e8>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8e:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_GPIO_Init+0x2ec>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <HAL_GPIO_Init+0x2f0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d019      	beq.n	8002aee <HAL_GPIO_Init+0x202>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_GPIO_Init+0x2f4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_GPIO_Init+0x1fe>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a47      	ldr	r2, [pc, #284]	; (8002be4 <HAL_GPIO_Init+0x2f8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_GPIO_Init+0x1fa>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <HAL_GPIO_Init+0x2fc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x1f6>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a45      	ldr	r2, [pc, #276]	; (8002bec <HAL_GPIO_Init+0x300>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_GPIO_Init+0x1f2>
 8002ada:	2304      	movs	r3, #4
 8002adc:	e008      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002ade:	2307      	movs	r3, #7
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e004      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e002      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_GPIO_Init+0x204>
 8002aee:	2300      	movs	r3, #0
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f002 0203 	and.w	r2, r2, #3
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	4093      	lsls	r3, r2
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b00:	4935      	ldr	r1, [pc, #212]	; (8002bd8 <HAL_GPIO_Init+0x2ec>)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b32:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b5c:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb0:	4a0f      	ldr	r2, [pc, #60]	; (8002bf0 <HAL_GPIO_Init+0x304>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	f67f aea2 	bls.w	8002908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40020400 	.word	0x40020400
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c10:	e003      	b.n	8002c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	041a      	lsls	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e267      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d075      	beq.n	8002d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c52:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d112      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5e:	4b82      	ldr	r3, [pc, #520]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d05b      	beq.n	8002d30 <HAL_RCC_OscConfig+0x108>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d157      	bne.n	8002d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e242      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x74>
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a75      	ldr	r2, [pc, #468]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x98>
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6f      	ldr	r2, [pc, #444]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002cc0:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a68      	ldr	r2, [pc, #416]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7ff fce6 	bl	80026b0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7ff fce2 	bl	80026b0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e207      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xc0>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7ff fcd2 	bl	80026b0 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff fcce 	bl	80026b0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1f3      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0xe8>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d063      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d11c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b44      	ldr	r3, [pc, #272]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x152>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1c7      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4937      	ldr	r1, [pc, #220]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e03a      	b.n	8002e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_RCC_OscConfig+0x244>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7ff fc87 	bl	80026b0 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da6:	f7ff fc83 	bl	80026b0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1a8      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4925      	ldr	r1, [pc, #148]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x244>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff fc66 	bl	80026b0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de8:	f7ff fc62 	bl	80026b0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e187      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d036      	beq.n	8002e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_RCC_OscConfig+0x248>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7ff fc46 	bl	80026b0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e28:	f7ff fc42 	bl	80026b0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e167      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x200>
 8002e46:	e01b      	b.n	8002e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x248>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7ff fc2f 	bl	80026b0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	e00e      	b.n	8002e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e56:	f7ff fc2b 	bl	80026b0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d907      	bls.n	8002e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e150      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	42470000 	.word	0x42470000
 8002e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ea      	bne.n	8002e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8097 	beq.w	8002fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b81      	ldr	r3, [pc, #516]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b7d      	ldr	r3, [pc, #500]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a7c      	ldr	r2, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b7a      	ldr	r3, [pc, #488]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b77      	ldr	r3, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b74      	ldr	r3, [pc, #464]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a73      	ldr	r2, [pc, #460]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7ff fbeb 	bl	80026b0 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7ff fbe7 	bl	80026b0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e10c      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x474>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2ea>
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x324>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x30c>
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a5b      	ldr	r2, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x324>
 8002f34:	4b58      	ldr	r3, [pc, #352]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a57      	ldr	r2, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	4b55      	ldr	r3, [pc, #340]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a54      	ldr	r2, [pc, #336]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7ff fbac 	bl	80026b0 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7ff fba8 	bl	80026b0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0cb      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCC_OscConfig+0x334>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f80:	f7ff fb96 	bl	80026b0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7ff fb92 	bl	80026b0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0b5      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b39      	ldr	r3, [pc, #228]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	4a38      	ldr	r2, [pc, #224]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a1 	beq.w	8003108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d05c      	beq.n	800308c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d141      	bne.n	800305e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <HAL_RCC_OscConfig+0x478>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fb66 	bl	80026b0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff fb62 	bl	80026b0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e087      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	491b      	ldr	r1, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x478>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7ff fb3b 	bl	80026b0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7ff fb37 	bl	80026b0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e05c      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x416>
 800305c:	e054      	b.n	8003108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_RCC_OscConfig+0x478>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fb24 	bl	80026b0 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7ff fb20 	bl	80026b0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e045      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_OscConfig+0x470>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x444>
 800308a:	e03d      	b.n	8003108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e038      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000
 80030a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4ec>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d028      	beq.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d121      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d11a      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d111      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7ff fa52 	bl	80026b0 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7ff fa4e 	bl	80026b0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f9b2 	bl	8002628 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08005538 	.word	0x08005538
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e8:	b094      	sub	sp, #80	; 0x50
 80032ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
 80032f0:	2300      	movs	r3, #0
 80032f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f4:	2300      	movs	r3, #0
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032fc:	4b79      	ldr	r3, [pc, #484]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d00d      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x40>
 8003308:	2b08      	cmp	r3, #8
 800330a:	f200 80e1 	bhi.w	80034d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x34>
 8003312:	2b04      	cmp	r3, #4
 8003314:	d003      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x3a>
 8003316:	e0db      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b73      	ldr	r3, [pc, #460]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800331c:	e0db      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331e:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003320:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003322:	e0d8      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003324:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332e:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d063      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333a:	4b6a      	ldr	r3, [pc, #424]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	2200      	movs	r2, #0
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
 8003344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334c:	633b      	str	r3, [r7, #48]	; 0x30
 800334e:	2300      	movs	r3, #0
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
 8003352:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4621      	mov	r1, r4
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	6139      	str	r1, [r7, #16]
 8003374:	4629      	mov	r1, r5
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003388:	4659      	mov	r1, fp
 800338a:	018b      	lsls	r3, r1, #6
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003392:	4651      	mov	r1, sl
 8003394:	018a      	lsls	r2, r1, #6
 8003396:	4651      	mov	r1, sl
 8003398:	ebb2 0801 	subs.w	r8, r2, r1
 800339c:	4659      	mov	r1, fp
 800339e:	eb63 0901 	sbc.w	r9, r3, r1
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033b6:	4690      	mov	r8, r2
 80033b8:	4699      	mov	r9, r3
 80033ba:	4623      	mov	r3, r4
 80033bc:	eb18 0303 	adds.w	r3, r8, r3
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	462b      	mov	r3, r5
 80033c4:	eb49 0303 	adc.w	r3, r9, r3
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033d6:	4629      	mov	r1, r5
 80033d8:	024b      	lsls	r3, r1, #9
 80033da:	4621      	mov	r1, r4
 80033dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033e0:	4621      	mov	r1, r4
 80033e2:	024a      	lsls	r2, r1, #9
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f4:	f7fd fbac 	bl	8000b50 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4613      	mov	r3, r2
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	e058      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	4618      	mov	r0, r3
 800340c:	4611      	mov	r1, r2
 800340e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	f04f 0000 	mov.w	r0, #0
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	0159      	lsls	r1, r3, #5
 800342a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342e:	0150      	lsls	r0, r2, #5
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4641      	mov	r1, r8
 8003436:	ebb2 0a01 	subs.w	sl, r2, r1
 800343a:	4649      	mov	r1, r9
 800343c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800344c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003450:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003454:	ebb2 040a 	subs.w	r4, r2, sl
 8003458:	eb63 050b 	sbc.w	r5, r3, fp
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	00eb      	lsls	r3, r5, #3
 8003466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800346a:	00e2      	lsls	r2, r4, #3
 800346c:	4614      	mov	r4, r2
 800346e:	461d      	mov	r5, r3
 8003470:	4643      	mov	r3, r8
 8003472:	18e3      	adds	r3, r4, r3
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	464b      	mov	r3, r9
 8003478:	eb45 0303 	adc.w	r3, r5, r3
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800348a:	4629      	mov	r1, r5
 800348c:	028b      	lsls	r3, r1, #10
 800348e:	4621      	mov	r1, r4
 8003490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003494:	4621      	mov	r1, r4
 8003496:	028a      	lsls	r2, r1, #10
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800349e:	2200      	movs	r2, #0
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	61fa      	str	r2, [r7, #28]
 80034a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a8:	f7fd fb52 	bl	8000b50 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4613      	mov	r3, r2
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3750      	adds	r7, #80	; 0x50
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	08005548 	.word	0x08005548

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003534:	f7ff ffdc 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	08005548 	.word	0x08005548

08003558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e041      	b.n	80035ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe ff50 	bl	8002424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fbbc 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e044      	b.n	800369a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000

080036bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e097      	b.n	8003800 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7fe fe55 	bl	8002394 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003700:	f023 0307 	bic.w	r3, r3, #7
 8003704:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 faff 	bl	8003d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	4313      	orrs	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800375c:	f023 030c 	bic.w	r3, r3, #12
 8003760:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003768:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4313      	orrs	r3, r2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	011a      	lsls	r2, r3, #4
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	031b      	lsls	r3, r3, #12
 800378c:	4313      	orrs	r3, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	4313      	orrs	r3, r2
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003818:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003820:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003828:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003830:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d110      	bne.n	800385a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800383e:	7b7b      	ldrb	r3, [r7, #13]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d001      	beq.n	8003848 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e069      	b.n	800391c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003858:	e031      	b.n	80038be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d110      	bne.n	8003882 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003860:	7bbb      	ldrb	r3, [r7, #14]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003866:	7b3b      	ldrb	r3, [r7, #12]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d001      	beq.n	8003870 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e055      	b.n	800391c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	e01d      	b.n	80038be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d108      	bne.n	800389a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003888:	7bbb      	ldrb	r3, [r7, #14]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800388e:	7b7b      	ldrb	r3, [r7, #13]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003894:	7b3b      	ldrb	r3, [r7, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e03e      	b.n	800391c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_TIM_Encoder_Start+0xc4>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d008      	beq.n	80038dc <HAL_TIM_Encoder_Start+0xd4>
 80038ca:	e00f      	b.n	80038ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fb37 	bl	8003f48 <TIM_CCxChannelCmd>
      break;
 80038da:	e016      	b.n	800390a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2201      	movs	r2, #1
 80038e2:	2104      	movs	r1, #4
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fb2f 	bl	8003f48 <TIM_CCxChannelCmd>
      break;
 80038ea:	e00e      	b.n	800390a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb27 	bl	8003f48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2201      	movs	r2, #1
 8003900:	2104      	movs	r1, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fb20 	bl	8003f48 <TIM_CCxChannelCmd>
      break;
 8003908:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0202 	mvn.w	r2, #2
 8003950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9b5 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9a7 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9b8 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0204 	mvn.w	r2, #4
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f98b 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f97d 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f98e 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0208 	mvn.w	r2, #8
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f961 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f953 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f964 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0210 	mvn.w	r2, #16
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2208      	movs	r2, #8
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f937 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f929 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f93a 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0201 	mvn.w	r2, #1
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe f944 	bl	8001d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b80      	cmp	r3, #128	; 0x80
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fad8 	bl	8004084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8ff 	bl	8003cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d107      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0220 	mvn.w	r2, #32
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 faa2 	bl	8004070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_ConfigClockSource+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0b4      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x186>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b88:	d03e      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0xd4>
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	f200 8087 	bhi.w	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	f000 8086 	beq.w	8003ca6 <HAL_TIM_ConfigClockSource+0x172>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d87f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d01a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xa6>
 8003ba4:	2b70      	cmp	r3, #112	; 0x70
 8003ba6:	d87b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b60      	cmp	r3, #96	; 0x60
 8003baa:	d050      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x11a>
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d877      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b50      	cmp	r3, #80	; 0x50
 8003bb2:	d03c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xfa>
 8003bb4:	2b50      	cmp	r3, #80	; 0x50
 8003bb6:	d873      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d058      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x13a>
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d86f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b30      	cmp	r3, #48	; 0x30
 8003bc2:	d064      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bc4:	2b30      	cmp	r3, #48	; 0x30
 8003bc6:	d86b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d060      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d867      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05c      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d05a      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	e062      	b.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 f98d 	bl	8003f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	609a      	str	r2, [r3, #8]
      break;
 8003c06:	e04f      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f000 f976 	bl	8003f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2a:	609a      	str	r2, [r3, #8]
      break;
 8003c2c:	e03c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 f8ea 	bl	8003e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2150      	movs	r1, #80	; 0x50
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f943 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e02c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 f909 	bl	8003e72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2160      	movs	r1, #96	; 0x60
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f933 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e01c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 f8ca 	bl	8003e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f923 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f000 f91a 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <TIM_Base_SetConfig+0xe4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00f      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d32:	d00b      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <TIM_Base_SetConfig+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <TIM_Base_SetConfig+0xec>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0x38>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0xf0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <TIM_Base_SetConfig+0xe4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01b      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d017      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <TIM_Base_SetConfig+0xe8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <TIM_Base_SetConfig+0xec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00f      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <TIM_Base_SetConfig+0xf0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <TIM_Base_SetConfig+0xf4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <TIM_Base_SetConfig+0xf8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_Base_SetConfig+0x8a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <TIM_Base_SetConfig+0xfc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <TIM_Base_SetConfig+0xe4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b087      	sub	sp, #28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0210 	bic.w	r2, r3, #16
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f043 0307 	orr.w	r3, r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1a      	ldr	r2, [r3, #32]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1a      	ldr	r2, [r3, #32]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e050      	b.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d013      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10c      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e03f      	b.n	800412a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fe f9d8 	bl	8002474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f829 	bl	8004134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004138:	b0c0      	sub	sp, #256	; 0x100
 800413a:	af00      	add	r7, sp, #0
 800413c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	68d9      	ldr	r1, [r3, #12]
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	ea40 0301 	orr.w	r3, r0, r1
 800415c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	431a      	orrs	r2, r3
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	431a      	orrs	r2, r3
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800418c:	f021 010c 	bic.w	r1, r1, #12
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800419a:	430b      	orrs	r3, r1
 800419c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	6999      	ldr	r1, [r3, #24]
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	ea40 0301 	orr.w	r3, r0, r1
 80041ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b8f      	ldr	r3, [pc, #572]	; (8004400 <UART_SetConfig+0x2cc>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d005      	beq.n	80041d4 <UART_SetConfig+0xa0>
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b8d      	ldr	r3, [pc, #564]	; (8004404 <UART_SetConfig+0x2d0>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d104      	bne.n	80041de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d4:	f7ff f9ac 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 80041d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041dc:	e003      	b.n	80041e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041de:	f7ff f993 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 80041e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f0:	f040 810c 	bne.w	800440c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	1891      	adds	r1, r2, r2
 800420c:	65b9      	str	r1, [r7, #88]	; 0x58
 800420e:	415b      	adcs	r3, r3
 8004210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004216:	4621      	mov	r1, r4
 8004218:	eb12 0801 	adds.w	r8, r2, r1
 800421c:	4629      	mov	r1, r5
 800421e:	eb43 0901 	adc.w	r9, r3, r1
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004236:	4690      	mov	r8, r2
 8004238:	4699      	mov	r9, r3
 800423a:	4623      	mov	r3, r4
 800423c:	eb18 0303 	adds.w	r3, r8, r3
 8004240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004244:	462b      	mov	r3, r5
 8004246:	eb49 0303 	adc.w	r3, r9, r3
 800424a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800425a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800425e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004262:	460b      	mov	r3, r1
 8004264:	18db      	adds	r3, r3, r3
 8004266:	653b      	str	r3, [r7, #80]	; 0x50
 8004268:	4613      	mov	r3, r2
 800426a:	eb42 0303 	adc.w	r3, r2, r3
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
 8004270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004278:	f7fc fc6a 	bl	8000b50 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4b61      	ldr	r3, [pc, #388]	; (8004408 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	011c      	lsls	r4, r3, #4
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80042a4:	415b      	adcs	r3, r3
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042ac:	4641      	mov	r1, r8
 80042ae:	eb12 0a01 	adds.w	sl, r2, r1
 80042b2:	4649      	mov	r1, r9
 80042b4:	eb43 0b01 	adc.w	fp, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042cc:	4692      	mov	sl, r2
 80042ce:	469b      	mov	fp, r3
 80042d0:	4643      	mov	r3, r8
 80042d2:	eb1a 0303 	adds.w	r3, sl, r3
 80042d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042da:	464b      	mov	r3, r9
 80042dc:	eb4b 0303 	adc.w	r3, fp, r3
 80042e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042f8:	460b      	mov	r3, r1
 80042fa:	18db      	adds	r3, r3, r3
 80042fc:	643b      	str	r3, [r7, #64]	; 0x40
 80042fe:	4613      	mov	r3, r2
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
 8004306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800430e:	f7fc fc1f 	bl	8000b50 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4611      	mov	r1, r2
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <UART_SetConfig+0x2d4>)
 800431a:	fba3 2301 	umull	r2, r3, r3, r1
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2264      	movs	r2, #100	; 0x64
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	1acb      	subs	r3, r1, r3
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <UART_SetConfig+0x2d4>)
 8004330:	fba3 2302 	umull	r2, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800433c:	441c      	add	r4, r3
 800433e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800434c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	1891      	adds	r1, r2, r2
 8004356:	63b9      	str	r1, [r7, #56]	; 0x38
 8004358:	415b      	adcs	r3, r3
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004360:	4641      	mov	r1, r8
 8004362:	1851      	adds	r1, r2, r1
 8004364:	6339      	str	r1, [r7, #48]	; 0x30
 8004366:	4649      	mov	r1, r9
 8004368:	414b      	adcs	r3, r1
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004378:	4659      	mov	r1, fp
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4651      	mov	r1, sl
 800437e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004382:	4651      	mov	r1, sl
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4642      	mov	r2, r8
 800438e:	189b      	adds	r3, r3, r2
 8004390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004394:	464b      	mov	r3, r9
 8004396:	460a      	mov	r2, r1
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043b4:	460b      	mov	r3, r1
 80043b6:	18db      	adds	r3, r3, r3
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ba:	4613      	mov	r3, r2
 80043bc:	eb42 0303 	adc.w	r3, r2, r3
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ca:	f7fc fbc1 	bl	8000b50 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <UART_SetConfig+0x2d4>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <UART_SetConfig+0x2d4>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 0207 	and.w	r2, r3, #7
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4422      	add	r2, r4
 80043fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043fc:	e105      	b.n	800460a <UART_SetConfig+0x4d6>
 80043fe:	bf00      	nop
 8004400:	40011000 	.word	0x40011000
 8004404:	40011400 	.word	0x40011400
 8004408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800441a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800441e:	4642      	mov	r2, r8
 8004420:	464b      	mov	r3, r9
 8004422:	1891      	adds	r1, r2, r2
 8004424:	6239      	str	r1, [r7, #32]
 8004426:	415b      	adcs	r3, r3
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800442e:	4641      	mov	r1, r8
 8004430:	1854      	adds	r4, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0501 	adc.w	r5, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	00eb      	lsls	r3, r5, #3
 8004442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004446:	00e2      	lsls	r2, r4, #3
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	4643      	mov	r3, r8
 800444e:	18e3      	adds	r3, r4, r3
 8004450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004454:	464b      	mov	r3, r9
 8004456:	eb45 0303 	adc.w	r3, r5, r3
 800445a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800447a:	4629      	mov	r1, r5
 800447c:	008b      	lsls	r3, r1, #2
 800447e:	4621      	mov	r1, r4
 8004480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004484:	4621      	mov	r1, r4
 8004486:	008a      	lsls	r2, r1, #2
 8004488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800448c:	f7fc fb60 	bl	8000b50 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4b60      	ldr	r3, [pc, #384]	; (8004618 <UART_SetConfig+0x4e4>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011c      	lsls	r4, r3, #4
 800449e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	61b9      	str	r1, [r7, #24]
 80044b8:	415b      	adcs	r3, r3
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c0:	4641      	mov	r1, r8
 80044c2:	1851      	adds	r1, r2, r1
 80044c4:	6139      	str	r1, [r7, #16]
 80044c6:	4649      	mov	r1, r9
 80044c8:	414b      	adcs	r3, r1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d8:	4659      	mov	r1, fp
 80044da:	00cb      	lsls	r3, r1, #3
 80044dc:	4651      	mov	r1, sl
 80044de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e2:	4651      	mov	r1, sl
 80044e4:	00ca      	lsls	r2, r1, #3
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	4642      	mov	r2, r8
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f4:	464b      	mov	r3, r9
 80044f6:	460a      	mov	r2, r1
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	67bb      	str	r3, [r7, #120]	; 0x78
 800450a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004518:	4649      	mov	r1, r9
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	4641      	mov	r1, r8
 800451e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004522:	4641      	mov	r1, r8
 8004524:	008a      	lsls	r2, r1, #2
 8004526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800452a:	f7fc fb11 	bl	8000b50 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <UART_SetConfig+0x4e4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a34      	ldr	r2, [pc, #208]	; (8004618 <UART_SetConfig+0x4e4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004552:	441c      	add	r4, r3
 8004554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004558:	2200      	movs	r2, #0
 800455a:	673b      	str	r3, [r7, #112]	; 0x70
 800455c:	677a      	str	r2, [r7, #116]	; 0x74
 800455e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004562:	4642      	mov	r2, r8
 8004564:	464b      	mov	r3, r9
 8004566:	1891      	adds	r1, r2, r2
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	415b      	adcs	r3, r3
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004572:	4641      	mov	r1, r8
 8004574:	1851      	adds	r1, r2, r1
 8004576:	6039      	str	r1, [r7, #0]
 8004578:	4649      	mov	r1, r9
 800457a:	414b      	adcs	r3, r1
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800458a:	4659      	mov	r1, fp
 800458c:	00cb      	lsls	r3, r1, #3
 800458e:	4651      	mov	r1, sl
 8004590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004594:	4651      	mov	r1, sl
 8004596:	00ca      	lsls	r2, r1, #3
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	4603      	mov	r3, r0
 800459e:	4642      	mov	r2, r8
 80045a0:	189b      	adds	r3, r3, r2
 80045a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a4:	464b      	mov	r3, r9
 80045a6:	460a      	mov	r2, r1
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	663b      	str	r3, [r7, #96]	; 0x60
 80045b8:	667a      	str	r2, [r7, #100]	; 0x64
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045c6:	4649      	mov	r1, r9
 80045c8:	008b      	lsls	r3, r1, #2
 80045ca:	4641      	mov	r1, r8
 80045cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d0:	4641      	mov	r1, r8
 80045d2:	008a      	lsls	r2, r1, #2
 80045d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045d8:	f7fc faba 	bl	8000b50 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <UART_SetConfig+0x4e4>)
 80045e2:	fba3 1302 	umull	r1, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2164      	movs	r1, #100	; 0x64
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	3332      	adds	r3, #50	; 0x32
 80045f4:	4a08      	ldr	r2, [pc, #32]	; (8004618 <UART_SetConfig+0x4e4>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4422      	add	r2, r4
 8004608:	609a      	str	r2, [r3, #8]
}
 800460a:	bf00      	nop
 800460c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004616:	bf00      	nop
 8004618:	51eb851f 	.word	0x51eb851f

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 ff4a 	bl	80054d4 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08005588 	.word	0x08005588
 8004664:	08005588 	.word	0x08005588
 8004668:	08005588 	.word	0x08005588
 800466c:	0800558c 	.word	0x0800558c

08004670 <memcpy>:
 8004670:	440a      	add	r2, r1
 8004672:	4291      	cmp	r1, r2
 8004674:	f100 33ff 	add.w	r3, r0, #4294967295
 8004678:	d100      	bne.n	800467c <memcpy+0xc>
 800467a:	4770      	bx	lr
 800467c:	b510      	push	{r4, lr}
 800467e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004686:	4291      	cmp	r1, r2
 8004688:	d1f9      	bne.n	800467e <memcpy+0xe>
 800468a:	bd10      	pop	{r4, pc}

0800468c <memset>:
 800468c:	4402      	add	r2, r0
 800468e:	4603      	mov	r3, r0
 8004690:	4293      	cmp	r3, r2
 8004692:	d100      	bne.n	8004696 <memset+0xa>
 8004694:	4770      	bx	lr
 8004696:	f803 1b01 	strb.w	r1, [r3], #1
 800469a:	e7f9      	b.n	8004690 <memset+0x4>

0800469c <pow>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	ed2d 8b02 	vpush	{d8}
 80046a2:	eeb0 8a40 	vmov.f32	s16, s0
 80046a6:	eef0 8a60 	vmov.f32	s17, s1
 80046aa:	ec55 4b11 	vmov	r4, r5, d1
 80046ae:	f000 f867 	bl	8004780 <__ieee754_pow>
 80046b2:	4622      	mov	r2, r4
 80046b4:	462b      	mov	r3, r5
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	ec57 6b10 	vmov	r6, r7, d0
 80046be:	f7fc f9e1 	bl	8000a84 <__aeabi_dcmpun>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d13b      	bne.n	800473e <pow+0xa2>
 80046c6:	ec51 0b18 	vmov	r0, r1, d8
 80046ca:	2200      	movs	r2, #0
 80046cc:	2300      	movs	r3, #0
 80046ce:	f7fc f9a7 	bl	8000a20 <__aeabi_dcmpeq>
 80046d2:	b1b8      	cbz	r0, 8004704 <pow+0x68>
 80046d4:	2200      	movs	r2, #0
 80046d6:	2300      	movs	r3, #0
 80046d8:	4620      	mov	r0, r4
 80046da:	4629      	mov	r1, r5
 80046dc:	f7fc f9a0 	bl	8000a20 <__aeabi_dcmpeq>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d146      	bne.n	8004772 <pow+0xd6>
 80046e4:	ec45 4b10 	vmov	d0, r4, r5
 80046e8:	f000 fe63 	bl	80053b2 <finite>
 80046ec:	b338      	cbz	r0, 800473e <pow+0xa2>
 80046ee:	2200      	movs	r2, #0
 80046f0:	2300      	movs	r3, #0
 80046f2:	4620      	mov	r0, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	f7fc f99d 	bl	8000a34 <__aeabi_dcmplt>
 80046fa:	b300      	cbz	r0, 800473e <pow+0xa2>
 80046fc:	f7ff ff8e 	bl	800461c <__errno>
 8004700:	2322      	movs	r3, #34	; 0x22
 8004702:	e01b      	b.n	800473c <pow+0xa0>
 8004704:	ec47 6b10 	vmov	d0, r6, r7
 8004708:	f000 fe53 	bl	80053b2 <finite>
 800470c:	b9e0      	cbnz	r0, 8004748 <pow+0xac>
 800470e:	eeb0 0a48 	vmov.f32	s0, s16
 8004712:	eef0 0a68 	vmov.f32	s1, s17
 8004716:	f000 fe4c 	bl	80053b2 <finite>
 800471a:	b1a8      	cbz	r0, 8004748 <pow+0xac>
 800471c:	ec45 4b10 	vmov	d0, r4, r5
 8004720:	f000 fe47 	bl	80053b2 <finite>
 8004724:	b180      	cbz	r0, 8004748 <pow+0xac>
 8004726:	4632      	mov	r2, r6
 8004728:	463b      	mov	r3, r7
 800472a:	4630      	mov	r0, r6
 800472c:	4639      	mov	r1, r7
 800472e:	f7fc f9a9 	bl	8000a84 <__aeabi_dcmpun>
 8004732:	2800      	cmp	r0, #0
 8004734:	d0e2      	beq.n	80046fc <pow+0x60>
 8004736:	f7ff ff71 	bl	800461c <__errno>
 800473a:	2321      	movs	r3, #33	; 0x21
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	ecbd 8b02 	vpop	{d8}
 8004742:	ec47 6b10 	vmov	d0, r6, r7
 8004746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004748:	2200      	movs	r2, #0
 800474a:	2300      	movs	r3, #0
 800474c:	4630      	mov	r0, r6
 800474e:	4639      	mov	r1, r7
 8004750:	f7fc f966 	bl	8000a20 <__aeabi_dcmpeq>
 8004754:	2800      	cmp	r0, #0
 8004756:	d0f2      	beq.n	800473e <pow+0xa2>
 8004758:	eeb0 0a48 	vmov.f32	s0, s16
 800475c:	eef0 0a68 	vmov.f32	s1, s17
 8004760:	f000 fe27 	bl	80053b2 <finite>
 8004764:	2800      	cmp	r0, #0
 8004766:	d0ea      	beq.n	800473e <pow+0xa2>
 8004768:	ec45 4b10 	vmov	d0, r4, r5
 800476c:	f000 fe21 	bl	80053b2 <finite>
 8004770:	e7c3      	b.n	80046fa <pow+0x5e>
 8004772:	4f01      	ldr	r7, [pc, #4]	; (8004778 <pow+0xdc>)
 8004774:	2600      	movs	r6, #0
 8004776:	e7e2      	b.n	800473e <pow+0xa2>
 8004778:	3ff00000 	.word	0x3ff00000
 800477c:	00000000 	.word	0x00000000

08004780 <__ieee754_pow>:
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	ed2d 8b06 	vpush	{d8-d10}
 8004788:	b089      	sub	sp, #36	; 0x24
 800478a:	ed8d 1b00 	vstr	d1, [sp]
 800478e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004792:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004796:	ea58 0102 	orrs.w	r1, r8, r2
 800479a:	ec57 6b10 	vmov	r6, r7, d0
 800479e:	d115      	bne.n	80047cc <__ieee754_pow+0x4c>
 80047a0:	19b3      	adds	r3, r6, r6
 80047a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80047a6:	4152      	adcs	r2, r2
 80047a8:	4299      	cmp	r1, r3
 80047aa:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <__ieee754_pow+0x250>)
 80047ac:	4193      	sbcs	r3, r2
 80047ae:	f080 84d2 	bcs.w	8005156 <__ieee754_pow+0x9d6>
 80047b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047b6:	4630      	mov	r0, r6
 80047b8:	4639      	mov	r1, r7
 80047ba:	f7fb fd13 	bl	80001e4 <__adddf3>
 80047be:	ec41 0b10 	vmov	d0, r0, r1
 80047c2:	b009      	add	sp, #36	; 0x24
 80047c4:	ecbd 8b06 	vpop	{d8-d10}
 80047c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047cc:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <__ieee754_pow+0x254>)
 80047ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80047d2:	429c      	cmp	r4, r3
 80047d4:	ee10 aa10 	vmov	sl, s0
 80047d8:	463d      	mov	r5, r7
 80047da:	dc06      	bgt.n	80047ea <__ieee754_pow+0x6a>
 80047dc:	d101      	bne.n	80047e2 <__ieee754_pow+0x62>
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d1e7      	bne.n	80047b2 <__ieee754_pow+0x32>
 80047e2:	4598      	cmp	r8, r3
 80047e4:	dc01      	bgt.n	80047ea <__ieee754_pow+0x6a>
 80047e6:	d10f      	bne.n	8004808 <__ieee754_pow+0x88>
 80047e8:	b172      	cbz	r2, 8004808 <__ieee754_pow+0x88>
 80047ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80047ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80047f2:	ea55 050a 	orrs.w	r5, r5, sl
 80047f6:	d1dc      	bne.n	80047b2 <__ieee754_pow+0x32>
 80047f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80047fc:	18db      	adds	r3, r3, r3
 80047fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004802:	4152      	adcs	r2, r2
 8004804:	429d      	cmp	r5, r3
 8004806:	e7d0      	b.n	80047aa <__ieee754_pow+0x2a>
 8004808:	2d00      	cmp	r5, #0
 800480a:	da3b      	bge.n	8004884 <__ieee754_pow+0x104>
 800480c:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <__ieee754_pow+0x258>)
 800480e:	4598      	cmp	r8, r3
 8004810:	dc51      	bgt.n	80048b6 <__ieee754_pow+0x136>
 8004812:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004816:	4598      	cmp	r8, r3
 8004818:	f340 84ac 	ble.w	8005174 <__ieee754_pow+0x9f4>
 800481c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004824:	2b14      	cmp	r3, #20
 8004826:	dd0f      	ble.n	8004848 <__ieee754_pow+0xc8>
 8004828:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800482c:	fa22 f103 	lsr.w	r1, r2, r3
 8004830:	fa01 f303 	lsl.w	r3, r1, r3
 8004834:	4293      	cmp	r3, r2
 8004836:	f040 849d 	bne.w	8005174 <__ieee754_pow+0x9f4>
 800483a:	f001 0101 	and.w	r1, r1, #1
 800483e:	f1c1 0302 	rsb	r3, r1, #2
 8004842:	9304      	str	r3, [sp, #16]
 8004844:	b182      	cbz	r2, 8004868 <__ieee754_pow+0xe8>
 8004846:	e05f      	b.n	8004908 <__ieee754_pow+0x188>
 8004848:	2a00      	cmp	r2, #0
 800484a:	d15b      	bne.n	8004904 <__ieee754_pow+0x184>
 800484c:	f1c3 0314 	rsb	r3, r3, #20
 8004850:	fa48 f103 	asr.w	r1, r8, r3
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	4543      	cmp	r3, r8
 800485a:	f040 8488 	bne.w	800516e <__ieee754_pow+0x9ee>
 800485e:	f001 0101 	and.w	r1, r1, #1
 8004862:	f1c1 0302 	rsb	r3, r1, #2
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	4b5c      	ldr	r3, [pc, #368]	; (80049dc <__ieee754_pow+0x25c>)
 800486a:	4598      	cmp	r8, r3
 800486c:	d132      	bne.n	80048d4 <__ieee754_pow+0x154>
 800486e:	f1b9 0f00 	cmp.w	r9, #0
 8004872:	f280 8478 	bge.w	8005166 <__ieee754_pow+0x9e6>
 8004876:	4959      	ldr	r1, [pc, #356]	; (80049dc <__ieee754_pow+0x25c>)
 8004878:	4632      	mov	r2, r6
 800487a:	463b      	mov	r3, r7
 800487c:	2000      	movs	r0, #0
 800487e:	f7fb ff91 	bl	80007a4 <__aeabi_ddiv>
 8004882:	e79c      	b.n	80047be <__ieee754_pow+0x3e>
 8004884:	2300      	movs	r3, #0
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	2a00      	cmp	r2, #0
 800488a:	d13d      	bne.n	8004908 <__ieee754_pow+0x188>
 800488c:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <__ieee754_pow+0x254>)
 800488e:	4598      	cmp	r8, r3
 8004890:	d1ea      	bne.n	8004868 <__ieee754_pow+0xe8>
 8004892:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004896:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800489a:	ea53 030a 	orrs.w	r3, r3, sl
 800489e:	f000 845a 	beq.w	8005156 <__ieee754_pow+0x9d6>
 80048a2:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <__ieee754_pow+0x260>)
 80048a4:	429c      	cmp	r4, r3
 80048a6:	dd08      	ble.n	80048ba <__ieee754_pow+0x13a>
 80048a8:	f1b9 0f00 	cmp.w	r9, #0
 80048ac:	f2c0 8457 	blt.w	800515e <__ieee754_pow+0x9de>
 80048b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048b4:	e783      	b.n	80047be <__ieee754_pow+0x3e>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e7e5      	b.n	8004886 <__ieee754_pow+0x106>
 80048ba:	f1b9 0f00 	cmp.w	r9, #0
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	f6bf af7a 	bge.w	80047be <__ieee754_pow+0x3e>
 80048ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80048ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80048d2:	e774      	b.n	80047be <__ieee754_pow+0x3e>
 80048d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80048d8:	d106      	bne.n	80048e8 <__ieee754_pow+0x168>
 80048da:	4632      	mov	r2, r6
 80048dc:	463b      	mov	r3, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb fe35 	bl	8000550 <__aeabi_dmul>
 80048e6:	e76a      	b.n	80047be <__ieee754_pow+0x3e>
 80048e8:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <__ieee754_pow+0x264>)
 80048ea:	4599      	cmp	r9, r3
 80048ec:	d10c      	bne.n	8004908 <__ieee754_pow+0x188>
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	db0a      	blt.n	8004908 <__ieee754_pow+0x188>
 80048f2:	ec47 6b10 	vmov	d0, r6, r7
 80048f6:	b009      	add	sp, #36	; 0x24
 80048f8:	ecbd 8b06 	vpop	{d8-d10}
 80048fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	f000 bc6c 	b.w	80051dc <__ieee754_sqrt>
 8004904:	2300      	movs	r3, #0
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	ec47 6b10 	vmov	d0, r6, r7
 800490c:	f000 fd48 	bl	80053a0 <fabs>
 8004910:	ec51 0b10 	vmov	r0, r1, d0
 8004914:	f1ba 0f00 	cmp.w	sl, #0
 8004918:	d129      	bne.n	800496e <__ieee754_pow+0x1ee>
 800491a:	b124      	cbz	r4, 8004926 <__ieee754_pow+0x1a6>
 800491c:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <__ieee754_pow+0x25c>)
 800491e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004922:	429a      	cmp	r2, r3
 8004924:	d123      	bne.n	800496e <__ieee754_pow+0x1ee>
 8004926:	f1b9 0f00 	cmp.w	r9, #0
 800492a:	da05      	bge.n	8004938 <__ieee754_pow+0x1b8>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	2000      	movs	r0, #0
 8004932:	492a      	ldr	r1, [pc, #168]	; (80049dc <__ieee754_pow+0x25c>)
 8004934:	f7fb ff36 	bl	80007a4 <__aeabi_ddiv>
 8004938:	2d00      	cmp	r5, #0
 800493a:	f6bf af40 	bge.w	80047be <__ieee754_pow+0x3e>
 800493e:	9b04      	ldr	r3, [sp, #16]
 8004940:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004944:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004948:	4323      	orrs	r3, r4
 800494a:	d108      	bne.n	800495e <__ieee754_pow+0x1de>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	f7fb fc44 	bl	80001e0 <__aeabi_dsub>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	e78f      	b.n	800487e <__ieee754_pow+0xfe>
 800495e:	9b04      	ldr	r3, [sp, #16]
 8004960:	2b01      	cmp	r3, #1
 8004962:	f47f af2c 	bne.w	80047be <__ieee754_pow+0x3e>
 8004966:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800496a:	4619      	mov	r1, r3
 800496c:	e727      	b.n	80047be <__ieee754_pow+0x3e>
 800496e:	0feb      	lsrs	r3, r5, #31
 8004970:	3b01      	subs	r3, #1
 8004972:	9306      	str	r3, [sp, #24]
 8004974:	9a06      	ldr	r2, [sp, #24]
 8004976:	9b04      	ldr	r3, [sp, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	d102      	bne.n	8004982 <__ieee754_pow+0x202>
 800497c:	4632      	mov	r2, r6
 800497e:	463b      	mov	r3, r7
 8004980:	e7e6      	b.n	8004950 <__ieee754_pow+0x1d0>
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <__ieee754_pow+0x268>)
 8004984:	4598      	cmp	r8, r3
 8004986:	f340 80fb 	ble.w	8004b80 <__ieee754_pow+0x400>
 800498a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800498e:	4598      	cmp	r8, r3
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <__ieee754_pow+0x260>)
 8004992:	dd0c      	ble.n	80049ae <__ieee754_pow+0x22e>
 8004994:	429c      	cmp	r4, r3
 8004996:	dc0f      	bgt.n	80049b8 <__ieee754_pow+0x238>
 8004998:	f1b9 0f00 	cmp.w	r9, #0
 800499c:	da0f      	bge.n	80049be <__ieee754_pow+0x23e>
 800499e:	2000      	movs	r0, #0
 80049a0:	b009      	add	sp, #36	; 0x24
 80049a2:	ecbd 8b06 	vpop	{d8-d10}
 80049a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	f000 bcf0 	b.w	800538e <__math_oflow>
 80049ae:	429c      	cmp	r4, r3
 80049b0:	dbf2      	blt.n	8004998 <__ieee754_pow+0x218>
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <__ieee754_pow+0x25c>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	dd19      	ble.n	80049ec <__ieee754_pow+0x26c>
 80049b8:	f1b9 0f00 	cmp.w	r9, #0
 80049bc:	dcef      	bgt.n	800499e <__ieee754_pow+0x21e>
 80049be:	2000      	movs	r0, #0
 80049c0:	b009      	add	sp, #36	; 0x24
 80049c2:	ecbd 8b06 	vpop	{d8-d10}
 80049c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f000 bcd7 	b.w	800537c <__math_uflow>
 80049ce:	bf00      	nop
 80049d0:	fff00000 	.word	0xfff00000
 80049d4:	7ff00000 	.word	0x7ff00000
 80049d8:	433fffff 	.word	0x433fffff
 80049dc:	3ff00000 	.word	0x3ff00000
 80049e0:	3fefffff 	.word	0x3fefffff
 80049e4:	3fe00000 	.word	0x3fe00000
 80049e8:	41e00000 	.word	0x41e00000
 80049ec:	4b60      	ldr	r3, [pc, #384]	; (8004b70 <__ieee754_pow+0x3f0>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	f7fb fbf6 	bl	80001e0 <__aeabi_dsub>
 80049f4:	a354      	add	r3, pc, #336	; (adr r3, 8004b48 <__ieee754_pow+0x3c8>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	4604      	mov	r4, r0
 80049fc:	460d      	mov	r5, r1
 80049fe:	f7fb fda7 	bl	8000550 <__aeabi_dmul>
 8004a02:	a353      	add	r3, pc, #332	; (adr r3, 8004b50 <__ieee754_pow+0x3d0>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	4606      	mov	r6, r0
 8004a0a:	460f      	mov	r7, r1
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fd9e 	bl	8000550 <__aeabi_dmul>
 8004a14:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <__ieee754_pow+0x3f4>)
 8004a16:	4682      	mov	sl, r0
 8004a18:	468b      	mov	fp, r1
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fb fd96 	bl	8000550 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	a14b      	add	r1, pc, #300	; (adr r1, 8004b58 <__ieee754_pow+0x3d8>)
 8004a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2e:	f7fb fbd7 	bl	80001e0 <__aeabi_dsub>
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	f7fb fd8b 	bl	8000550 <__aeabi_dmul>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	2000      	movs	r0, #0
 8004a40:	494d      	ldr	r1, [pc, #308]	; (8004b78 <__ieee754_pow+0x3f8>)
 8004a42:	f7fb fbcd 	bl	80001e0 <__aeabi_dsub>
 8004a46:	4622      	mov	r2, r4
 8004a48:	4680      	mov	r8, r0
 8004a4a:	4689      	mov	r9, r1
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb fd7d 	bl	8000550 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb fd77 	bl	8000550 <__aeabi_dmul>
 8004a62:	a33f      	add	r3, pc, #252	; (adr r3, 8004b60 <__ieee754_pow+0x3e0>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fd72 	bl	8000550 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4650      	mov	r0, sl
 8004a72:	4659      	mov	r1, fp
 8004a74:	f7fb fbb4 	bl	80001e0 <__aeabi_dsub>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4680      	mov	r8, r0
 8004a7e:	4689      	mov	r9, r1
 8004a80:	4630      	mov	r0, r6
 8004a82:	4639      	mov	r1, r7
 8004a84:	f7fb fbae 	bl	80001e4 <__adddf3>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	4604      	mov	r4, r0
 8004a90:	460d      	mov	r5, r1
 8004a92:	f7fb fba5 	bl	80001e0 <__aeabi_dsub>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	f7fb fb9f 	bl	80001e0 <__aeabi_dsub>
 8004aa2:	9b04      	ldr	r3, [sp, #16]
 8004aa4:	9a06      	ldr	r2, [sp, #24]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	4682      	mov	sl, r0
 8004aac:	468b      	mov	fp, r1
 8004aae:	f040 81e7 	bne.w	8004e80 <__ieee754_pow+0x700>
 8004ab2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004b68 <__ieee754_pow+0x3e8>
 8004ab6:	eeb0 8a47 	vmov.f32	s16, s14
 8004aba:	eef0 8a67 	vmov.f32	s17, s15
 8004abe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004acc:	f7fb fb88 	bl	80001e0 <__aeabi_dsub>
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	f7fb fd3c 	bl	8000550 <__aeabi_dmul>
 8004ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004adc:	4680      	mov	r8, r0
 8004ade:	4689      	mov	r9, r1
 8004ae0:	4650      	mov	r0, sl
 8004ae2:	4659      	mov	r1, fp
 8004ae4:	f7fb fd34 	bl	8000550 <__aeabi_dmul>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4640      	mov	r0, r8
 8004aee:	4649      	mov	r1, r9
 8004af0:	f7fb fb78 	bl	80001e4 <__adddf3>
 8004af4:	4632      	mov	r2, r6
 8004af6:	463b      	mov	r3, r7
 8004af8:	4680      	mov	r8, r0
 8004afa:	4689      	mov	r9, r1
 8004afc:	4620      	mov	r0, r4
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7fb fd26 	bl	8000550 <__aeabi_dmul>
 8004b04:	460b      	mov	r3, r1
 8004b06:	4604      	mov	r4, r0
 8004b08:	460d      	mov	r5, r1
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f7fb fb68 	bl	80001e4 <__adddf3>
 8004b14:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <__ieee754_pow+0x3fc>)
 8004b16:	4299      	cmp	r1, r3
 8004b18:	ec45 4b19 	vmov	d9, r4, r5
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	460f      	mov	r7, r1
 8004b20:	468b      	mov	fp, r1
 8004b22:	f340 82f1 	ble.w	8005108 <__ieee754_pow+0x988>
 8004b26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004b2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004b2e:	4303      	orrs	r3, r0
 8004b30:	f000 81e4 	beq.w	8004efc <__ieee754_pow+0x77c>
 8004b34:	ec51 0b18 	vmov	r0, r1, d8
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f7fb ff7a 	bl	8000a34 <__aeabi_dcmplt>
 8004b40:	3800      	subs	r0, #0
 8004b42:	bf18      	it	ne
 8004b44:	2001      	movne	r0, #1
 8004b46:	e72b      	b.n	80049a0 <__ieee754_pow+0x220>
 8004b48:	60000000 	.word	0x60000000
 8004b4c:	3ff71547 	.word	0x3ff71547
 8004b50:	f85ddf44 	.word	0xf85ddf44
 8004b54:	3e54ae0b 	.word	0x3e54ae0b
 8004b58:	55555555 	.word	0x55555555
 8004b5c:	3fd55555 	.word	0x3fd55555
 8004b60:	652b82fe 	.word	0x652b82fe
 8004b64:	3ff71547 	.word	0x3ff71547
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	bff00000 	.word	0xbff00000
 8004b70:	3ff00000 	.word	0x3ff00000
 8004b74:	3fd00000 	.word	0x3fd00000
 8004b78:	3fe00000 	.word	0x3fe00000
 8004b7c:	408fffff 	.word	0x408fffff
 8004b80:	4bd5      	ldr	r3, [pc, #852]	; (8004ed8 <__ieee754_pow+0x758>)
 8004b82:	402b      	ands	r3, r5
 8004b84:	2200      	movs	r2, #0
 8004b86:	b92b      	cbnz	r3, 8004b94 <__ieee754_pow+0x414>
 8004b88:	4bd4      	ldr	r3, [pc, #848]	; (8004edc <__ieee754_pow+0x75c>)
 8004b8a:	f7fb fce1 	bl	8000550 <__aeabi_dmul>
 8004b8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b92:	460c      	mov	r4, r1
 8004b94:	1523      	asrs	r3, r4, #20
 8004b96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b9a:	4413      	add	r3, r2
 8004b9c:	9305      	str	r3, [sp, #20]
 8004b9e:	4bd0      	ldr	r3, [pc, #832]	; (8004ee0 <__ieee754_pow+0x760>)
 8004ba0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004ba4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004bae:	dd08      	ble.n	8004bc2 <__ieee754_pow+0x442>
 8004bb0:	4bcc      	ldr	r3, [pc, #816]	; (8004ee4 <__ieee754_pow+0x764>)
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	f340 8162 	ble.w	8004e7c <__ieee754_pow+0x6fc>
 8004bb8:	9b05      	ldr	r3, [sp, #20]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004bc2:	2400      	movs	r4, #0
 8004bc4:	00e3      	lsls	r3, r4, #3
 8004bc6:	9307      	str	r3, [sp, #28]
 8004bc8:	4bc7      	ldr	r3, [pc, #796]	; (8004ee8 <__ieee754_pow+0x768>)
 8004bca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bce:	ed93 7b00 	vldr	d7, [r3]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	ec53 2b17 	vmov	r2, r3, d7
 8004bd8:	eeb0 9a47 	vmov.f32	s18, s14
 8004bdc:	eef0 9a67 	vmov.f32	s19, s15
 8004be0:	4682      	mov	sl, r0
 8004be2:	f7fb fafd 	bl	80001e0 <__aeabi_dsub>
 8004be6:	4652      	mov	r2, sl
 8004be8:	4606      	mov	r6, r0
 8004bea:	460f      	mov	r7, r1
 8004bec:	462b      	mov	r3, r5
 8004bee:	ec51 0b19 	vmov	r0, r1, d9
 8004bf2:	f7fb faf7 	bl	80001e4 <__adddf3>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	49bb      	ldr	r1, [pc, #748]	; (8004eec <__ieee754_pow+0x76c>)
 8004bfe:	f7fb fdd1 	bl	80007a4 <__aeabi_ddiv>
 8004c02:	ec41 0b1a 	vmov	d10, r0, r1
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb fc9f 	bl	8000550 <__aeabi_dmul>
 8004c12:	2300      	movs	r3, #0
 8004c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c18:	9302      	str	r3, [sp, #8]
 8004c1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004c1e:	46ab      	mov	fp, r5
 8004c20:	106d      	asrs	r5, r5, #1
 8004c22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004c26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004c2a:	ec41 0b18 	vmov	d8, r0, r1
 8004c2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004c32:	2200      	movs	r2, #0
 8004c34:	4640      	mov	r0, r8
 8004c36:	4649      	mov	r1, r9
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	f7fb fc88 	bl	8000550 <__aeabi_dmul>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4630      	mov	r0, r6
 8004c46:	4639      	mov	r1, r7
 8004c48:	f7fb faca 	bl	80001e0 <__aeabi_dsub>
 8004c4c:	ec53 2b19 	vmov	r2, r3, d9
 8004c50:	4606      	mov	r6, r0
 8004c52:	460f      	mov	r7, r1
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	f7fb fac2 	bl	80001e0 <__aeabi_dsub>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4650      	mov	r0, sl
 8004c62:	4659      	mov	r1, fp
 8004c64:	f7fb fabc 	bl	80001e0 <__aeabi_dsub>
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	f7fb fc70 	bl	8000550 <__aeabi_dmul>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4630      	mov	r0, r6
 8004c76:	4639      	mov	r1, r7
 8004c78:	f7fb fab2 	bl	80001e0 <__aeabi_dsub>
 8004c7c:	ec53 2b1a 	vmov	r2, r3, d10
 8004c80:	f7fb fc66 	bl	8000550 <__aeabi_dmul>
 8004c84:	ec53 2b18 	vmov	r2, r3, d8
 8004c88:	ec41 0b19 	vmov	d9, r0, r1
 8004c8c:	ec51 0b18 	vmov	r0, r1, d8
 8004c90:	f7fb fc5e 	bl	8000550 <__aeabi_dmul>
 8004c94:	a37c      	add	r3, pc, #496	; (adr r3, 8004e88 <__ieee754_pow+0x708>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	f7fb fc57 	bl	8000550 <__aeabi_dmul>
 8004ca2:	a37b      	add	r3, pc, #492	; (adr r3, 8004e90 <__ieee754_pow+0x710>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fa9c 	bl	80001e4 <__adddf3>
 8004cac:	4622      	mov	r2, r4
 8004cae:	462b      	mov	r3, r5
 8004cb0:	f7fb fc4e 	bl	8000550 <__aeabi_dmul>
 8004cb4:	a378      	add	r3, pc, #480	; (adr r3, 8004e98 <__ieee754_pow+0x718>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb fa93 	bl	80001e4 <__adddf3>
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	f7fb fc45 	bl	8000550 <__aeabi_dmul>
 8004cc6:	a376      	add	r3, pc, #472	; (adr r3, 8004ea0 <__ieee754_pow+0x720>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fa8a 	bl	80001e4 <__adddf3>
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	f7fb fc3c 	bl	8000550 <__aeabi_dmul>
 8004cd8:	a373      	add	r3, pc, #460	; (adr r3, 8004ea8 <__ieee754_pow+0x728>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f7fb fa81 	bl	80001e4 <__adddf3>
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	f7fb fc33 	bl	8000550 <__aeabi_dmul>
 8004cea:	a371      	add	r3, pc, #452	; (adr r3, 8004eb0 <__ieee754_pow+0x730>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f7fb fa78 	bl	80001e4 <__adddf3>
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460f      	mov	r7, r1
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fc26 	bl	8000550 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4630      	mov	r0, r6
 8004d0a:	4639      	mov	r1, r7
 8004d0c:	f7fb fc20 	bl	8000550 <__aeabi_dmul>
 8004d10:	4642      	mov	r2, r8
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	464b      	mov	r3, r9
 8004d18:	ec51 0b18 	vmov	r0, r1, d8
 8004d1c:	f7fb fa62 	bl	80001e4 <__adddf3>
 8004d20:	ec53 2b19 	vmov	r2, r3, d9
 8004d24:	f7fb fc14 	bl	8000550 <__aeabi_dmul>
 8004d28:	4622      	mov	r2, r4
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	f7fb fa5a 	bl	80001e4 <__adddf3>
 8004d30:	4642      	mov	r2, r8
 8004d32:	4682      	mov	sl, r0
 8004d34:	468b      	mov	fp, r1
 8004d36:	464b      	mov	r3, r9
 8004d38:	4640      	mov	r0, r8
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	f7fb fc08 	bl	8000550 <__aeabi_dmul>
 8004d40:	4b6b      	ldr	r3, [pc, #428]	; (8004ef0 <__ieee754_pow+0x770>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	4606      	mov	r6, r0
 8004d46:	460f      	mov	r7, r1
 8004d48:	f7fb fa4c 	bl	80001e4 <__adddf3>
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	465b      	mov	r3, fp
 8004d50:	f7fb fa48 	bl	80001e4 <__adddf3>
 8004d54:	2000      	movs	r0, #0
 8004d56:	4604      	mov	r4, r0
 8004d58:	460d      	mov	r5, r1
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	f7fb fbf5 	bl	8000550 <__aeabi_dmul>
 8004d66:	4b62      	ldr	r3, [pc, #392]	; (8004ef0 <__ieee754_pow+0x770>)
 8004d68:	4680      	mov	r8, r0
 8004d6a:	4689      	mov	r9, r1
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4620      	mov	r0, r4
 8004d70:	4629      	mov	r1, r5
 8004d72:	f7fb fa35 	bl	80001e0 <__aeabi_dsub>
 8004d76:	4632      	mov	r2, r6
 8004d78:	463b      	mov	r3, r7
 8004d7a:	f7fb fa31 	bl	80001e0 <__aeabi_dsub>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4650      	mov	r0, sl
 8004d84:	4659      	mov	r1, fp
 8004d86:	f7fb fa2b 	bl	80001e0 <__aeabi_dsub>
 8004d8a:	ec53 2b18 	vmov	r2, r3, d8
 8004d8e:	f7fb fbdf 	bl	8000550 <__aeabi_dmul>
 8004d92:	4622      	mov	r2, r4
 8004d94:	4606      	mov	r6, r0
 8004d96:	460f      	mov	r7, r1
 8004d98:	462b      	mov	r3, r5
 8004d9a:	ec51 0b19 	vmov	r0, r1, d9
 8004d9e:	f7fb fbd7 	bl	8000550 <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	f7fb fa1b 	bl	80001e4 <__adddf3>
 8004dae:	4606      	mov	r6, r0
 8004db0:	460f      	mov	r7, r1
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4640      	mov	r0, r8
 8004db8:	4649      	mov	r1, r9
 8004dba:	f7fb fa13 	bl	80001e4 <__adddf3>
 8004dbe:	a33e      	add	r3, pc, #248	; (adr r3, 8004eb8 <__ieee754_pow+0x738>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	460d      	mov	r5, r1
 8004dca:	f7fb fbc1 	bl	8000550 <__aeabi_dmul>
 8004dce:	4642      	mov	r2, r8
 8004dd0:	ec41 0b18 	vmov	d8, r0, r1
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f7fb fa01 	bl	80001e0 <__aeabi_dsub>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb f9fb 	bl	80001e0 <__aeabi_dsub>
 8004dea:	a335      	add	r3, pc, #212	; (adr r3, 8004ec0 <__ieee754_pow+0x740>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb fbae 	bl	8000550 <__aeabi_dmul>
 8004df4:	a334      	add	r3, pc, #208	; (adr r3, 8004ec8 <__ieee754_pow+0x748>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460f      	mov	r7, r1
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4629      	mov	r1, r5
 8004e02:	f7fb fba5 	bl	8000550 <__aeabi_dmul>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	f7fb f9e9 	bl	80001e4 <__adddf3>
 8004e12:	9a07      	ldr	r2, [sp, #28]
 8004e14:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <__ieee754_pow+0x774>)
 8004e16:	4413      	add	r3, r2
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb f9e2 	bl	80001e4 <__adddf3>
 8004e20:	4682      	mov	sl, r0
 8004e22:	9805      	ldr	r0, [sp, #20]
 8004e24:	468b      	mov	fp, r1
 8004e26:	f7fb fb29 	bl	800047c <__aeabi_i2d>
 8004e2a:	9a07      	ldr	r2, [sp, #28]
 8004e2c:	4b32      	ldr	r3, [pc, #200]	; (8004ef8 <__ieee754_pow+0x778>)
 8004e2e:	4413      	add	r3, r2
 8004e30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	4652      	mov	r2, sl
 8004e3a:	465b      	mov	r3, fp
 8004e3c:	ec51 0b18 	vmov	r0, r1, d8
 8004e40:	f7fb f9d0 	bl	80001e4 <__adddf3>
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	f7fb f9cc 	bl	80001e4 <__adddf3>
 8004e4c:	4632      	mov	r2, r6
 8004e4e:	463b      	mov	r3, r7
 8004e50:	f7fb f9c8 	bl	80001e4 <__adddf3>
 8004e54:	2000      	movs	r0, #0
 8004e56:	4632      	mov	r2, r6
 8004e58:	463b      	mov	r3, r7
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	460d      	mov	r5, r1
 8004e5e:	f7fb f9bf 	bl	80001e0 <__aeabi_dsub>
 8004e62:	4642      	mov	r2, r8
 8004e64:	464b      	mov	r3, r9
 8004e66:	f7fb f9bb 	bl	80001e0 <__aeabi_dsub>
 8004e6a:	ec53 2b18 	vmov	r2, r3, d8
 8004e6e:	f7fb f9b7 	bl	80001e0 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4650      	mov	r0, sl
 8004e78:	4659      	mov	r1, fp
 8004e7a:	e610      	b.n	8004a9e <__ieee754_pow+0x31e>
 8004e7c:	2401      	movs	r4, #1
 8004e7e:	e6a1      	b.n	8004bc4 <__ieee754_pow+0x444>
 8004e80:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004ed0 <__ieee754_pow+0x750>
 8004e84:	e617      	b.n	8004ab6 <__ieee754_pow+0x336>
 8004e86:	bf00      	nop
 8004e88:	4a454eef 	.word	0x4a454eef
 8004e8c:	3fca7e28 	.word	0x3fca7e28
 8004e90:	93c9db65 	.word	0x93c9db65
 8004e94:	3fcd864a 	.word	0x3fcd864a
 8004e98:	a91d4101 	.word	0xa91d4101
 8004e9c:	3fd17460 	.word	0x3fd17460
 8004ea0:	518f264d 	.word	0x518f264d
 8004ea4:	3fd55555 	.word	0x3fd55555
 8004ea8:	db6fabff 	.word	0xdb6fabff
 8004eac:	3fdb6db6 	.word	0x3fdb6db6
 8004eb0:	33333303 	.word	0x33333303
 8004eb4:	3fe33333 	.word	0x3fe33333
 8004eb8:	e0000000 	.word	0xe0000000
 8004ebc:	3feec709 	.word	0x3feec709
 8004ec0:	dc3a03fd 	.word	0xdc3a03fd
 8004ec4:	3feec709 	.word	0x3feec709
 8004ec8:	145b01f5 	.word	0x145b01f5
 8004ecc:	be3e2fe0 	.word	0xbe3e2fe0
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	3ff00000 	.word	0x3ff00000
 8004ed8:	7ff00000 	.word	0x7ff00000
 8004edc:	43400000 	.word	0x43400000
 8004ee0:	0003988e 	.word	0x0003988e
 8004ee4:	000bb679 	.word	0x000bb679
 8004ee8:	08005550 	.word	0x08005550
 8004eec:	3ff00000 	.word	0x3ff00000
 8004ef0:	40080000 	.word	0x40080000
 8004ef4:	08005570 	.word	0x08005570
 8004ef8:	08005560 	.word	0x08005560
 8004efc:	a3b5      	add	r3, pc, #724	; (adr r3, 80051d4 <__ieee754_pow+0xa54>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb f96d 	bl	80001e4 <__adddf3>
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	ec41 0b1a 	vmov	d10, r0, r1
 8004f10:	462b      	mov	r3, r5
 8004f12:	4630      	mov	r0, r6
 8004f14:	4639      	mov	r1, r7
 8004f16:	f7fb f963 	bl	80001e0 <__aeabi_dsub>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	ec51 0b1a 	vmov	r0, r1, d10
 8004f22:	f7fb fda5 	bl	8000a70 <__aeabi_dcmpgt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f47f ae04 	bne.w	8004b34 <__ieee754_pow+0x3b4>
 8004f2c:	4aa4      	ldr	r2, [pc, #656]	; (80051c0 <__ieee754_pow+0xa40>)
 8004f2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f32:	4293      	cmp	r3, r2
 8004f34:	f340 8108 	ble.w	8005148 <__ieee754_pow+0x9c8>
 8004f38:	151b      	asrs	r3, r3, #20
 8004f3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004f3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004f42:	fa4a f303 	asr.w	r3, sl, r3
 8004f46:	445b      	add	r3, fp
 8004f48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004f4c:	4e9d      	ldr	r6, [pc, #628]	; (80051c4 <__ieee754_pow+0xa44>)
 8004f4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004f52:	4116      	asrs	r6, r2
 8004f54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004f58:	2000      	movs	r0, #0
 8004f5a:	ea23 0106 	bic.w	r1, r3, r6
 8004f5e:	f1c2 0214 	rsb	r2, r2, #20
 8004f62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004f66:	fa4a fa02 	asr.w	sl, sl, r2
 8004f6a:	f1bb 0f00 	cmp.w	fp, #0
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	bfb8      	it	lt
 8004f78:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f7c:	f7fb f930 	bl	80001e0 <__aeabi_dsub>
 8004f80:	ec41 0b19 	vmov	d9, r0, r1
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	ec51 0b19 	vmov	r0, r1, d9
 8004f8c:	f7fb f92a 	bl	80001e4 <__adddf3>
 8004f90:	a37b      	add	r3, pc, #492	; (adr r3, 8005180 <__ieee754_pow+0xa00>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	2000      	movs	r0, #0
 8004f98:	4604      	mov	r4, r0
 8004f9a:	460d      	mov	r5, r1
 8004f9c:	f7fb fad8 	bl	8000550 <__aeabi_dmul>
 8004fa0:	ec53 2b19 	vmov	r2, r3, d9
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	460f      	mov	r7, r1
 8004fa8:	4620      	mov	r0, r4
 8004faa:	4629      	mov	r1, r5
 8004fac:	f7fb f918 	bl	80001e0 <__aeabi_dsub>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	f7fb f912 	bl	80001e0 <__aeabi_dsub>
 8004fbc:	a372      	add	r3, pc, #456	; (adr r3, 8005188 <__ieee754_pow+0xa08>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fac5 	bl	8000550 <__aeabi_dmul>
 8004fc6:	a372      	add	r3, pc, #456	; (adr r3, 8005190 <__ieee754_pow+0xa10>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4689      	mov	r9, r1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f7fb fabc 	bl	8000550 <__aeabi_dmul>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4640      	mov	r0, r8
 8004fde:	4649      	mov	r1, r9
 8004fe0:	f7fb f900 	bl	80001e4 <__adddf3>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4630      	mov	r0, r6
 8004fee:	4639      	mov	r1, r7
 8004ff0:	f7fb f8f8 	bl	80001e4 <__adddf3>
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4689      	mov	r9, r1
 8004ffc:	f7fb f8f0 	bl	80001e0 <__aeabi_dsub>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4620      	mov	r0, r4
 8005006:	4629      	mov	r1, r5
 8005008:	f7fb f8ea 	bl	80001e0 <__aeabi_dsub>
 800500c:	4642      	mov	r2, r8
 800500e:	4606      	mov	r6, r0
 8005010:	460f      	mov	r7, r1
 8005012:	464b      	mov	r3, r9
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fa9a 	bl	8000550 <__aeabi_dmul>
 800501c:	a35e      	add	r3, pc, #376	; (adr r3, 8005198 <__ieee754_pow+0xa18>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	4604      	mov	r4, r0
 8005024:	460d      	mov	r5, r1
 8005026:	f7fb fa93 	bl	8000550 <__aeabi_dmul>
 800502a:	a35d      	add	r3, pc, #372	; (adr r3, 80051a0 <__ieee754_pow+0xa20>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb f8d6 	bl	80001e0 <__aeabi_dsub>
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	f7fb fa8a 	bl	8000550 <__aeabi_dmul>
 800503c:	a35a      	add	r3, pc, #360	; (adr r3, 80051a8 <__ieee754_pow+0xa28>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb f8cf 	bl	80001e4 <__adddf3>
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	f7fb fa81 	bl	8000550 <__aeabi_dmul>
 800504e:	a358      	add	r3, pc, #352	; (adr r3, 80051b0 <__ieee754_pow+0xa30>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb f8c4 	bl	80001e0 <__aeabi_dsub>
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	f7fb fa78 	bl	8000550 <__aeabi_dmul>
 8005060:	a355      	add	r3, pc, #340	; (adr r3, 80051b8 <__ieee754_pow+0xa38>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb f8bd 	bl	80001e4 <__adddf3>
 800506a:	4622      	mov	r2, r4
 800506c:	462b      	mov	r3, r5
 800506e:	f7fb fa6f 	bl	8000550 <__aeabi_dmul>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb f8b1 	bl	80001e0 <__aeabi_dsub>
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4640      	mov	r0, r8
 8005088:	4649      	mov	r1, r9
 800508a:	f7fb fa61 	bl	8000550 <__aeabi_dmul>
 800508e:	2200      	movs	r2, #0
 8005090:	ec41 0b19 	vmov	d9, r0, r1
 8005094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005098:	4620      	mov	r0, r4
 800509a:	4629      	mov	r1, r5
 800509c:	f7fb f8a0 	bl	80001e0 <__aeabi_dsub>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	ec51 0b19 	vmov	r0, r1, d9
 80050a8:	f7fb fb7c 	bl	80007a4 <__aeabi_ddiv>
 80050ac:	4632      	mov	r2, r6
 80050ae:	4604      	mov	r4, r0
 80050b0:	460d      	mov	r5, r1
 80050b2:	463b      	mov	r3, r7
 80050b4:	4640      	mov	r0, r8
 80050b6:	4649      	mov	r1, r9
 80050b8:	f7fb fa4a 	bl	8000550 <__aeabi_dmul>
 80050bc:	4632      	mov	r2, r6
 80050be:	463b      	mov	r3, r7
 80050c0:	f7fb f890 	bl	80001e4 <__adddf3>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4620      	mov	r0, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7fb f888 	bl	80001e0 <__aeabi_dsub>
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	f7fb f884 	bl	80001e0 <__aeabi_dsub>
 80050d8:	460b      	mov	r3, r1
 80050da:	4602      	mov	r2, r0
 80050dc:	493a      	ldr	r1, [pc, #232]	; (80051c8 <__ieee754_pow+0xa48>)
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fb f87e 	bl	80001e0 <__aeabi_dsub>
 80050e4:	ec41 0b10 	vmov	d0, r0, r1
 80050e8:	ee10 3a90 	vmov	r3, s1
 80050ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f4:	da2b      	bge.n	800514e <__ieee754_pow+0x9ce>
 80050f6:	4650      	mov	r0, sl
 80050f8:	f000 f966 	bl	80053c8 <scalbn>
 80050fc:	ec51 0b10 	vmov	r0, r1, d0
 8005100:	ec53 2b18 	vmov	r2, r3, d8
 8005104:	f7ff bbed 	b.w	80048e2 <__ieee754_pow+0x162>
 8005108:	4b30      	ldr	r3, [pc, #192]	; (80051cc <__ieee754_pow+0xa4c>)
 800510a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800510e:	429e      	cmp	r6, r3
 8005110:	f77f af0c 	ble.w	8004f2c <__ieee754_pow+0x7ac>
 8005114:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <__ieee754_pow+0xa50>)
 8005116:	440b      	add	r3, r1
 8005118:	4303      	orrs	r3, r0
 800511a:	d009      	beq.n	8005130 <__ieee754_pow+0x9b0>
 800511c:	ec51 0b18 	vmov	r0, r1, d8
 8005120:	2200      	movs	r2, #0
 8005122:	2300      	movs	r3, #0
 8005124:	f7fb fc86 	bl	8000a34 <__aeabi_dcmplt>
 8005128:	3800      	subs	r0, #0
 800512a:	bf18      	it	ne
 800512c:	2001      	movne	r0, #1
 800512e:	e447      	b.n	80049c0 <__ieee754_pow+0x240>
 8005130:	4622      	mov	r2, r4
 8005132:	462b      	mov	r3, r5
 8005134:	f7fb f854 	bl	80001e0 <__aeabi_dsub>
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	f7fb fc8e 	bl	8000a5c <__aeabi_dcmpge>
 8005140:	2800      	cmp	r0, #0
 8005142:	f43f aef3 	beq.w	8004f2c <__ieee754_pow+0x7ac>
 8005146:	e7e9      	b.n	800511c <__ieee754_pow+0x99c>
 8005148:	f04f 0a00 	mov.w	sl, #0
 800514c:	e71a      	b.n	8004f84 <__ieee754_pow+0x804>
 800514e:	ec51 0b10 	vmov	r0, r1, d0
 8005152:	4619      	mov	r1, r3
 8005154:	e7d4      	b.n	8005100 <__ieee754_pow+0x980>
 8005156:	491c      	ldr	r1, [pc, #112]	; (80051c8 <__ieee754_pow+0xa48>)
 8005158:	2000      	movs	r0, #0
 800515a:	f7ff bb30 	b.w	80047be <__ieee754_pow+0x3e>
 800515e:	2000      	movs	r0, #0
 8005160:	2100      	movs	r1, #0
 8005162:	f7ff bb2c 	b.w	80047be <__ieee754_pow+0x3e>
 8005166:	4630      	mov	r0, r6
 8005168:	4639      	mov	r1, r7
 800516a:	f7ff bb28 	b.w	80047be <__ieee754_pow+0x3e>
 800516e:	9204      	str	r2, [sp, #16]
 8005170:	f7ff bb7a 	b.w	8004868 <__ieee754_pow+0xe8>
 8005174:	2300      	movs	r3, #0
 8005176:	f7ff bb64 	b.w	8004842 <__ieee754_pow+0xc2>
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w
 8005180:	00000000 	.word	0x00000000
 8005184:	3fe62e43 	.word	0x3fe62e43
 8005188:	fefa39ef 	.word	0xfefa39ef
 800518c:	3fe62e42 	.word	0x3fe62e42
 8005190:	0ca86c39 	.word	0x0ca86c39
 8005194:	be205c61 	.word	0xbe205c61
 8005198:	72bea4d0 	.word	0x72bea4d0
 800519c:	3e663769 	.word	0x3e663769
 80051a0:	c5d26bf1 	.word	0xc5d26bf1
 80051a4:	3ebbbd41 	.word	0x3ebbbd41
 80051a8:	af25de2c 	.word	0xaf25de2c
 80051ac:	3f11566a 	.word	0x3f11566a
 80051b0:	16bebd93 	.word	0x16bebd93
 80051b4:	3f66c16c 	.word	0x3f66c16c
 80051b8:	5555553e 	.word	0x5555553e
 80051bc:	3fc55555 	.word	0x3fc55555
 80051c0:	3fe00000 	.word	0x3fe00000
 80051c4:	000fffff 	.word	0x000fffff
 80051c8:	3ff00000 	.word	0x3ff00000
 80051cc:	4090cbff 	.word	0x4090cbff
 80051d0:	3f6f3400 	.word	0x3f6f3400
 80051d4:	652b82fe 	.word	0x652b82fe
 80051d8:	3c971547 	.word	0x3c971547

080051dc <__ieee754_sqrt>:
 80051dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e0:	ec55 4b10 	vmov	r4, r5, d0
 80051e4:	4e55      	ldr	r6, [pc, #340]	; (800533c <__ieee754_sqrt+0x160>)
 80051e6:	43ae      	bics	r6, r5
 80051e8:	ee10 0a10 	vmov	r0, s0
 80051ec:	ee10 3a10 	vmov	r3, s0
 80051f0:	462a      	mov	r2, r5
 80051f2:	4629      	mov	r1, r5
 80051f4:	d110      	bne.n	8005218 <__ieee754_sqrt+0x3c>
 80051f6:	ee10 2a10 	vmov	r2, s0
 80051fa:	462b      	mov	r3, r5
 80051fc:	f7fb f9a8 	bl	8000550 <__aeabi_dmul>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fa ffec 	bl	80001e4 <__adddf3>
 800520c:	4604      	mov	r4, r0
 800520e:	460d      	mov	r5, r1
 8005210:	ec45 4b10 	vmov	d0, r4, r5
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	2d00      	cmp	r5, #0
 800521a:	dc10      	bgt.n	800523e <__ieee754_sqrt+0x62>
 800521c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005220:	4330      	orrs	r0, r6
 8005222:	d0f5      	beq.n	8005210 <__ieee754_sqrt+0x34>
 8005224:	b15d      	cbz	r5, 800523e <__ieee754_sqrt+0x62>
 8005226:	ee10 2a10 	vmov	r2, s0
 800522a:	462b      	mov	r3, r5
 800522c:	ee10 0a10 	vmov	r0, s0
 8005230:	f7fa ffd6 	bl	80001e0 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	f7fb fab4 	bl	80007a4 <__aeabi_ddiv>
 800523c:	e7e6      	b.n	800520c <__ieee754_sqrt+0x30>
 800523e:	1512      	asrs	r2, r2, #20
 8005240:	d074      	beq.n	800532c <__ieee754_sqrt+0x150>
 8005242:	07d4      	lsls	r4, r2, #31
 8005244:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005248:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800524c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005250:	bf5e      	ittt	pl
 8005252:	0fda      	lsrpl	r2, r3, #31
 8005254:	005b      	lslpl	r3, r3, #1
 8005256:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800525a:	2400      	movs	r4, #0
 800525c:	0fda      	lsrs	r2, r3, #31
 800525e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005262:	107f      	asrs	r7, r7, #1
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	2516      	movs	r5, #22
 8005268:	4620      	mov	r0, r4
 800526a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800526e:	1886      	adds	r6, r0, r2
 8005270:	428e      	cmp	r6, r1
 8005272:	bfde      	ittt	le
 8005274:	1b89      	suble	r1, r1, r6
 8005276:	18b0      	addle	r0, r6, r2
 8005278:	18a4      	addle	r4, r4, r2
 800527a:	0049      	lsls	r1, r1, #1
 800527c:	3d01      	subs	r5, #1
 800527e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005282:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005286:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800528a:	d1f0      	bne.n	800526e <__ieee754_sqrt+0x92>
 800528c:	462a      	mov	r2, r5
 800528e:	f04f 0e20 	mov.w	lr, #32
 8005292:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005296:	4281      	cmp	r1, r0
 8005298:	eb06 0c05 	add.w	ip, r6, r5
 800529c:	dc02      	bgt.n	80052a4 <__ieee754_sqrt+0xc8>
 800529e:	d113      	bne.n	80052c8 <__ieee754_sqrt+0xec>
 80052a0:	459c      	cmp	ip, r3
 80052a2:	d811      	bhi.n	80052c8 <__ieee754_sqrt+0xec>
 80052a4:	f1bc 0f00 	cmp.w	ip, #0
 80052a8:	eb0c 0506 	add.w	r5, ip, r6
 80052ac:	da43      	bge.n	8005336 <__ieee754_sqrt+0x15a>
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	db41      	blt.n	8005336 <__ieee754_sqrt+0x15a>
 80052b2:	f100 0801 	add.w	r8, r0, #1
 80052b6:	1a09      	subs	r1, r1, r0
 80052b8:	459c      	cmp	ip, r3
 80052ba:	bf88      	it	hi
 80052bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80052c0:	eba3 030c 	sub.w	r3, r3, ip
 80052c4:	4432      	add	r2, r6
 80052c6:	4640      	mov	r0, r8
 80052c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80052cc:	f1be 0e01 	subs.w	lr, lr, #1
 80052d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80052d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80052dc:	d1db      	bne.n	8005296 <__ieee754_sqrt+0xba>
 80052de:	430b      	orrs	r3, r1
 80052e0:	d006      	beq.n	80052f0 <__ieee754_sqrt+0x114>
 80052e2:	1c50      	adds	r0, r2, #1
 80052e4:	bf13      	iteet	ne
 80052e6:	3201      	addne	r2, #1
 80052e8:	3401      	addeq	r4, #1
 80052ea:	4672      	moveq	r2, lr
 80052ec:	f022 0201 	bicne.w	r2, r2, #1
 80052f0:	1063      	asrs	r3, r4, #1
 80052f2:	0852      	lsrs	r2, r2, #1
 80052f4:	07e1      	lsls	r1, r4, #31
 80052f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80052fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80052fe:	bf48      	it	mi
 8005300:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005304:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005308:	4614      	mov	r4, r2
 800530a:	e781      	b.n	8005210 <__ieee754_sqrt+0x34>
 800530c:	0ad9      	lsrs	r1, r3, #11
 800530e:	3815      	subs	r0, #21
 8005310:	055b      	lsls	r3, r3, #21
 8005312:	2900      	cmp	r1, #0
 8005314:	d0fa      	beq.n	800530c <__ieee754_sqrt+0x130>
 8005316:	02cd      	lsls	r5, r1, #11
 8005318:	d50a      	bpl.n	8005330 <__ieee754_sqrt+0x154>
 800531a:	f1c2 0420 	rsb	r4, r2, #32
 800531e:	fa23 f404 	lsr.w	r4, r3, r4
 8005322:	1e55      	subs	r5, r2, #1
 8005324:	4093      	lsls	r3, r2
 8005326:	4321      	orrs	r1, r4
 8005328:	1b42      	subs	r2, r0, r5
 800532a:	e78a      	b.n	8005242 <__ieee754_sqrt+0x66>
 800532c:	4610      	mov	r0, r2
 800532e:	e7f0      	b.n	8005312 <__ieee754_sqrt+0x136>
 8005330:	0049      	lsls	r1, r1, #1
 8005332:	3201      	adds	r2, #1
 8005334:	e7ef      	b.n	8005316 <__ieee754_sqrt+0x13a>
 8005336:	4680      	mov	r8, r0
 8005338:	e7bd      	b.n	80052b6 <__ieee754_sqrt+0xda>
 800533a:	bf00      	nop
 800533c:	7ff00000 	.word	0x7ff00000

08005340 <with_errno>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4604      	mov	r4, r0
 8005344:	460d      	mov	r5, r1
 8005346:	4616      	mov	r6, r2
 8005348:	f7ff f968 	bl	800461c <__errno>
 800534c:	4629      	mov	r1, r5
 800534e:	6006      	str	r6, [r0, #0]
 8005350:	4620      	mov	r0, r4
 8005352:	bd70      	pop	{r4, r5, r6, pc}

08005354 <xflow>:
 8005354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005356:	4614      	mov	r4, r2
 8005358:	461d      	mov	r5, r3
 800535a:	b108      	cbz	r0, 8005360 <xflow+0xc>
 800535c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005360:	e9cd 2300 	strd	r2, r3, [sp]
 8005364:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005368:	4620      	mov	r0, r4
 800536a:	4629      	mov	r1, r5
 800536c:	f7fb f8f0 	bl	8000550 <__aeabi_dmul>
 8005370:	2222      	movs	r2, #34	; 0x22
 8005372:	b003      	add	sp, #12
 8005374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005378:	f7ff bfe2 	b.w	8005340 <with_errno>

0800537c <__math_uflow>:
 800537c:	b508      	push	{r3, lr}
 800537e:	2200      	movs	r2, #0
 8005380:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005384:	f7ff ffe6 	bl	8005354 <xflow>
 8005388:	ec41 0b10 	vmov	d0, r0, r1
 800538c:	bd08      	pop	{r3, pc}

0800538e <__math_oflow>:
 800538e:	b508      	push	{r3, lr}
 8005390:	2200      	movs	r2, #0
 8005392:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005396:	f7ff ffdd 	bl	8005354 <xflow>
 800539a:	ec41 0b10 	vmov	d0, r0, r1
 800539e:	bd08      	pop	{r3, pc}

080053a0 <fabs>:
 80053a0:	ec51 0b10 	vmov	r0, r1, d0
 80053a4:	ee10 2a10 	vmov	r2, s0
 80053a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053ac:	ec43 2b10 	vmov	d0, r2, r3
 80053b0:	4770      	bx	lr

080053b2 <finite>:
 80053b2:	b082      	sub	sp, #8
 80053b4:	ed8d 0b00 	vstr	d0, [sp]
 80053b8:	9801      	ldr	r0, [sp, #4]
 80053ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80053be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80053c2:	0fc0      	lsrs	r0, r0, #31
 80053c4:	b002      	add	sp, #8
 80053c6:	4770      	bx	lr

080053c8 <scalbn>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	ec55 4b10 	vmov	r4, r5, d0
 80053ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80053d2:	4606      	mov	r6, r0
 80053d4:	462b      	mov	r3, r5
 80053d6:	b99a      	cbnz	r2, 8005400 <scalbn+0x38>
 80053d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80053dc:	4323      	orrs	r3, r4
 80053de:	d036      	beq.n	800544e <scalbn+0x86>
 80053e0:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <scalbn+0x100>)
 80053e2:	4629      	mov	r1, r5
 80053e4:	ee10 0a10 	vmov	r0, s0
 80053e8:	2200      	movs	r2, #0
 80053ea:	f7fb f8b1 	bl	8000550 <__aeabi_dmul>
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <scalbn+0x104>)
 80053f0:	429e      	cmp	r6, r3
 80053f2:	4604      	mov	r4, r0
 80053f4:	460d      	mov	r5, r1
 80053f6:	da10      	bge.n	800541a <scalbn+0x52>
 80053f8:	a32b      	add	r3, pc, #172	; (adr r3, 80054a8 <scalbn+0xe0>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	e03a      	b.n	8005476 <scalbn+0xae>
 8005400:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005404:	428a      	cmp	r2, r1
 8005406:	d10c      	bne.n	8005422 <scalbn+0x5a>
 8005408:	ee10 2a10 	vmov	r2, s0
 800540c:	4620      	mov	r0, r4
 800540e:	4629      	mov	r1, r5
 8005410:	f7fa fee8 	bl	80001e4 <__adddf3>
 8005414:	4604      	mov	r4, r0
 8005416:	460d      	mov	r5, r1
 8005418:	e019      	b.n	800544e <scalbn+0x86>
 800541a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800541e:	460b      	mov	r3, r1
 8005420:	3a36      	subs	r2, #54	; 0x36
 8005422:	4432      	add	r2, r6
 8005424:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005428:	428a      	cmp	r2, r1
 800542a:	dd08      	ble.n	800543e <scalbn+0x76>
 800542c:	2d00      	cmp	r5, #0
 800542e:	a120      	add	r1, pc, #128	; (adr r1, 80054b0 <scalbn+0xe8>)
 8005430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005434:	da1c      	bge.n	8005470 <scalbn+0xa8>
 8005436:	a120      	add	r1, pc, #128	; (adr r1, 80054b8 <scalbn+0xf0>)
 8005438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800543c:	e018      	b.n	8005470 <scalbn+0xa8>
 800543e:	2a00      	cmp	r2, #0
 8005440:	dd08      	ble.n	8005454 <scalbn+0x8c>
 8005442:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005446:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800544a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800544e:	ec45 4b10 	vmov	d0, r4, r5
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005458:	da19      	bge.n	800548e <scalbn+0xc6>
 800545a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800545e:	429e      	cmp	r6, r3
 8005460:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005464:	dd0a      	ble.n	800547c <scalbn+0xb4>
 8005466:	a112      	add	r1, pc, #72	; (adr r1, 80054b0 <scalbn+0xe8>)
 8005468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e2      	bne.n	8005436 <scalbn+0x6e>
 8005470:	a30f      	add	r3, pc, #60	; (adr r3, 80054b0 <scalbn+0xe8>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fb f86b 	bl	8000550 <__aeabi_dmul>
 800547a:	e7cb      	b.n	8005414 <scalbn+0x4c>
 800547c:	a10a      	add	r1, pc, #40	; (adr r1, 80054a8 <scalbn+0xe0>)
 800547e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0b8      	beq.n	80053f8 <scalbn+0x30>
 8005486:	a10e      	add	r1, pc, #56	; (adr r1, 80054c0 <scalbn+0xf8>)
 8005488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800548c:	e7b4      	b.n	80053f8 <scalbn+0x30>
 800548e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005492:	3236      	adds	r2, #54	; 0x36
 8005494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800549c:	4620      	mov	r0, r4
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <scalbn+0x108>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	e7e8      	b.n	8005476 <scalbn+0xae>
 80054a4:	f3af 8000 	nop.w
 80054a8:	c2f8f359 	.word	0xc2f8f359
 80054ac:	01a56e1f 	.word	0x01a56e1f
 80054b0:	8800759c 	.word	0x8800759c
 80054b4:	7e37e43c 	.word	0x7e37e43c
 80054b8:	8800759c 	.word	0x8800759c
 80054bc:	fe37e43c 	.word	0xfe37e43c
 80054c0:	c2f8f359 	.word	0xc2f8f359
 80054c4:	81a56e1f 	.word	0x81a56e1f
 80054c8:	43500000 	.word	0x43500000
 80054cc:	ffff3cb0 	.word	0xffff3cb0
 80054d0:	3c900000 	.word	0x3c900000

080054d4 <_init>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr

080054e0 <_fini>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr
